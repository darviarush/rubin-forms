Всё сразу сделать нельзя - начни с малого.
Деньги, заработанные сегодня, стоят дороже, чем деньги, заработанные завтра.
KISS - упрощай.
YAGNI - только то что нужно сейчас.
Чем хуже, тем лучше
DRY - каждая часть знания должна иметь единственное, непротиворечивое и авторитетное представление в рамках системы


ХР
    Короткий цикл обратной связи (Fine-scale feedback)
        Разработка через тестирование (Test-driven development) TDD
        Игра в планирование (Planning game) - пожелания заказчика записывается на карточки (customer stories) и приблизительный план работы на итерацию (производство следующей версии продукта)
        Заказчик всегда рядом (Whole team, Onsite customer) - заказчик, это пользователь, а не директор
        Парное программирование (Pair programming)
    Непрерывный, а не пакетный процесс
        Непрерывная интеграция (Continuous integration)
        Рефакторинг (Design improvement, Refactoring)
        Частые небольшие релизы (Small releases) - деньги, заработанные сегодня, стоят дороже, чем деньги, заработанные завтра
    Понимание, разделяемое всеми
        Простота (Simple design) - использовать наиболее простой дизайн
        Метафора системы - как устроена система
        Коллективное владение кодом (Collective code ownership) или выбранными шаблонами проектирования (Collective patterns ownership)
        Стандарт кодирования (Coding standard or Coding conventions)
    Социальная защищённость программиста (Programmer welfare):
        40-часовая рабочая неделя (Sustainable pace, Forty-hour week)


KISS (акроним для «Keep it short and simple») — принцип проектирования, принятый в ВМС США в 1960. Принцип KISS утверждает, что большинство систем работают лучше всего, если они остаются простыми, а не усложняются. Поэтому в области проектирования простота должна быть одной из ключевых целей и следует избегать ненужной сложности.

KISS-принцип (от англ. keep it simple, stupid — «делай это проще, дурачок») — принцип, запрещающий использование более сложных средств, чем необходимо.

YAGNI («You ain't gonna need it»; с англ. — «Вам это не понадобится») — процесс и принцип проектирования ПО, при котором в качестве основной цели и/или ценности декларируется отказ от избыточной функциональности, — то есть отказ добавления функциональности, в которой нет непосредственной надобности.



Чем хуже, тем лучше — подход к разработке программного обеспечения, объявляющий простоту реализации и простоту интерфейса более важными, чем любые другие свойства системы.
1. Простота: реализация и интерфейс должны быть простыми. Простота реализации даже несколько важнее простоты интерфейса. 2. Простота — самое важное требование при выборе дизайна.
3. Правильность: дизайн должен быть правильным во всех видимых проявлениях. Простой дизайн немного лучше, чем правильный.
4. Логичность (последовательность): дизайн не должен быть слишком нелогичным. Иногда можно пожертвовать логичностью ради простоты, но лучше отказаться от тех частей дизайна, которые полезны лишь в редких случаях, чем усложнить реализацию или пожертвовать логичностью.
5. Полнота: дизайн должен охватывать как можно больше важных ситуаций. Полнотой можно жертвовать в пользу остальных качеств и обязательно нужно жертвовать, если она мешает простоте. Логичностью можно жертвовать в пользу полноты, если сохраняется простота (особенно бесполезна логичность интерфейса).

подход MIT (MIT — Massachusetts Institute of Technology):
1. Простота: реализация и интерфейс должны быть простыми. Простота интерфейса важнее простоты реализации.
2. Правильность: дизайн должен быть правильным во всех отношениях. Неправильный дизайн категорически запрещён.
3. Логичность так же важна, как и правильность. Ради логичности можно жертвовать простотой и полнотой.
4. Полнота: дизайн должен охватывать как можно больше важных ситуаций. Все вероятные ситуации должны быть предусмотрены. 5. Простота не должна слишком мешать полноте.

Don’t repeat yourself, DRY (рус. не повторяйся) — это принцип разработки программного обеспечения, нацеленный на снижение повторения информации различного рода, особенно в системах со множеством слоёв абстрагирования. Принцип DRY формулируется как: «Каждая часть знания должна иметь единственное, непротиворечивое и авторитетное представление в рамках системы»
Нарушения принципа DRY называют WET — «Write Everything Twice» (рус. Пиши всё по два раза)[5]. Это игра английских слов «dry» (рус. сухой) и «wet» (рус. влажный).

