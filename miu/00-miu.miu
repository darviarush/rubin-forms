= miu - система документирования, тестирования и публикаций в интернете

== Что такое miu

В одном файле miu можно набрать статью, в нём же - код тестов, а потом протестировать код, создать документацию и опубликовать на habrahabr.ru, freehabr.ru, livejournal.com и т.д., набрав всего лишь одну команду **miu**.

== Быстрый старт

miu считает любой текст примыкающий к началу строки текстом статьи, а с отступом - кодом.

	my $abs = 16;	# 16
	
теперь я запущу команду

	`miu 0x` # miu/0x-miu.miu ...\n
	
файл этой статьи назвается у меня **miu/0x-miu.miu**. Он будет выполнен, как тест. Точки - это успешно пройденные тесты. **E** - не пройденные. **F** - которые умерли через die.
Точки соответствуют строкам кода с **#**.
Выполняются все файлы начинающиеся на 0x. 

То что стоит после **#** считается строкой для сравнения без начальных и концевых пробелов. Если нам нужно сравнить с выражением perl, то ставим **##**. Сравните:

	1+5 # 6
	1+5 ## 1+5
	" 26\n" # \s26\n
	bless {a=>2}, "Class" ## bless {a=>2}, "Class"
	
Львиная доля тестов приходится как раз на умное сравнение (обратите внимание на последний тест). Однако иногда мне бы хотелось сказать "больше" или "меньше".

	2**3 #< 10
	8 #!= 3
	"8" #== 8
	"meat" #ne eat
	"abc" ##lt "eat"
	"test" #~ es.$
	{} #!~ (?i)^array
	123456 #startswith 123
	123456 #endswith 456
	
Если тест бросает исключение, то его можно протестировать так:

	die "myexception" #@ startswith myexception
	die "myexception" ##@ !~ qr/чего\?/
	die "myexception" #@ !~ чего\?
	
Тестируем поток вывода:

	print "123\n" #>> 123\n
	
А поток ошибок:
	
	print STDERR " +26\t\r\e\v" #&> \s+26\t\r\e\v

	
**#!** тестирует переменную ошибок ввода-вывода $!

	open $f, "/"; ##! ""

== Программный код

Код программы так же может быть записан в файл miu. Он так же должен иметь отступ.
Чтобы переключатся между кодом и тестом нужно использовать ![code] и ![test] с начала строки.

![code]
	package A::A;
	sub A { print "A" }

	package main;
	
![test]
	&A::A::A; #>> A

	
	
Каждая строка **package** будет генерировать файл. Например, тут **lib/A/A.pm** и он будет подключён к тесту.


== Как выполнить тесты из раздела статьи

Часто пишешь-пишешь, написал огромную статью, тесты все в ней запускать - не хочется. Нужно запустить какой-то, над которым работаешь.

	`miu 0x "метки"` # miu/0x-miu.miu .\n
	
Выполнятся все тесты в разделе название которого начинается на ***метки*** или ***Метки*** - сравнение регистронезависимое.

!== Метки 1

В статье miu/0x-miu.miu это раздел ***Метки 1***.
Если таких разделов два, то выполнятся оба. Несколько - несколько.
	
== Какие файлы создаёт miu

Откуда бы miu не запускалось она ищет документацию вверх от каталога со своим исполнимым файлом и в каталоге miu. Тоесть если мы, например, распаковали miu в /usr/local, то структура файлов:

/usr/local/bin/miu  
/usr/local/miu/*.miu

После запуска miu создат каталог /usr/local/rrrumiu

4. **miu-rrrumiu/название_файла.markdown**
3. **miu-rrrumiu/название_файла.t**
1. **miu-rrrumiu/название_файла.log**
2. **miu-rrrumiu/название_файла.stat**
5. **miu-rrrumiu\miu-tmp-fh**


1. *.markdown - это документация на языке markdown. То есть, это копия файла miu\название_файла.miu
2. *.t - это тест
3. *.log - это вывод теста
5. *.stat - то же что и *.log, только с названием парсера
6. **miu-rrrumiu\miu-tmp-fh** - вспомогательный файл для тестирования ввода-вывода (#>> и #&>)


Эти файлы перезаписываются после каждого теста.

	-e "miu-rrrumiu/0x-miu.log" # 1

Можно сразу вывести ошибки на консоль:

	`miu -l 0x` #~ \.*
	
После первой же ошибки остальные файлы не выполнятся.


== Публикуем документацию в интернете

$ miu -p 00
	
miu знает куда публиковать благодаря файлу miu.ini.

`	
[public]
freehabr=yes

[freehabr]
action=freehabr
login=...
password=...
`
	
Тут action - название движка в lib/R/Cosmos/название.pm


== Откуда название miu?

miu названа в честь Рррумиу - героини романа Павла Шумила "Этот мир придуман не нами" из цикла "Окно контакта - 3".

== TODO или куда miu будет развиваться

Что ещё предстоит сделать:

1. Тестирование других языков программирования - сейчас можно тестировать только **perl**
2. Публикация на различных сайтах. Сейчас поддерживается habrahabr.ru, freehabr.ru и livejournal.com
3. Возможность скрывать часть тестов в документации
	



