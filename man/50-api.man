

== R::App

приложение - через него доступны другие классы
== R::App

приложение - через него доступны другие классы


=== import



=== app

возвращает синглетон приложения


=== meta

сокращение для объекта-описания ORM-а


=== msg

логирует вывод
возвращает последний параметр


=== msg1

добавляет =================== перед выводом


=== todo

функция замещения


=== has

создаёт функции-свойства в указанном классе


=== has_const

создаёт функции-константы в указанном классе


=== Isa

проверяет на соответствие isa


=== Can



=== Num

проверяет: является ли переданный скаляр числом
будьте осторожней, т.к. inf и nan - так же числа


=== public



=== closure

замыкание:
closure \&{$self->can("method")}, $self
closure {print}, 5


=== use

подключает и возвращает класс


=== replace

используется в шаблонах языка lukull за неимением более удобного реплейса


=== file

# возвращает группу файлов


=== file



=== R::App::file



=== process



=== R::App::process



=== assert

проверяем условие


=== invariant

добавляем блок в инвариант


=== in

устанавливает предусловие подпрограммы


=== out

устанавливает постусловие подпрограммы


=== __CONTRACT__ARGS__



=== body

устанавливает тело подпрограммы


=== AUTOLOAD



=== DESTROY





=== import




=== app

возвращает синглетон приложения


=== meta

сокращение для объекта-описания ORM-а


=== msg

логирует вывод
возвращает последний параметр


=== msg1

добавляет =================== перед выводом


=== todo

функция замещения


=== has

создаёт функции-свойства в указанном классе


=== has_const

создаёт функции-константы в указанном классе


=== Isa

проверяет на соответствие isa


=== Can




=== Num

проверяет: является ли переданный скаляр числом
будьте осторожней, т.к. inf и nan - так же числа


=== public




=== closure

замыкание:
closure \&{$self->can("method")}, $self
closure {print}, 5


=== use

подключает и возвращает класс


=== replace

используется в шаблонах языка lukull за неимением более удобного реплейса


=== file

# возвращает группу файлов


=== file




=== R::App::file




=== process




=== R::App::process




=== assert

проверяем условие


=== invariant

добавляем блок в инвариант


=== in

устанавливает предусловие подпрограммы


=== out

устанавливает постусловие подпрограммы




=== import




=== app

возвращает синглетон приложения


=== meta

сокращение для объекта-описания ORM-а


=== msg

логирует вывод
возвращает последний параметр


=== msg1

добавляет =================== перед выводом


=== todo

функция замещения


=== has

создаёт функции-свойства в указанном классе


=== has_const

создаёт функции-константы в указанном классе


=== Isa

проверяет на соответствие isa


=== Can




=== Num

проверяет: является ли переданный скаляр числом
будьте осторожней, т.к. inf и nan - так же числа


=== public




=== closure

замыкание:
closure \&{$self->can("method")}, $self
closure {print}, 5


=== use

подключает и возвращает класс


=== replace

используется в шаблонах языка lukull за неимением более удобного реплейса


=== file

# возвращает группу файлов


=== file




=== R::App::file




=== process




=== R::App::process




=== assert

проверяем условие


=== invariant

добавляем блок в инвариант


=== in

устанавливает предусловие подпрограммы


=== out

устанавливает постусловие подпрограммы




=== import




=== app

возвращает синглетон приложения


=== meta

сокращение для объекта-описания ORM-а


=== msg

логирует вывод
возвращает последний параметр


=== msg1

добавляет =================== перед выводом


=== todo

функция замещения


=== has

создаёт функции-свойства в указанном классе


=== has_const

создаёт функции-константы в указанном классе


=== Isa

проверяет на соответствие isa


=== Can




=== Num

проверяет: является ли переданный скаляр числом
будьте осторожней, т.к. inf и nan - так же числа


=== public




=== closure

замыкание:
closure \&{$self->can("method")}, $self
closure {print}, 5


=== use

подключает и возвращает класс


=== replace

используется в шаблонах языка lukull за неимением более удобного реплейса


=== file

# возвращает группу файлов


=== file




=== R::App::file




=== process




=== R::App::process




=== assert

проверяем условие


=== invariant

добавляем блок в инвариант


=== in

устанавливает предусловие подпрограммы


=== out

устанавливает постусловие подпрограммы


== DB

возвращает аргументы предпредпоследнего вызова
== DB

возвращает аргументы предпредпоследнего вызова


=== __CONTRACT__ARGS__



=== body

устанавливает тело подпрограммы


=== AUTOLOAD



=== DESTROY





=== __CONTRACT__ARGS__




=== body

устанавливает тело подпрограммы


=== AUTOLOAD




=== DESTROY






=== __CONTRACT__ARGS__




=== body

устанавливает тело подпрограммы


=== AUTOLOAD




=== DESTROY




== R::Bench

бенчмарк - измеряет время
== R::Bench

бенчмарк - измеряет время


=== new

конструктор


=== time

запоминает время


=== diff

выдаёт сколько прошло времени в секундах с прошлого time


=== log

делает diff и выдаёт для лога


=== start_time

время запуска программы




=== new

конструктор


=== time

запоминает время


=== diff

выдаёт сколько прошло времени в секундах с прошлого time


=== log

делает diff и выдаёт для лога


=== start_time

время запуска программы




=== new

конструктор


=== time

запоминает время


=== diff

выдаёт сколько прошло времени в секундах с прошлого time


=== log

делает diff и выдаёт для лога


=== start_time

время запуска программы




=== new

конструктор


=== time

запоминает время


=== diff

выдаёт сколько прошло времени в секундах с прошлого time


=== log

делает diff и выдаёт для лога


=== start_time

время запуска программы


== R::Cache

клиент кэша app->cacheServer
== R::Cache

клиент кэша app->cacheServer


=== new

конструктор


=== hi

отправляет приглашение


=== bay

закрываем соединение


=== put

отправляет команду


=== set

set


=== get

get


=== ret

ret


=== ttl

ttl


=== exists

exists


=== add

add


=== sub

sub


=== inc

inc


=== dec

dec


=== destroyer

должен устанавливаться перед расщеплением процессов




=== new

конструктор


=== hi

отправляет приглашение


=== bay

закрываем соединение


=== put

отправляет команду


=== set

set


=== get

get


=== ret

ret


=== ttl

ttl


=== exists

exists


=== add

add


=== sub

sub


=== inc

inc


=== dec

dec


=== destroyer

должен устанавливаться перед расщеплением процессов




=== new

конструктор


=== hi

отправляет приглашение


=== bay

закрываем соединение


=== put

отправляет команду


=== set

set


=== get

get


=== ret

ret


=== ttl

ttl


=== exists

exists


=== add

add


=== sub

sub


=== inc

inc


=== dec

dec


=== destroyer

должен устанавливаться перед расщеплением процессов




=== new

конструктор


=== hi

отправляет приглашение


=== bay

закрываем соединение


=== put

отправляет команду


=== set

set


=== get

get


=== ret

ret


=== ttl

ttl


=== exists

exists


=== add

add


=== sub

sub


=== inc

inc


=== dec

dec


=== destroyer

должен устанавливаться перед расщеплением процессов


== R::Cache::Bagatur

кэш LFU + TTL
== R::Cache::Bagatur

кэш LFU + TTL


=== new

переопределяем конструктор


=== start_log

начало логирования


=== end_log

конец логирования




=== new

переопределяем конструктор


=== start_log

начало логирования


=== end_log

конец логирования




=== new

переопределяем конструктор


=== start_log

начало логирования


=== end_log

конец логирования




=== new

переопределяем конструктор


=== start_log

начало логирования


=== end_log

конец логирования


== R::Cache::Lfu

кэш LFU, в зависимости от конфигурации может возвращать объект memcache или redis
кэш имеет размер, при добавлении ключа-значения, когда размер кэша будет привышен, будут удалены старые ключи
== R::Cache::Lfu

кэш имеет размер, при добавлении ключа-значения, когда размер кэша будет привышен, будут удалены старые ключи


=== new

конструктор


=== set

устанавливает


=== get

возвращает


=== del

удаляет


=== update

обновляет позицию ключа в очереди


=== cleaning

удаляет "лишние" старые ключи
под старыми понимаются ключи, которые давно не использовались




=== new

конструктор


=== set

устанавливает


=== get

возвращает


=== del

удаляет


=== update

обновляет позицию ключа в очереди


=== cleaning

удаляет "лишние" старые ключи
под старыми понимаются ключи, которые давно не использовались




=== new

конструктор


=== set

устанавливает


=== get

возвращает


=== del

удаляет


=== update

обновляет позицию ключа в очереди


=== cleaning

удаляет "лишние" старые ключи
под старыми понимаются ключи, которые давно не использовались




=== new

конструктор


=== set

устанавливает


=== get

возвращает


=== del

удаляет


=== update

обновляет позицию ключа в очереди


=== cleaning

удаляет "лишние" старые ключи
под старыми понимаются ключи, которые давно не использовались


== R::Cache::Server

сервер кэша
реализует протокол:
== R::Cache::Server

use parent qw/R::Process::Server/;


=== new

конструктор


=== impulse

переопределяем обработчик




=== new

конструктор


=== impulse

переопределяем обработчик




=== new

конструктор


=== impulse

переопределяем обработчик




=== new

конструктор


=== impulse

переопределяем обработчик


== R::Cache::Simple

кэш с базовыми функциями
== R::Cache::Simple

кэш с базовыми функциями


=== new

конструктор


=== set

устанавливает ключ-значение


=== get

возвращает значение по ключу


=== del

удаляет ключ


=== exists

квантор существования


=== inc

увеличивает значение ключа на 1


=== dec

уменьшает значение ключа на 1


=== add

добавляет число


=== sub

вычитает число


=== destroyer

дестроеры sub
добавляет обработчик удаления ключей и меняет класс объекта кэша, если нужно


=== ondestroy

обработчик удаления ключей


=== setdestroy

устанавливает дестроер на ключ


=== ret

возвращает значение из кэша по ключу, если такого нет - то выполняет функцию и устанавливает




=== new

конструктор


=== set

устанавливает ключ-значение


=== get

возвращает значение по ключу


=== del

удаляет ключ


=== exists

квантор существования


=== inc

увеличивает значение ключа на 1


=== dec

уменьшает значение ключа на 1


=== add

добавляет число


=== sub

вычитает число


=== destroyer

дестроеры sub
добавляет обработчик удаления ключей и меняет класс объекта кэша, если нужно


=== ondestroy

обработчик удаления ключей


=== setdestroy

устанавливает дестроер на ключ


=== ret

возвращает значение из кэша по ключу, если такого нет - то выполняет функцию и устанавливает




=== new

конструктор


=== set

устанавливает ключ-значение


=== get

возвращает значение по ключу


=== del

удаляет ключ


=== exists

квантор существования


=== inc

увеличивает значение ключа на 1


=== dec

уменьшает значение ключа на 1


=== add

добавляет число


=== sub

вычитает число


=== destroyer

дестроеры sub
добавляет обработчик удаления ключей и меняет класс объекта кэша, если нужно


=== ondestroy

обработчик удаления ключей


=== setdestroy

устанавливает дестроер на ключ


=== ret

возвращает значение из кэша по ключу, если такого нет - то выполняет функцию и устанавливает




=== new

конструктор


=== set

устанавливает ключ-значение


=== get

возвращает значение по ключу


=== del

удаляет ключ


=== exists

квантор существования


=== inc

увеличивает значение ключа на 1


=== dec

уменьшает значение ключа на 1


=== add

добавляет число


=== sub

вычитает число


=== destroyer

дестроеры sub
добавляет обработчик удаления ключей и меняет класс объекта кэша, если нужно


=== ondestroy

обработчик удаления ключей


=== setdestroy

устанавливает дестроер на ключ


=== ret

возвращает значение из кэша по ключу, если такого нет - то выполняет функцию и устанавливает


== R::Cache::Ttl

Кэш с временем жизни ключей
== R::Cache::Ttl

use parent "R::Cache::Simple";


=== new

конструктор


=== new_ttl

добавляет  необходимые свойства для ttl


=== ret

вернуть кэш, а если его нет - выполнить функцию и установить
$lifetime в секундах


=== ttl

устанавливаем время жизни ключа в секундах


=== clean

вызывается кроном и очищает очередь
возвращает количество удалённых ключей




=== new

конструктор


=== new_ttl

добавляет  необходимые свойства для ttl


=== ret

вернуть кэш, а если его нет - выполнить функцию и установить
$lifetime в секундах


=== ttl

устанавливаем время жизни ключа в секундах


=== clean

вызывается кроном и очищает очередь
возвращает количество удалённых ключей




=== new

конструктор


=== new_ttl

добавляет  необходимые свойства для ttl


=== ret

вернуть кэш, а если его нет - выполнить функцию и установить
$lifetime в секундах


=== ttl

устанавливаем время жизни ключа в секундах


=== clean

вызывается кроном и очищает очередь
возвращает количество удалённых ключей




=== new

конструктор


=== new_ttl

добавляет  необходимые свойства для ttl


=== ret

вернуть кэш, а если его нет - выполнить функцию и установить
$lifetime в секундах


=== ttl

устанавливаем время жизни ключа в секундах


=== clean

вызывается кроном и очищает очередь
возвращает количество удалённых ключей


== R::Cache::Vain

пример кэша
использовать нельзя, т.к. он не 
== R::Cache::Vain

использовать нельзя, т.к. он не 


=== new

конструктор


=== set

устанавливает


=== get

возвращает


=== del

удаляет


=== exists

квантор существования




=== new

конструктор


=== set

устанавливает


=== get

возвращает


=== del

удаляет


=== exists

квантор существования




=== new

конструктор


=== set

устанавливает


=== get

возвращает


=== del

удаляет


=== exists

квантор существования




=== new

конструктор


=== set

устанавливает


=== get

возвращает


=== del

удаляет


=== exists

квантор существования


== R::Check

очередь валидаторов и преобразователей
== R::Check

очередь валидаторов и преобразователей


=== new



=== val



=== error



=== args



=== arg



=== stash



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== test



=== new

конструктор - создаёт новую очередь валидаторов


=== register

регистрирует класс в чекерах


=== add

добавляет чекер в очередь


=== stash

добавляет дополнительные параметры для всех чекеров


=== pos

возвращает номер с именем


=== error

добавляет ошибку к последнему или по имени


=== length

количество чекеров


=== test

тестирует и изменяет val


=== class

хелпер - создаёт класс чекера для регистрации


=== checkers

возвращает хэш чекеров


=== add_attributes

добавляет атрибуты




=== new

конструктор - создаёт новую очередь валидаторов


=== register

регистрирует класс в чекерах


=== add

добавляет чекер в очередь


=== stash

добавляет дополнительные параметры для всех чекеров


=== pos

возвращает номер с именем


=== error

добавляет ошибку к последнему или по имени


=== length

количество чекеров


=== test

тестирует и изменяет val


=== class

хелпер - создаёт класс чекера для регистрации


=== checkers

возвращает хэш чекеров


=== add_attributes

добавляет атрибуты




=== new

конструктор - создаёт новую очередь валидаторов


=== register

регистрирует класс в чекерах


=== add

добавляет чекер в очередь


=== stash

добавляет дополнительные параметры для всех чекеров


=== pos

возвращает номер с именем


=== error

добавляет ошибку к последнему или по имени


=== length

количество чекеров


=== test

тестирует и изменяет val


=== class

хелпер - создаёт класс чекера для регистрации


=== checkers

возвращает хэш чекеров


=== add_attributes

добавляет атрибуты




=== new

конструктор - создаёт новую очередь валидаторов


=== register

регистрирует класс в чекерах


=== add

добавляет чекер в очередь


=== stash

добавляет дополнительные параметры для всех чекеров


=== pos

возвращает номер с именем


=== error

добавляет ошибку к последнему или по имени


=== length

количество чекеров


=== test

тестирует и изменяет val


=== class

хелпер - создаёт класс чекера для регистрации


=== checkers

возвращает хэш чекеров


=== add_attributes

добавляет атрибуты


== R::Check::Rubin

базовый класс чекеров
== R::Check::Rubin

базовый класс чекеров


=== new

конструктор


=== val

устанавливает новое значение


=== error

устанавливает ошибку


=== args

возвращает все аргументы


=== arg

возвращает аргумент по индексу


=== stash

возвращает элемент из сташа




=== new

конструктор


=== val

устанавливает новое значение


=== error

устанавливает ошибку


=== args

возвращает все аргументы


=== arg

возвращает аргумент по индексу


=== stash

возвращает элемент из сташа




=== new

конструктор


=== val

устанавливает новое значение


=== error

устанавливает ошибку


=== args

возвращает все аргументы


=== arg

возвращает аргумент по индексу


=== stash

возвращает элемент из сташа


== R::Check::LeaveOnly

можно указывать символы через "-". "-" нужно экранировать: "\-"
== R::Check::LeaveOnly

можно указывать символы через "-". "-" нужно экранировать: "\-"


=== test





=== test






=== test




== R::Check::Split

разбивает по маске и превращает в ссылку на массив
== R::Check::Split

разбивает по маске и превращает в ссылку на массив


=== test





=== test






=== test




== R::Check::ToUc

переводит в верхний регистр
== R::Check::ToUc

переводит в верхний регистр


=== test





=== test






=== test




== R::Check::ToLc

переводит в нижний регистр
== R::Check::ToLc

переводит в нижний регистр


=== test





=== test






=== test




== R::Check::Model

модель
== R::Check::Model

модель


=== test





=== test






=== test




== R::Check::Trim

обрезает пробелы с обеих стророн строки
== R::Check::Trim

обрезает пробелы с обеих стророн строки


=== test





=== test






=== test




== R::Check::Need

обязательное поле. Синонимы: required, require
== R::Check::Need

обязательное поле. Синонимы: required, require


=== test





=== test






=== test




== R::Check::MaxLength

максимальная длина
== R::Check::MaxLength

максимальная длина


=== test





=== test






=== test




== R::Check::MinLength

минимальная длина
== R::Check::MinLength

минимальная длина


=== test





=== test






=== test




== R::Check::lengthBetween

длина между
== R::Check::lengthBetween

длина между


=== test





=== test






=== test




== R::Check::Natural

проверяет, что значение - натуральное
== R::Check::Natural

проверяет, что значение - натуральное


=== test





=== test






=== test




== R::Check::UInt

положительное целое
== R::Check::UInt

положительное целое


=== test





=== test






=== test




== R::Check::Int

целое
== R::Check::Int

целое


=== test





=== test






=== test




== R::Check::UserPass

требует наличия параметра form и работает только в запросе http
== R::Check::UserPass

требует наличия параметра form и работает только в запросе http


=== test





=== test






=== test




== R::Check::EqualToField

равно полю (поле должно быть описано выше этого)
== R::Check::EqualToField

равно полю (поле должно быть описано выше этого)


=== test





=== test






=== test




== R::Check::Max

максимальное число
== R::Check::Max

максимальное число


=== test





=== test






=== test




== R::Check::Min

минимальное число
== R::Check::Min

минимальное число


=== test





=== test






=== test




== R::Check::Between

число между
== R::Check::Between

число между


=== test





=== test






=== test




== R::Check::OneOf

одно из значений
== R::Check::OneOf

одно из значений


=== test





=== test






=== test




== R::Check::Pattern

устанавливает паттерн, для ввода
== R::Check::Pattern

устанавливает паттерн, для ввода


=== test





=== test






=== test




== R::Check::Email

email
== R::Check::Email

email


=== test





=== test






=== test




== R::Check::Load

загружает модель
== R::Check::Load

загружает модель


=== test





=== test






=== test




== R::Check::NotFound

ошибка 404, если есть ошибка на этом поле
== R::Check::NotFound

ошибка 404, если есть ошибка на этом поле


=== test





=== test






=== test




== R::Connect

подключение к базе и простенькие функции для запросов
== R::Connect

подключение к базе и простенькие функции для запросов


=== ON_UPDATE



=== ON_DELETE



=== new



=== connect

коннект


=== close

закрывает соединение


=== reconnect

переконнекчивается, если связь утрачена


=== dbh

возвращает dbh


=== use

переключиться на БД


=== tab_info

кеширует инф. о таблицах


=== get_tab_info

возвращает информацию о таблицах


=== info

кеширует инф. о столбцах таблиц


=== get_info

возвращает информацию о столбцах таблиц


=== index_info

кеширует информацию о ключах таблиц


=== get_index_info

без кеширования


=== get_index_info



=== fk_info

кеширует информацию о внешних ключах таблиц


=== fk_info_backward

возвращает от каких ключей зависит какая таблица


=== get_fk_info_backward

возвращает от каких ключей зависит какая таблица


=== get_fk_info

возвращает информацию о внешних ключах таблиц


=== clean

очищает кеши


=== now

возвращает текущее время в формате базы


=== uc

переводит в camelcase


=== lc

переводит в decamelcase


=== up

сокращение


=== down

сокращение


=== word

оборачивает в `` если нужно


=== tab_word

оборачивает таблицу


=== SQL_COL

формирует колумн


=== TAB_ref

возвращает алиас таблицы. То есть бывает, что таблица содержит несколько ссылок на другую таблицу, тогда они не могут называться все как таблица на которую ссылаются. И так: author_id, soauthor_id - alias_tab = {soauthor_id => author_id}


=== quote

квотирование


=== DO_SET

формирует ключ=значение через запятую, для UPDATE SET или REPLACE SET


=== DO_WHERE

формирует where


=== INS_SET

формирует матрицу значений для INSERT


=== FIELDS

формирует столбцы


=== FIELDS_NAMES

возвращает массив названий столбцов


=== FOR_TAB_FIELDS

формирует столбцы с таблицей


=== TAB

возвращает таблицу и её алиас, если он указан


=== sel

выборки


=== query_compile

добавляет в push arg


=== query_add

добавляет к запросу указанное в массиве


=== query_join

объединяет все выражения в sql-запрос


=== flat2volume



=== sel_join

выборки


=== pack_rows

пакует строки для передачи клиенту


=== query_rows

запрашивает строки и пакует их в формат для передачи


=== quick_rows

аналог query_rows: запрашивает строки отдельными запросами
отличие в том, что LIMIT может быть проставлен для отдельных подстрок
INNER_JOIN тут работает так же как и LEFT_JOIN


=== query

запрашивает первую строку в виде массива


=== query_array

запрашивает строку в виде массивов


=== query_all

запрашивает строки в виде хешей


=== query_col

массив значений


=== query_ref

строка в виде хеша


=== log_sql

сохраняет время


=== log_ret

логирует запрос и ответ


=== syntax

подсветка синтаксиса


=== last_id

id последней добавленной записи


=== last_count

количество изменённых строк последней операцией редактирования


=== effected_rows



=== do

выполняет sql-запрос


=== erase

удаляет записи из таблицы


=== update

изменяет запись


=== append

добавляет одну запись в таблицу и возвращает её id


=== add

добавляет одну запись в таблицу


=== insert

добавляет много записей в таблицу


=== save

добавляет или изменяет запись основываясь на наличии id в параметрах


=== replace



=== replace

добавляет или изменяет первую попавщуюся запись


=== store

добавляет или изменяет первую попавщуюся запись


=== transaction

транзакция


=== index



=== sql



=== alter



=== drop



=== create

создаёт таблицу, столбец, индекс или ключ
например:
create("test_tab")
create("test_tab.col_a", "int default 0")
create("test_tab.col_a", "int default 0")
create("test_tab:idx_a", "col1", "col2")
create("test_tab:idx_a:unique", "col1")
create("test_tab:fk_a:fk", "tab1", "col1")
create("test_tab:fk_b:fk", "tab2") - по умолчанию - колумн id


=== drop

удаляет таблицу, столбец, индекс или ключ


=== alter

изменяет опции таблицы, столбец, индекс или ключ


=== rename

переименовывает таблицу или столбец, если первый параметр "таблица.столбец"
или индекс, если "tab:индекс", так же fk


=== alter_create

возвращает sql для создания


=== alter_drop

возвращает sql для удаления


=== alter_alter

возвращает sql для модификации


=== alter_rename

возвращает sql для переименования


=== alter_rename_tab

переименовать таблицу


=== alter_rename_col

переименовать столбец


=== alter_info

возвращает колумн из info без названия столбца


=== sql_index

формирует индекс без его названия


=== alter_index

формирует индекс из info


=== alter_rename_idx

переименовывает индекс


=== alter_rename_fk

переименовывает fk


=== alter_alter_tab

изменить таблицу


=== alter_alter_tab

изменить столбец


=== alter_alter_idx

изменить индекс


=== alter_alter_fk

изменить ключ


=== alter_drop_tab

удалить таблицу


=== alter_drop_tab

удалить столбец


=== alter_drop_idx

удалить индекс


=== alter_drop_fk

удалить ключ




=== ON_UPDATE




=== ON_DELETE




=== new




=== connect

коннект


=== close

закрывает соединение


=== reconnect

переконнекчивается, если связь утрачена


=== dbh

возвращает dbh


=== use

переключиться на БД


=== tab_info

кеширует инф. о таблицах


=== get_tab_info

возвращает информацию о таблицах


=== info

кеширует инф. о столбцах таблиц


=== get_info

возвращает информацию о столбцах таблиц


=== index_info

кеширует информацию о ключах таблиц


=== get_index_info

без кеширования


=== get_index_info




=== fk_info

кеширует информацию о внешних ключах таблиц


=== fk_info_backward

возвращает от каких ключей зависит какая таблица


=== get_fk_info_backward

возвращает от каких ключей зависит какая таблица


=== get_fk_info

возвращает информацию о внешних ключах таблиц


=== clean

очищает кеши


=== now

возвращает текущее время в формате базы


=== uc

переводит в camelcase


=== lc

переводит в decamelcase


=== up

сокращение


=== down

сокращение


=== word

оборачивает в `` если нужно


=== tab_word

оборачивает таблицу


=== SQL_COL

формирует колумн


=== TAB_ref

возвращает алиас таблицы. То есть бывает, что таблица содержит несколько ссылок на другую таблицу, тогда они не могут называться все как таблица на которую ссылаются. И так: author_id, soauthor_id - alias_tab = {soauthor_id => author_id}


=== quote

квотирование


=== DO_SET

формирует ключ=значение через запятую, для UPDATE SET или REPLACE SET


=== DO_WHERE

формирует where


=== INS_SET

формирует матрицу значений для INSERT


=== FIELDS

формирует столбцы


=== FIELDS_NAMES

возвращает массив названий столбцов


=== FOR_TAB_FIELDS

формирует столбцы с таблицей


=== TAB

возвращает таблицу и её алиас, если он указан


=== sel

выборки


=== query_compile

добавляет в push arg


=== query_add

добавляет к запросу указанное в массиве


=== query_join

объединяет все выражения в sql-запрос


=== flat2volume




=== sel_join

выборки


=== pack_rows

пакует строки для передачи клиенту


=== query_rows

запрашивает строки и пакует их в формат для передачи


=== quick_rows

аналог query_rows: запрашивает строки отдельными запросами
отличие в том, что LIMIT может быть проставлен для отдельных подстрок
INNER_JOIN тут работает так же как и LEFT_JOIN


=== query

запрашивает первую строку в виде массива


=== query_array

запрашивает строку в виде массивов


=== query_all

запрашивает строки в виде хешей


=== query_col

массив значений


=== query_ref

строка в виде хеша


=== log_sql

сохраняет время


=== log_ret

логирует запрос и ответ


=== syntax

подсветка синтаксиса


=== last_id

id последней добавленной записи


=== last_count

количество изменённых строк последней операцией редактирования


=== effected_rows




=== do

выполняет sql-запрос


=== erase

удаляет записи из таблицы


=== update

изменяет запись


=== append

добавляет одну запись в таблицу и возвращает её id


=== add

добавляет одну запись в таблицу


=== insert

добавляет много записей в таблицу


=== save

добавляет или изменяет запись основываясь на наличии id в параметрах


=== replace




=== replace

добавляет или изменяет первую попавщуюся запись


=== store

добавляет или изменяет первую попавщуюся запись


=== transaction

транзакция


=== index




=== sql




=== alter




=== drop




=== create

создаёт таблицу, столбец, индекс или ключ
например:
create("test_tab")
create("test_tab.col_a", "int default 0")
create("test_tab.col_a", "int default 0")
create("test_tab:idx_a", "col1", "col2")
create("test_tab:idx_a:unique", "col1")
create("test_tab:fk_a:fk", "tab1", "col1")
create("test_tab:fk_b:fk", "tab2") - по умолчанию - колумн id


=== drop

удаляет таблицу, столбец, индекс или ключ


=== alter

изменяет опции таблицы, столбец, индекс или ключ


=== rename

переименовывает таблицу или столбец, если первый параметр "таблица.столбец"
или индекс, если "tab:индекс", так же fk


=== alter_create

возвращает sql для создания


=== alter_drop

возвращает sql для удаления


=== alter_alter

возвращает sql для модификации


=== alter_rename

возвращает sql для переименования


=== alter_rename_tab

переименовать таблицу


=== alter_rename_col

переименовать столбец


=== alter_info

возвращает колумн из info без названия столбца


=== sql_index

формирует индекс без его названия


=== alter_index

формирует индекс из info


=== alter_rename_idx

переименовывает индекс


=== alter_rename_fk

переименовывает fk


=== alter_alter_tab

изменить таблицу


=== alter_alter_tab

изменить столбец


=== alter_alter_idx

изменить индекс


=== alter_alter_fk

изменить ключ


=== alter_drop_tab

удалить таблицу


=== alter_drop_tab

удалить столбец


=== alter_drop_idx

удалить индекс


=== alter_drop_fk

удалить ключ




=== ON_UPDATE




=== ON_DELETE




=== new




=== connect

коннект


=== close

закрывает соединение


=== reconnect

переконнекчивается, если связь утрачена


=== dbh

возвращает dbh


=== use

переключиться на БД


=== tab_info

кеширует инф. о таблицах


=== get_tab_info

возвращает информацию о таблицах


=== info

кеширует инф. о столбцах таблиц


=== get_info

возвращает информацию о столбцах таблиц


=== index_info

кеширует информацию о ключах таблиц


=== get_index_info

без кеширования


=== get_index_info




=== fk_info

кеширует информацию о внешних ключах таблиц


=== fk_info_backward

возвращает от каких ключей зависит какая таблица


=== get_fk_info_backward

возвращает от каких ключей зависит какая таблица


=== get_fk_info

возвращает информацию о внешних ключах таблиц


=== clean

очищает кеши


=== now

возвращает текущее время в формате базы


=== uc

переводит в camelcase


=== lc

переводит в decamelcase


=== up

сокращение


=== down

сокращение


=== word

оборачивает в `` если нужно


=== tab_word

оборачивает таблицу


=== SQL_COL

формирует колумн


=== TAB_ref

возвращает алиас таблицы. То есть бывает, что таблица содержит несколько ссылок на другую таблицу, тогда они не могут называться все как таблица на которую ссылаются. И так: author_id, soauthor_id - alias_tab = {soauthor_id => author_id}


=== quote

квотирование


=== DO_SET

формирует ключ=значение через запятую, для UPDATE SET или REPLACE SET


=== DO_WHERE

формирует where


=== INS_SET

формирует матрицу значений для INSERT


=== FIELDS

формирует столбцы


=== FIELDS_NAMES

возвращает массив названий столбцов


=== FOR_TAB_FIELDS

формирует столбцы с таблицей


=== TAB

возвращает таблицу и её алиас, если он указан


=== sel

выборки


=== query_compile

добавляет в push arg


=== query_add

добавляет к запросу указанное в массиве


=== query_join

объединяет все выражения в sql-запрос


=== flat2volume




=== sel_join

выборки


=== pack_rows

пакует строки для передачи клиенту


=== query_rows

запрашивает строки и пакует их в формат для передачи


=== quick_rows

аналог query_rows: запрашивает строки отдельными запросами
отличие в том, что LIMIT может быть проставлен для отдельных подстрок
INNER_JOIN тут работает так же как и LEFT_JOIN


=== query

запрашивает первую строку в виде массива


=== query_array

запрашивает строку в виде массивов


=== query_all

запрашивает строки в виде хешей


=== query_col

массив значений


=== query_ref

строка в виде хеша


=== log_sql

сохраняет время


=== log_ret

логирует запрос и ответ


=== syntax

подсветка синтаксиса


=== last_id

id последней добавленной записи


=== last_count

количество изменённых строк последней операцией редактирования


=== effected_rows




=== do

выполняет sql-запрос


=== erase

удаляет записи из таблицы


=== update

изменяет запись


=== append

добавляет одну запись в таблицу и возвращает её id


=== add

добавляет одну запись в таблицу


=== insert

добавляет много записей в таблицу


=== save

добавляет или изменяет запись основываясь на наличии id в параметрах


=== replace




=== replace

добавляет или изменяет первую попавщуюся запись


=== store

добавляет или изменяет первую попавщуюся запись


=== transaction

транзакция


=== index




=== sql




=== alter




=== drop




=== create

создаёт таблицу, столбец, индекс или ключ
например:
create("test_tab")
create("test_tab.col_a", "int default 0")
create("test_tab.col_a", "int default 0")
create("test_tab:idx_a", "col1", "col2")
create("test_tab:idx_a:unique", "col1")
create("test_tab:fk_a:fk", "tab1", "col1")
create("test_tab:fk_b:fk", "tab2") - по умолчанию - колумн id


=== drop

удаляет таблицу, столбец, индекс или ключ


=== alter

изменяет опции таблицы, столбец, индекс или ключ


=== rename

переименовывает таблицу или столбец, если первый параметр "таблица.столбец"
или индекс, если "tab:индекс", так же fk


=== alter_create

возвращает sql для создания


=== alter_drop

возвращает sql для удаления


=== alter_alter

возвращает sql для модификации


=== alter_rename

возвращает sql для переименования


=== alter_rename_tab

переименовать таблицу


=== alter_rename_col

переименовать столбец


=== alter_info

возвращает колумн из info без названия столбца


=== sql_index

формирует индекс без его названия


=== alter_index

формирует индекс из info


=== alter_rename_idx

переименовывает индекс


=== alter_rename_fk

переименовывает fk


=== alter_alter_tab

изменить таблицу


=== alter_alter_tab

изменить столбец


=== alter_alter_idx

изменить индекс


=== alter_alter_fk

изменить ключ


=== alter_drop_tab

удалить таблицу


=== alter_drop_tab

удалить столбец


=== alter_drop_idx

удалить индекс


=== alter_drop_fk

удалить ключ




=== ON_UPDATE




=== ON_DELETE




=== new




=== connect

коннект


=== close

закрывает соединение


=== reconnect

переконнекчивается, если связь утрачена


=== dbh

возвращает dbh


=== use

переключиться на БД


=== tab_info

кеширует инф. о таблицах


=== get_tab_info

возвращает информацию о таблицах


=== info

кеширует инф. о столбцах таблиц


=== get_info

возвращает информацию о столбцах таблиц


=== index_info

кеширует информацию о ключах таблиц


=== get_index_info

без кеширования


=== get_index_info




=== fk_info

кеширует информацию о внешних ключах таблиц


=== fk_info_backward

возвращает от каких ключей зависит какая таблица


=== get_fk_info_backward

возвращает от каких ключей зависит какая таблица


=== get_fk_info

возвращает информацию о внешних ключах таблиц


=== clean

очищает кеши


=== now

возвращает текущее время в формате базы


=== uc

переводит в camelcase


=== lc

переводит в decamelcase


=== up

сокращение


=== down

сокращение


=== word

оборачивает в `` если нужно


=== tab_word

оборачивает таблицу


=== SQL_COL

формирует колумн


=== TAB_ref

возвращает алиас таблицы. То есть бывает, что таблица содержит несколько ссылок на другую таблицу, тогда они не могут называться все как таблица на которую ссылаются. И так: author_id, soauthor_id - alias_tab = {soauthor_id => author_id}


=== quote

квотирование


=== DO_SET

формирует ключ=значение через запятую, для UPDATE SET или REPLACE SET


=== DO_WHERE

формирует where


=== INS_SET

формирует матрицу значений для INSERT


=== FIELDS

формирует столбцы


=== FIELDS_NAMES

возвращает массив названий столбцов


=== FOR_TAB_FIELDS

формирует столбцы с таблицей


=== TAB

возвращает таблицу и её алиас, если он указан


=== sel

выборки


=== query_compile

добавляет в push arg


=== query_add

добавляет к запросу указанное в массиве


=== query_join

объединяет все выражения в sql-запрос


=== flat2volume




=== sel_join

выборки


=== pack_rows

пакует строки для передачи клиенту


=== query_rows

запрашивает строки и пакует их в формат для передачи


=== quick_rows

аналог query_rows: запрашивает строки отдельными запросами
отличие в том, что LIMIT может быть проставлен для отдельных подстрок
INNER_JOIN тут работает так же как и LEFT_JOIN


=== query

запрашивает первую строку в виде массива


=== query_array

запрашивает строку в виде массивов


=== query_all

запрашивает строки в виде хешей


=== query_col

массив значений


=== query_ref

строка в виде хеша


=== log_sql

сохраняет время


=== log_ret

логирует запрос и ответ


=== syntax

подсветка синтаксиса


=== last_id

id последней добавленной записи


=== last_count

количество изменённых строк последней операцией редактирования


=== effected_rows




=== do

выполняет sql-запрос


=== erase

удаляет записи из таблицы


=== update

изменяет запись


=== append

добавляет одну запись в таблицу и возвращает её id


=== add

добавляет одну запись в таблицу


=== insert

добавляет много записей в таблицу


=== save

добавляет или изменяет запись основываясь на наличии id в параметрах


=== replace




=== replace

добавляет или изменяет первую попавщуюся запись


=== store

добавляет или изменяет первую попавщуюся запись


=== transaction

транзакция


=== index




=== sql




=== alter




=== drop




=== create

создаёт таблицу, столбец, индекс или ключ
например:
create("test_tab")
create("test_tab.col_a", "int default 0")
create("test_tab.col_a", "int default 0")
create("test_tab:idx_a", "col1", "col2")
create("test_tab:idx_a:unique", "col1")
create("test_tab:fk_a:fk", "tab1", "col1")
create("test_tab:fk_b:fk", "tab2") - по умолчанию - колумн id


=== drop

удаляет таблицу, столбец, индекс или ключ


=== alter

изменяет опции таблицы, столбец, индекс или ключ


=== rename

переименовывает таблицу или столбец, если первый параметр "таблица.столбец"
или индекс, если "tab:индекс", так же fk


=== alter_create

возвращает sql для создания


=== alter_drop

возвращает sql для удаления


=== alter_alter

возвращает sql для модификации


=== alter_rename

возвращает sql для переименования


=== alter_rename_tab

переименовать таблицу


=== alter_rename_col

переименовать столбец


=== alter_info

возвращает колумн из info без названия столбца


=== sql_index

формирует индекс без его названия


=== alter_index

формирует индекс из info


=== alter_rename_idx

переименовывает индекс


=== alter_rename_fk

переименовывает fk


=== alter_alter_tab

изменить таблицу


=== alter_alter_tab

изменить столбец


=== alter_alter_idx

изменить индекс


=== alter_alter_fk

изменить ключ


=== alter_drop_tab

удалить таблицу


=== alter_drop_tab

удалить столбец


=== alter_drop_idx

удалить индекс


=== alter_drop_fk

удалить ключ


== R::Css

Perl Awesome Stylesheets - pcss или pass
конструктор правил css
== R::Css

конструктор правил css


=== new

конструктор


=== lh



=== em

em


=== px

px


=== pс

проценты, пико - pk


=== deg

градусы


=== attr

возвращает атрибут для content: attr(attr)


=== unit

возвращает единицу измерения или выдаёт ошибку если её нет


=== rgb

цвет rgb
примеры:
rgb "00aaff", 0.5
rgb 0, 0, 1, 0.5	# измеряется не от 0 до 255, а от 0 до 1


=== hsl



=== unitSize

изменяет значения
если 


=== unitDeg

переводит в градусы из 0..1 -> 0..360


=== reg

ищет среди зарегистрированных функций css-класс
если он не найден - вызывает по маске функцию-создателя, которая прописывает класс


=== reg_html

получает html, который парсит в поисках зарегистрированных классов


=== register

регистрирует функцию-создателя


=== save

сохраняет цепочки правил в файл


=== include

импортирует (читает и парсит) файл *.css или включает файл *.pl, *.pm, *.pcss или *.pass


=== parse

парсит css-текст и добавляет в css


=== xak

обрабатывает каждое значение


=== stringify

преобразует в строку


=== normalize

нормализует ключ


=== serf

возвращает верхушку стека (prince)


=== the

создаёт новое правило или возвращает текущее


=== prince

создаёт именованный пул


=== end

конец пула


=== gosub

переходит в указанный пул и писаться будет в него


=== goto

копирует media пула


=== final

завершает цепочку


=== like

расширяет правило из указанного селектора


=== include

вставляет файл


=== insert

вставляет текст


=== insertln

вставляет текст и новую строку


=== rem

комментарий


=== intro

оборачивает пулл


=== media

оборачивает пул в медиа-запрос или 


=== set

устанавливает css-стиль


=== reset

переустанавливает свойства последнего стиля


=== add

добавляет к css-стилю


=== get

возвращает по ключу значение, а если его нет - устанавливает


=== ret

возвращает последний в массиве, используется с add


=== top

устанавливает последний


=== exists

проверяет на существование ключ в the


=== setdefault

устанавливает, если ещё не установлено


=== line

высота строки


=== size

size width, height
можно использовать undef


=== max

устанавливает максимальный размер


=== min

устанавливает минимальный размер


=== move

устанавливает смещение верхнего левого угла


=== moveoff

устанавливает смещение нижнего правого угла


=== locate

устанавливает смещения верхнего левого угла. Зависит от позиции: relative, absolute, fixed


=== locateoff

устанавливает смещения нижнего правого угла. Зависит от позиции: relative, absolute, fixed


=== offset

устанавливает внешние поля


=== field

устанавливает внутренние поля


=== shift

устанавливает поля верхнего левого угла


=== unshift

устанавливает поля нижнего правого угла


=== xy

сдвиг


=== angle

поворот


=== dim

масштаб


=== skew

скос


=== x

смещение translate


=== y

смещение translate


=== z

смещение translate


=== spin

поворачивает по координатам


=== scale

масштабирует


=== axis

указывает оси вокруг которых поворачивать:
x: <длина> | <проценты> | left | center | right
y: <длина> | <проценты> | top | center | bottom
z: <длина>


=== perspective

задаёт перспективу трансформации


=== child3d

Дочерние элементы будут отображаться в 3D-пространстве


=== child2d

Дочерние элементы лежат в той же плоскости, что и их родитель


=== font



=== underline

подчёркнутый текст


=== overline

надчёркнутый текст


=== strike

зачёркнутый текст


=== bold

жирность


=== italic

наклон


=== absolute

позиционировать абсолютно


=== fixed

позиционировать фиксированно


=== relative

позиционировать относительно


=== static

позиционировать обычно


=== float

делает элемент "плавающим"


=== scroll

контролирует скролл и отображение текста


=== block

блочный элемент


=== inline

строчный элемент


=== iblock

строчный блок


=== hide

скрытый элемент


=== opacity

прозрачность


=== pointer

указатель - курсор


=== color

цвета


=== limit

граница - цвет


=== shadow

добавляет тень блоку


=== shade

добавляет тень текста


=== to

включает переход


=== interval

продолжительность перехода


=== ease

функция перехода


=== delay

задержка перехода


=== keyframes

объявляет анимацию


=== frame

шаг анимации от 0 до 1


=== animation

скорость анимации в секундах
speed(0.5)


=== pause

приостанавливает анимацию


=== running

запрещает прерывать анимацию


=== hover



=== click



=== css2r

конвертирует css в R::Css




=== new

конструктор


=== lh




=== em

em


=== px

px


=== pс

проценты, пико - pk


=== deg

градусы


=== attr

возвращает атрибут для content: attr(attr)


=== unit

возвращает единицу измерения или выдаёт ошибку если её нет


=== rgb

цвет rgb
примеры:
rgb "00aaff", 0.5
rgb 0, 0, 1, 0.5	# измеряется не от 0 до 255, а от 0 до 1


=== hsl




=== unitSize

изменяет значения
если 


=== unitDeg

переводит в градусы из 0..1 -> 0..360


=== reg

ищет среди зарегистрированных функций css-класс
если он не найден - вызывает по маске функцию-создателя, которая прописывает класс


=== reg_html

получает html, который парсит в поисках зарегистрированных классов


=== register

регистрирует функцию-создателя


=== save

сохраняет цепочки правил в файл


=== include

импортирует (читает и парсит) файл *.css или включает файл *.pl, *.pm, *.pcss или *.pass


=== parse

парсит css-текст и добавляет в css


=== xak

обрабатывает каждое значение


=== stringify

преобразует в строку


=== normalize

нормализует ключ


=== serf

возвращает верхушку стека (prince)


=== the

создаёт новое правило или возвращает текущее


=== prince

создаёт именованный пул


=== end

конец пула


=== gosub

переходит в указанный пул и писаться будет в него


=== goto

копирует media пула


=== final

завершает цепочку


=== like

расширяет правило из указанного селектора


=== include

вставляет файл


=== insert

вставляет текст


=== insertln

вставляет текст и новую строку


=== rem

комментарий


=== intro

оборачивает пулл


=== media

оборачивает пул в медиа-запрос или 


=== set

устанавливает css-стиль


=== reset

переустанавливает свойства последнего стиля


=== add

добавляет к css-стилю


=== get

возвращает по ключу значение, а если его нет - устанавливает


=== ret

возвращает последний в массиве, используется с add


=== top

устанавливает последний


=== exists

проверяет на существование ключ в the


=== setdefault

устанавливает, если ещё не установлено


=== line

высота строки


=== size

size width, height
можно использовать undef


=== max

устанавливает максимальный размер


=== min

устанавливает минимальный размер


=== move

устанавливает смещение верхнего левого угла


=== moveoff

устанавливает смещение нижнего правого угла


=== locate

устанавливает смещения верхнего левого угла. Зависит от позиции: relative, absolute, fixed


=== locateoff

устанавливает смещения нижнего правого угла. Зависит от позиции: relative, absolute, fixed


=== offset

устанавливает внешние поля


=== field

устанавливает внутренние поля


=== shift

устанавливает поля верхнего левого угла


=== unshift

устанавливает поля нижнего правого угла


=== xy

сдвиг


=== angle

поворот


=== dim

масштаб


=== skew

скос


=== x

смещение translate


=== y

смещение translate


=== z

смещение translate


=== spin

поворачивает по координатам


=== scale

масштабирует


=== axis

указывает оси вокруг которых поворачивать:
x: <длина> | <проценты> | left | center | right
y: <длина> | <проценты> | top | center | bottom
z: <длина>


=== perspective

задаёт перспективу трансформации


=== child3d

Дочерние элементы будут отображаться в 3D-пространстве


=== child2d

Дочерние элементы лежат в той же плоскости, что и их родитель


=== font




=== underline

подчёркнутый текст


=== overline

надчёркнутый текст


=== strike

зачёркнутый текст


=== bold

жирность


=== italic

наклон


=== absolute

позиционировать абсолютно


=== fixed

позиционировать фиксированно


=== relative

позиционировать относительно


=== static

позиционировать обычно


=== float

делает элемент "плавающим"


=== scroll

контролирует скролл и отображение текста


=== block

блочный элемент


=== inline

строчный элемент


=== iblock

строчный блок


=== hide

скрытый элемент


=== opacity

прозрачность


=== pointer

указатель - курсор


=== color

цвета


=== limit

граница - цвет


=== shadow

добавляет тень блоку


=== shade

добавляет тень текста


=== to

включает переход


=== interval

продолжительность перехода


=== ease

функция перехода


=== delay

задержка перехода


=== keyframes

объявляет анимацию


=== frame

шаг анимации от 0 до 1


=== animation

скорость анимации в секундах
speed(0.5)


=== pause

приостанавливает анимацию


=== running

запрещает прерывать анимацию


=== hover




=== click




=== css2r

конвертирует css в R::Css




=== new

конструктор


=== lh




=== em

em


=== px

px


=== pс

проценты, пико - pk


=== deg

градусы


=== attr

возвращает атрибут для content: attr(attr)


=== unit

возвращает единицу измерения или выдаёт ошибку если её нет


=== rgb

цвет rgb
примеры:
rgb "00aaff", 0.5
rgb 0, 0, 1, 0.5	# измеряется не от 0 до 255, а от 0 до 1


=== hsl




=== unitSize

изменяет значения
если 


=== unitDeg

переводит в градусы из 0..1 -> 0..360


=== reg

ищет среди зарегистрированных функций css-класс
если он не найден - вызывает по маске функцию-создателя, которая прописывает класс


=== reg_html

получает html, который парсит в поисках зарегистрированных классов


=== register

регистрирует функцию-создателя


=== save

сохраняет цепочки правил в файл


=== include

импортирует (читает и парсит) файл *.css или включает файл *.pl, *.pm, *.pcss или *.pass


=== parse

парсит css-текст и добавляет в css


=== xak

обрабатывает каждое значение


=== stringify

преобразует в строку


=== normalize

нормализует ключ


=== serf

возвращает верхушку стека (prince)


=== the

создаёт новое правило или возвращает текущее


=== prince

создаёт именованный пул


=== end

конец пула


=== gosub

переходит в указанный пул и писаться будет в него


=== goto

копирует media пула


=== final

завершает цепочку


=== like

расширяет правило из указанного селектора


=== include

вставляет файл


=== insert

вставляет текст


=== insertln

вставляет текст и новую строку


=== rem

комментарий


=== intro

оборачивает пулл


=== media

оборачивает пул в медиа-запрос или 


=== set

устанавливает css-стиль


=== reset

переустанавливает свойства последнего стиля


=== add

добавляет к css-стилю


=== get

возвращает по ключу значение, а если его нет - устанавливает


=== ret

возвращает последний в массиве, используется с add


=== top

устанавливает последний


=== exists

проверяет на существование ключ в the


=== setdefault

устанавливает, если ещё не установлено


=== line

высота строки


=== size

size width, height
можно использовать undef


=== max

устанавливает максимальный размер


=== min

устанавливает минимальный размер


=== move

устанавливает смещение верхнего левого угла


=== moveoff

устанавливает смещение нижнего правого угла


=== locate

устанавливает смещения верхнего левого угла. Зависит от позиции: relative, absolute, fixed


=== locateoff

устанавливает смещения нижнего правого угла. Зависит от позиции: relative, absolute, fixed


=== offset

устанавливает внешние поля


=== field

устанавливает внутренние поля


=== shift

устанавливает поля верхнего левого угла


=== unshift

устанавливает поля нижнего правого угла


=== xy

сдвиг


=== angle

поворот


=== dim

масштаб


=== skew

скос


=== x

смещение translate


=== y

смещение translate


=== z

смещение translate


=== spin

поворачивает по координатам


=== scale

масштабирует


=== axis

указывает оси вокруг которых поворачивать:
x: <длина> | <проценты> | left | center | right
y: <длина> | <проценты> | top | center | bottom
z: <длина>


=== perspective

задаёт перспективу трансформации


=== child3d

Дочерние элементы будут отображаться в 3D-пространстве


=== child2d

Дочерние элементы лежат в той же плоскости, что и их родитель


=== font




=== underline

подчёркнутый текст


=== overline

надчёркнутый текст


=== strike

зачёркнутый текст


=== bold

жирность


=== italic

наклон


=== absolute

позиционировать абсолютно


=== fixed

позиционировать фиксированно


=== relative

позиционировать относительно


=== static

позиционировать обычно


=== float

делает элемент "плавающим"


=== scroll

контролирует скролл и отображение текста


=== block

блочный элемент


=== inline

строчный элемент


=== iblock

строчный блок


=== hide

скрытый элемент


=== opacity

прозрачность


=== pointer

указатель - курсор


=== color

цвета


=== limit

граница - цвет


=== shadow

добавляет тень блоку


=== shade

добавляет тень текста


=== to

включает переход


=== interval

продолжительность перехода


=== ease

функция перехода


=== delay

задержка перехода


=== keyframes

объявляет анимацию


=== frame

шаг анимации от 0 до 1


=== animation

скорость анимации в секундах
speed(0.5)


=== pause

приостанавливает анимацию


=== running

запрещает прерывать анимацию


=== hover




=== click




=== css2r

конвертирует css в R::Css




=== new

конструктор


=== lh




=== em

em


=== px

px


=== pс

проценты, пико - pk


=== deg

градусы


=== attr

возвращает атрибут для content: attr(attr)


=== unit

возвращает единицу измерения или выдаёт ошибку если её нет


=== rgb

цвет rgb
примеры:
rgb "00aaff", 0.5
rgb 0, 0, 1, 0.5	# измеряется не от 0 до 255, а от 0 до 1


=== hsl




=== unitSize

изменяет значения
если 


=== unitDeg

переводит в градусы из 0..1 -> 0..360


=== reg

ищет среди зарегистрированных функций css-класс
если он не найден - вызывает по маске функцию-создателя, которая прописывает класс


=== reg_html

получает html, который парсит в поисках зарегистрированных классов


=== register

регистрирует функцию-создателя


=== save

сохраняет цепочки правил в файл


=== include

импортирует (читает и парсит) файл *.css или включает файл *.pl, *.pm, *.pcss или *.pass


=== parse

парсит css-текст и добавляет в css


=== xak

обрабатывает каждое значение


=== stringify

преобразует в строку


=== normalize

нормализует ключ


=== serf

возвращает верхушку стека (prince)


=== the

создаёт новое правило или возвращает текущее


=== prince

создаёт именованный пул


=== end

конец пула


=== gosub

переходит в указанный пул и писаться будет в него


=== goto

копирует media пула


=== final

завершает цепочку


=== like

расширяет правило из указанного селектора


=== include

вставляет файл


=== insert

вставляет текст


=== insertln

вставляет текст и новую строку


=== rem

комментарий


=== intro

оборачивает пулл


=== media

оборачивает пул в медиа-запрос или 


=== set

устанавливает css-стиль


=== reset

переустанавливает свойства последнего стиля


=== add

добавляет к css-стилю


=== get

возвращает по ключу значение, а если его нет - устанавливает


=== ret

возвращает последний в массиве, используется с add


=== top

устанавливает последний


=== exists

проверяет на существование ключ в the


=== setdefault

устанавливает, если ещё не установлено


=== line

высота строки


=== size

size width, height
можно использовать undef


=== max

устанавливает максимальный размер


=== min

устанавливает минимальный размер


=== move

устанавливает смещение верхнего левого угла


=== moveoff

устанавливает смещение нижнего правого угла


=== locate

устанавливает смещения верхнего левого угла. Зависит от позиции: relative, absolute, fixed


=== locateoff

устанавливает смещения нижнего правого угла. Зависит от позиции: relative, absolute, fixed


=== offset

устанавливает внешние поля


=== field

устанавливает внутренние поля


=== shift

устанавливает поля верхнего левого угла


=== unshift

устанавливает поля нижнего правого угла


=== xy

сдвиг


=== angle

поворот


=== dim

масштаб


=== skew

скос


=== x

смещение translate


=== y

смещение translate


=== z

смещение translate


=== spin

поворачивает по координатам


=== scale

масштабирует


=== axis

указывает оси вокруг которых поворачивать:
x: <длина> | <проценты> | left | center | right
y: <длина> | <проценты> | top | center | bottom
z: <длина>


=== perspective

задаёт перспективу трансформации


=== child3d

Дочерние элементы будут отображаться в 3D-пространстве


=== child2d

Дочерние элементы лежат в той же плоскости, что и их родитель


=== font




=== underline

подчёркнутый текст


=== overline

надчёркнутый текст


=== strike

зачёркнутый текст


=== bold

жирность


=== italic

наклон


=== absolute

позиционировать абсолютно


=== fixed

позиционировать фиксированно


=== relative

позиционировать относительно


=== static

позиционировать обычно


=== float

делает элемент "плавающим"


=== scroll

контролирует скролл и отображение текста


=== block

блочный элемент


=== inline

строчный элемент


=== iblock

строчный блок


=== hide

скрытый элемент


=== opacity

прозрачность


=== pointer

указатель - курсор


=== color

цвета


=== limit

граница - цвет


=== shadow

добавляет тень блоку


=== shade

добавляет тень текста


=== to

включает переход


=== interval

продолжительность перехода


=== ease

функция перехода


=== delay

задержка перехода


=== keyframes

объявляет анимацию


=== frame

шаг анимации от 0 до 1


=== animation

скорость анимации в секундах
speed(0.5)


=== pause

приостанавливает анимацию


=== running

запрещает прерывать анимацию


=== hover




=== click




=== css2r

конвертирует css в R::Css


== R::Css::Grid

методы для создания сетки
== R::Css::Grid

методы для создания сетки


=== new

конструктор




=== new

конструктор




=== new

конструктор




=== new

конструктор


== R::Css::Type

типизирует ключи css
== R::Css::Type

типизирует ключи css


=== new

конструктор


=== type

типизирует ключи


=== vendor

вендоризирует ключи


=== xak

на ключи и значение


=== size



=== deg



=== size4

несколько значений size


=== string



=== mini

минимальный набор вендорных префиксов


=== maxi

максимальный набор вендорных префиксов


=== iblock

инлайн-блок




=== new

конструктор


=== type

типизирует ключи


=== vendor

вендоризирует ключи


=== xak

на ключи и значение


=== size




=== deg




=== size4

несколько значений size


=== string




=== mini

минимальный набор вендорных префиксов


=== maxi

максимальный набор вендорных префиксов


=== iblock

инлайн-блок




=== new

конструктор


=== type

типизирует ключи


=== vendor

вендоризирует ключи


=== xak

на ключи и значение


=== size




=== deg




=== size4

несколько значений size


=== string




=== mini

минимальный набор вендорных префиксов


=== maxi

максимальный набор вендорных префиксов


=== iblock

инлайн-блок




=== new

конструктор


=== type

типизирует ключи


=== vendor

вендоризирует ключи


=== xak

на ключи и значение


=== size




=== deg




=== size4

несколько значений size


=== string




=== mini

минимальный набор вендорных префиксов


=== maxi

максимальный набор вендорных префиксов


=== iblock

инлайн-блок


== R::Css::Unit

класс для css типов
== R::Css::Unit

класс для css типов


=== new

конструктор


=== concat

объединяет со строкой


=== stringify

переводит в строковое представление


=== bool

в 




=== new

конструктор


=== concat

объединяет со строкой


=== stringify

переводит в строковое представление


=== bool

в 




=== new

конструктор


=== concat

объединяет со строкой


=== stringify

переводит в строковое представление


=== bool

в 




=== new

конструктор


=== concat

объединяет со строкой


=== stringify

переводит в строковое представление


=== bool

в 


== R::File

синхронный файловый интерфейс
== R::File

синхронный файловый интерфейс


=== new

конструктор


=== clone

клонирует


=== encode

устанавливает/возвращает кодировку файла


=== mode

устанавливает/возвращает режим чтения: >> или >


=== bufsize

устанавливает/возвращает для cp размер буфера


=== from

создаёт файлы из строчных путей и из файлов


=== one

сокращение для  $self->clone(files=>[$path]);


=== get

возвращает n-й файл. Счёт с нуля


=== filter

устанавливает/возвращает маску для сравнения файлов или регулярку. Она используется в find для отсечения ненужных файлов


=== reset_filter

очищает фильтр и добавляет в него новые


=== find

ищет файлы и применяет к ним функцию


=== then

выполняет функцию для каждого из файлов


=== grep

возвращает файлы прошедшие проверку


=== map

маппинг для файлов


=== filemap

преобразовывает пути файлов


=== reduce

объединяет


=== sort

сортирует файлы


=== length

количество файлов в коллекции


=== join

пути файлов через разделитель
разделитель по умолчанию - перевод строки


=== glob

пропускает имена файлов маской - не модифицирует изначальный массив


=== youngest

a моложе b
чем моложе файл - тем время модификации больше
все файлы a должны быть младше всех файлов b


=== oldest

a старше b
a обновлялся до того как обновлялся b
чем старше файл - тем время модификации меньше
значит a имеет меньшее mtime
все файлы a должны быть старше всех файлов b


=== youngling

youngling - детёныш, незрелый, юнец, новичёк
хотя бы один файл из a младше 


=== minmtime

минимальное mtime


=== maxmtime

максимальное mtime


=== mtime

возвращает время модификации
чем моложе файл - тем время модификации больше


=== _mtime



=== device

номер файловой системы


=== inode

номер в таблице inode


=== mod

возвращает и устанавливает тип и права


=== isdir

это директория


=== isfile

это регулярный файл


=== exists

файл существует


=== size

размер файла в байтах


=== space

подсчитывает размер всех файлов в папках


=== space_usage

размер одних файлов


=== rm

удаляет файлы и директории с файлами


=== rmdown

удаляет всё в указанной директории


=== read

читает первый файл целиком или указанный размер


=== write

записывает в 1-й файл


=== endwrite

дописывает в конец файла


=== replace

перезаписывает файлы через функцию


=== path

путь файлу с индексом idx


=== topath

переводит файл в путь


=== tofile

переводит файл в путь


=== cp

копирует файлы
чтобы скопировать все файлы в директорию используйте слеш на конце "dir/", иначе - скопируются только первый


=== mv

переносит файлы
используйте / в конце пути, чтобы перенести все файлы в одну директорию, иначе перенесётся только первый


=== open

открывает первый файл и возвращает описатель


=== files

возвращает массив файлов


=== subdir

удаляет начальную директорию у всех файлов. Ошибка, если хоть у одного нет такой директории


=== dir

возвращает каталог первого файла или заменяет у всех и возвращает клон


=== name

возвращает название первого файла nik+все расширения, кроме последнего


=== nik

возвращает имя без расширений


=== ext

возвращает расширение первого файла


=== exts

возвращает расширения первого файла


=== file

имя + расширение первого файла


=== adddate

добавляет к файлу дату. Если есть такой же файл ...


=== back

добавляет в конец пути файлов 


=== front

добавляет в начало имени файлов


=== frontdir

добавляет в начало имени файлов директорию


=== sub

добавляет в конец файлов путь, файлы считаются директориями


=== mkpath

создаёт каталоги в пути для всех файлов


=== mkdir

создаёт директорию для всех файлов


=== rmpath

удаляет все пустые директории вверх для всех файлов


=== bzip2

пакует файлы в bz2 и записывает в файлы c расширением bz2 или 1-й с указанным имененем


=== watch

Запоминает время файлов при первом вызове и сравнивает - не изменились ли при втором.
Возвращает 3 файловых объекта: изменившиеся, появившиеся и исчезнувшие файлы.


=== cmpmtime

как и watch, но сравнивает не с прежним значением, а с другим файловым массивом


=== cmp1mtime

сравнивает один файл со всеми




=== new

конструктор


=== clone

клонирует


=== encode

устанавливает/возвращает кодировку файла


=== mode

устанавливает/возвращает режим чтения: >> или >


=== bufsize

устанавливает/возвращает для cp размер буфера


=== from

создаёт файлы из строчных путей и из файлов


=== one

сокращение для  $self->clone(files=>[$path]);


=== get

возвращает n-й файл. Счёт с нуля


=== filter

устанавливает/возвращает маску для сравнения файлов или регулярку. Она используется в find для отсечения ненужных файлов


=== reset_filter

очищает фильтр и добавляет в него новые


=== find

ищет файлы и применяет к ним функцию


=== then

выполняет функцию для каждого из файлов


=== grep

возвращает файлы прошедшие проверку


=== map

маппинг для файлов


=== filemap

преобразовывает пути файлов


=== reduce

объединяет


=== sort

сортирует файлы


=== length

количество файлов в коллекции


=== join

пути файлов через разделитель
разделитель по умолчанию - перевод строки


=== glob

пропускает имена файлов маской - не модифицирует изначальный массив


=== youngest

a моложе b
чем моложе файл - тем время модификации больше
все файлы a должны быть младше всех файлов b


=== oldest

a старше b
a обновлялся до того как обновлялся b
чем старше файл - тем время модификации меньше
значит a имеет меньшее mtime
все файлы a должны быть старше всех файлов b


=== youngling

youngling - детёныш, незрелый, юнец, новичёк
хотя бы один файл из a младше 


=== minmtime

минимальное mtime


=== maxmtime

максимальное mtime


=== mtime

возвращает время модификации
чем моложе файл - тем время модификации больше


=== _mtime




=== device

номер файловой системы


=== inode

номер в таблице inode


=== mod

возвращает и устанавливает тип и права


=== isdir

это директория


=== isfile

это регулярный файл


=== exists

файл существует


=== size

размер файла в байтах


=== space

подсчитывает размер всех файлов в папках


=== space_usage

размер одних файлов


=== rm

удаляет файлы и директории с файлами


=== rmdown

удаляет всё в указанной директории


=== read

читает первый файл целиком или указанный размер


=== write

записывает в 1-й файл


=== endwrite

дописывает в конец файла


=== replace

перезаписывает файлы через функцию


=== path

путь файлу с индексом idx


=== topath

переводит файл в путь


=== tofile

переводит файл в путь


=== cp

копирует файлы
чтобы скопировать все файлы в директорию используйте слеш на конце "dir/", иначе - скопируются только первый


=== mv

переносит файлы
используйте / в конце пути, чтобы перенести все файлы в одну директорию, иначе перенесётся только первый


=== open

открывает первый файл и возвращает описатель


=== files

возвращает массив файлов


=== subdir

удаляет начальную директорию у всех файлов. Ошибка, если хоть у одного нет такой директории


=== dir

возвращает каталог первого файла или заменяет у всех и возвращает клон


=== name

возвращает название первого файла nik+все расширения, кроме последнего


=== nik

возвращает имя без расширений


=== ext

возвращает расширение первого файла


=== exts

возвращает расширения первого файла


=== file

имя + расширение первого файла


=== adddate

добавляет к файлу дату. Если есть такой же файл ...


=== back

добавляет в конец пути файлов 


=== front

добавляет в начало имени файлов


=== frontdir

добавляет в начало имени файлов директорию


=== sub

добавляет в конец файлов путь, файлы считаются директориями


=== mkpath

создаёт каталоги в пути для всех файлов


=== mkdir

создаёт директорию для всех файлов


=== rmpath

удаляет все пустые директории вверх для всех файлов


=== bzip2

пакует файлы в bz2 и записывает в файлы c расширением bz2 или 1-й с указанным имененем


=== watch

Запоминает время файлов при первом вызове и сравнивает - не изменились ли при втором.
Возвращает 3 файловых объекта: изменившиеся, появившиеся и исчезнувшие файлы.


=== cmpmtime

как и watch, но сравнивает не с прежним значением, а с другим файловым массивом


=== cmp1mtime

сравнивает один файл со всеми




=== new

конструктор


=== clone

клонирует


=== encode

устанавливает/возвращает кодировку файла


=== mode

устанавливает/возвращает режим чтения: >> или >


=== bufsize

устанавливает/возвращает для cp размер буфера


=== from

создаёт файлы из строчных путей и из файлов


=== one

сокращение для  $self->clone(files=>[$path]);


=== get

возвращает n-й файл. Счёт с нуля


=== filter

устанавливает/возвращает маску для сравнения файлов или регулярку. Она используется в find для отсечения ненужных файлов


=== reset_filter

очищает фильтр и добавляет в него новые


=== find

ищет файлы и применяет к ним функцию


=== then

выполняет функцию для каждого из файлов


=== grep

возвращает файлы прошедшие проверку


=== map

маппинг для файлов


=== filemap

преобразовывает пути файлов


=== reduce

объединяет


=== sort

сортирует файлы


=== length

количество файлов в коллекции


=== join

пути файлов через разделитель
разделитель по умолчанию - перевод строки


=== glob

пропускает имена файлов маской - не модифицирует изначальный массив


=== youngest

a моложе b
чем моложе файл - тем время модификации больше
все файлы a должны быть младше всех файлов b


=== oldest

a старше b
a обновлялся до того как обновлялся b
чем старше файл - тем время модификации меньше
значит a имеет меньшее mtime
все файлы a должны быть старше всех файлов b


=== youngling

youngling - детёныш, незрелый, юнец, новичёк
хотя бы один файл из a младше 


=== minmtime

минимальное mtime


=== maxmtime

максимальное mtime


=== mtime

возвращает время модификации
чем моложе файл - тем время модификации больше


=== _mtime




=== device

номер файловой системы


=== inode

номер в таблице inode


=== mod

возвращает и устанавливает тип и права


=== isdir

это директория


=== isfile

это регулярный файл


=== exists

файл существует


=== size

размер файла в байтах


=== space

подсчитывает размер всех файлов в папках


=== space_usage

размер одних файлов


=== rm

удаляет файлы и директории с файлами


=== rmdown

удаляет всё в указанной директории


=== read

читает первый файл целиком или указанный размер


=== write

записывает в 1-й файл


=== endwrite

дописывает в конец файла


=== replace

перезаписывает файлы через функцию


=== path

путь файлу с индексом idx


=== topath

переводит файл в путь


=== tofile

переводит файл в путь


=== cp

копирует файлы
чтобы скопировать все файлы в директорию используйте слеш на конце "dir/", иначе - скопируются только первый


=== mv

переносит файлы
используйте / в конце пути, чтобы перенести все файлы в одну директорию, иначе перенесётся только первый


=== open

открывает первый файл и возвращает описатель


=== files

возвращает массив файлов


=== subdir

удаляет начальную директорию у всех файлов. Ошибка, если хоть у одного нет такой директории


=== dir

возвращает каталог первого файла или заменяет у всех и возвращает клон


=== name

возвращает название первого файла nik+все расширения, кроме последнего


=== nik

возвращает имя без расширений


=== ext

возвращает расширение первого файла


=== exts

возвращает расширения первого файла


=== file

имя + расширение первого файла


=== adddate

добавляет к файлу дату. Если есть такой же файл ...


=== back

добавляет в конец пути файлов 


=== front

добавляет в начало имени файлов


=== frontdir

добавляет в начало имени файлов директорию


=== sub

добавляет в конец файлов путь, файлы считаются директориями


=== mkpath

создаёт каталоги в пути для всех файлов


=== mkdir

создаёт директорию для всех файлов


=== rmpath

удаляет все пустые директории вверх для всех файлов


=== bzip2

пакует файлы в bz2 и записывает в файлы c расширением bz2 или 1-й с указанным имененем


=== watch

Запоминает время файлов при первом вызове и сравнивает - не изменились ли при втором.
Возвращает 3 файловых объекта: изменившиеся, появившиеся и исчезнувшие файлы.


=== cmpmtime

как и watch, но сравнивает не с прежним значением, а с другим файловым массивом


=== cmp1mtime

сравнивает один файл со всеми




=== new

конструктор


=== clone

клонирует


=== encode

устанавливает/возвращает кодировку файла


=== mode

устанавливает/возвращает режим чтения: >> или >


=== bufsize

устанавливает/возвращает для cp размер буфера


=== from

создаёт файлы из строчных путей и из файлов


=== one

сокращение для  $self->clone(files=>[$path]);


=== get

возвращает n-й файл. Счёт с нуля


=== filter

устанавливает/возвращает маску для сравнения файлов или регулярку. Она используется в find для отсечения ненужных файлов


=== reset_filter

очищает фильтр и добавляет в него новые


=== find

ищет файлы и применяет к ним функцию


=== then

выполняет функцию для каждого из файлов


=== grep

возвращает файлы прошедшие проверку


=== map

маппинг для файлов


=== filemap

преобразовывает пути файлов


=== reduce

объединяет


=== sort

сортирует файлы


=== length

количество файлов в коллекции


=== join

пути файлов через разделитель
разделитель по умолчанию - перевод строки


=== glob

пропускает имена файлов маской - не модифицирует изначальный массив


=== youngest

a моложе b
чем моложе файл - тем время модификации больше
все файлы a должны быть младше всех файлов b


=== oldest

a старше b
a обновлялся до того как обновлялся b
чем старше файл - тем время модификации меньше
значит a имеет меньшее mtime
все файлы a должны быть старше всех файлов b


=== youngling

youngling - детёныш, незрелый, юнец, новичёк
хотя бы один файл из a младше 


=== minmtime

минимальное mtime


=== maxmtime

максимальное mtime


=== mtime

возвращает время модификации
чем моложе файл - тем время модификации больше


=== _mtime




=== device

номер файловой системы


=== inode

номер в таблице inode


=== mod

возвращает и устанавливает тип и права


=== isdir

это директория


=== isfile

это регулярный файл


=== exists

файл существует


=== size

размер файла в байтах


=== space

подсчитывает размер всех файлов в папках


=== space_usage

размер одних файлов


=== rm

удаляет файлы и директории с файлами


=== rmdown

удаляет всё в указанной директории


=== read

читает первый файл целиком или указанный размер


=== write

записывает в 1-й файл


=== endwrite

дописывает в конец файла


=== replace

перезаписывает файлы через функцию


=== path

путь файлу с индексом idx


=== topath

переводит файл в путь


=== tofile

переводит файл в путь


=== cp

копирует файлы
чтобы скопировать все файлы в директорию используйте слеш на конце "dir/", иначе - скопируются только первый


=== mv

переносит файлы
используйте / в конце пути, чтобы перенести все файлы в одну директорию, иначе перенесётся только первый


=== open

открывает первый файл и возвращает описатель


=== files

возвращает массив файлов


=== subdir

удаляет начальную директорию у всех файлов. Ошибка, если хоть у одного нет такой директории


=== dir

возвращает каталог первого файла или заменяет у всех и возвращает клон


=== name

возвращает название первого файла nik+все расширения, кроме последнего


=== nik

возвращает имя без расширений


=== ext

возвращает расширение первого файла


=== exts

возвращает расширения первого файла


=== file

имя + расширение первого файла


=== adddate

добавляет к файлу дату. Если есть такой же файл ...


=== back

добавляет в конец пути файлов 


=== front

добавляет в начало имени файлов


=== frontdir

добавляет в начало имени файлов директорию


=== sub

добавляет в конец файлов путь, файлы считаются директориями


=== mkpath

создаёт каталоги в пути для всех файлов


=== mkdir

создаёт директорию для всех файлов


=== rmpath

удаляет все пустые директории вверх для всех файлов


=== bzip2

пакует файлы в bz2 и записывает в файлы c расширением bz2 или 1-й с указанным имененем


=== watch

Запоминает время файлов при первом вызове и сравнивает - не изменились ли при втором.
Возвращает 3 файловых объекта: изменившиеся, появившиеся и исчезнувшие файлы.


=== cmpmtime

как и watch, но сравнивает не с прежним значением, а с другим файловым массивом


=== cmp1mtime

сравнивает один файл со всеми


== R::File::Coro

интегрирует файловый описатель с Coro - делает его внеблоковым
== R::File::Coro

интегрирует файловый описатель с Coro - делает его внеблоковым


=== TIEHANDLE

конструктор


=== OPEN

(Re-)open the handle


=== BINMODE

Specify content is binary


=== WRITE

Write length bytes of data from scalar starting at offset.


=== CLOSE

Close the handle


=== PRINT

Print the values in LIST


=== PRINTF

Print the values in LIST using format


=== READ

Read length bytes of data into scalar starting at offset.


=== READLINE

Read a single line


=== GETC

Get a single character


=== EOF

Test for end of file.


=== TELL

Return position in the file.


=== SEEK

Position the file.
Test for end of file.


=== DESTROY





=== TIEHANDLE

конструктор


=== OPEN

(Re-)open the handle


=== BINMODE

Specify content is binary


=== WRITE

Write length bytes of data from scalar starting at offset.


=== CLOSE

Close the handle


=== PRINT

Print the values in LIST


=== PRINTF

Print the values in LIST using format


=== READ

Read length bytes of data into scalar starting at offset.


=== READLINE

Read a single line


=== GETC

Get a single character


=== EOF

Test for end of file.


=== TELL

Return position in the file.


=== SEEK

Position the file.
Test for end of file.


=== DESTROY






=== TIEHANDLE

конструктор


=== OPEN

(Re-)open the handle


=== BINMODE

Specify content is binary


=== WRITE

Write length bytes of data from scalar starting at offset.


=== CLOSE

Close the handle


=== PRINT

Print the values in LIST


=== PRINTF

Print the values in LIST using format


=== READ

Read length bytes of data into scalar starting at offset.


=== READLINE

Read a single line


=== GETC

Get a single character


=== EOF

Test for end of file.


=== TELL

Return position in the file.


=== SEEK

Position the file.
Test for end of file.


=== DESTROY






=== TIEHANDLE

конструктор


=== OPEN

(Re-)open the handle


=== BINMODE

Specify content is binary


=== WRITE

Write length bytes of data from scalar starting at offset.


=== CLOSE

Close the handle


=== PRINT

Print the values in LIST


=== PRINTF

Print the values in LIST using format


=== READ

Read length bytes of data into scalar starting at offset.


=== READLINE

Read a single line


=== GETC

Get a single character


=== EOF

Test for end of file.


=== TELL

Return position in the file.


=== SEEK

Position the file.
Test for end of file.


=== DESTROY




== R::File::Image

расширяет файл для работы с картинками
== R::File::Image

расширяет файл для работы с картинками


=== Magick



=== ASSERT



=== Image

возвращает картинку или создаёт её из файла


=== images

возвращает картинки соответствующие файлам


=== save

записывает картинку в свой файл, если не указан другой


=== x

возвращает ширину картинки


=== y

возвращает высоту картинки


=== resize

изменяет размер картинки


=== crop

обрезает картинку


=== turn

поворачивает картинку. Угол от 0 до 1


=== composite

накладывает на первую картинку указанную


=== sprite

объединяет картинки в спрайт


=== _resize

обычный ресайз - формирует main-картинку


=== _preview

формирует превью: изменяет размер картинки к width и записывает её в файл


=== turn





=== Magick




=== ASSERT




=== Image

возвращает картинку или создаёт её из файла


=== images

возвращает картинки соответствующие файлам


=== save

записывает картинку в свой файл, если не указан другой


=== x

возвращает ширину картинки


=== y

возвращает высоту картинки


=== resize

изменяет размер картинки


=== crop

обрезает картинку


=== turn

поворачивает картинку. Угол от 0 до 1


=== composite

накладывает на первую картинку указанную


=== sprite

объединяет картинки в спрайт


=== _resize

обычный ресайз - формирует main-картинку


=== _preview

формирует превью: изменяет размер картинки к width и записывает её в файл


=== turn






=== Magick




=== ASSERT




=== Image

возвращает картинку или создаёт её из файла


=== images

возвращает картинки соответствующие файлам


=== save

записывает картинку в свой файл, если не указан другой


=== x

возвращает ширину картинки


=== y

возвращает высоту картинки


=== resize

изменяет размер картинки


=== crop

обрезает картинку


=== turn

поворачивает картинку. Угол от 0 до 1


=== composite

накладывает на первую картинку указанную


=== sprite

объединяет картинки в спрайт


=== _resize

обычный ресайз - формирует main-картинку


=== _preview

формирует превью: изменяет размер картинки к width и записывает её в файл


=== turn






=== Magick




=== ASSERT




=== Image

возвращает картинку или создаёт её из файла


=== images

возвращает картинки соответствующие файлам


=== save

записывает картинку в свой файл, если не указан другой


=== x

возвращает ширину картинки


=== y

возвращает высоту картинки


=== resize

изменяет размер картинки


=== crop

обрезает картинку


=== turn

поворачивает картинку. Угол от 0 до 1


=== composite

накладывает на первую картинку указанную


=== sprite

объединяет картинки в спрайт


=== _resize

обычный ресайз - формирует main-картинку


=== _preview

формирует превью: изменяет размер картинки к width и записывает её в файл


=== turn




== R::File::Watch

объект-обёртка для результатов функции app->file->watch
== R::File::Watch

объект-обёртка для результатов функции app->file->watch


=== new

конструктор




=== new

конструктор




=== new

конструктор




=== new

конструктор


== R::Form::Form

форма - представляет объект модели в html
== R::Form::Form

форма - представляет объект модели в html


=== new

конструктор - синглетон


=== DESTROY



=== uri

возвращает гиперссылку на форму


=== url

возвращает url формы с параметрами


=== href_class

класс для ссылки на форму (метод href в RubinForm)


=== href_label

для ссылки на форму (метод href в RubinForm)


=== hasAllow

имеет разрешение


=== check

валидация параметров
проводится в 2 этапа:
1. для allow-параметров
2. для save - из q.param
а для view производится своя "валидация"


=== runInit

запускает init единожды


=== runView

устанавливает дефолтные значения параметрам для представления
и запускает view


=== init

инициализатор - запускается при старте формы до hasAllow


=== validate

обработчик валидации - позволяет добавить ошибки. Запускается после валидации


=== success

обработчик успешного завершения


=== error

обработчик ошибки


=== complete

обработчик сохранения формы. Выполняется в любом случае


=== view

устанавливает данные для формы


=== finish

вызывается после отображения формы из end


=== save

вызывается для сохраниения результатов
возвращает результат обработчика success или error


=== isErrors

есть ли ошибки на форме


=== hasError

проверяет - установлена ли такая ошибка


=== addErrors

добавляет ошибки в форму


=== addInfo

добавляет информацию в форму


=== addError

добавляет ошибку к полю


=== at



=== sex

порождает инпут по имени


=== render

если форма вставлена в шаблон - распечатывает всю форму


=== content

возвращает содержимое формы


=== runInEnd

запускается в end




=== new

конструктор - синглетон


=== DESTROY




=== uri

возвращает гиперссылку на форму


=== url

возвращает url формы с параметрами


=== href_class

класс для ссылки на форму (метод href в RubinForm)


=== href_label

для ссылки на форму (метод href в RubinForm)


=== hasAllow

имеет разрешение


=== check

валидация параметров
проводится в 2 этапа:
1. для allow-параметров
2. для save - из q.param
а для view производится своя "валидация"


=== runInit

запускает init единожды


=== runView

устанавливает дефолтные значения параметрам для представления
и запускает view


=== init

инициализатор - запускается при старте формы до hasAllow


=== validate

обработчик валидации - позволяет добавить ошибки. Запускается после валидации


=== success

обработчик успешного завершения


=== error

обработчик ошибки


=== complete

обработчик сохранения формы. Выполняется в любом случае


=== view

устанавливает данные для формы


=== finish

вызывается после отображения формы из end


=== save

вызывается для сохраниения результатов
возвращает результат обработчика success или error


=== isErrors

есть ли ошибки на форме


=== hasError

проверяет - установлена ли такая ошибка


=== addErrors

добавляет ошибки в форму


=== addInfo

добавляет информацию в форму


=== addError

добавляет ошибку к полю


=== at




=== sex

порождает инпут по имени


=== render

если форма вставлена в шаблон - распечатывает всю форму


=== content

возвращает содержимое формы


=== runInEnd

запускается в end




=== new

конструктор - синглетон


=== DESTROY




=== uri

возвращает гиперссылку на форму


=== url

возвращает url формы с параметрами


=== href_class

класс для ссылки на форму (метод href в RubinForm)


=== href_label

для ссылки на форму (метод href в RubinForm)


=== hasAllow

имеет разрешение


=== check

валидация параметров
проводится в 2 этапа:
1. для allow-параметров
2. для save - из q.param
а для view производится своя "валидация"


=== runInit

запускает init единожды


=== runView

устанавливает дефолтные значения параметрам для представления
и запускает view


=== init

инициализатор - запускается при старте формы до hasAllow


=== validate

обработчик валидации - позволяет добавить ошибки. Запускается после валидации


=== success

обработчик успешного завершения


=== error

обработчик ошибки


=== complete

обработчик сохранения формы. Выполняется в любом случае


=== view

устанавливает данные для формы


=== finish

вызывается после отображения формы из end


=== save

вызывается для сохраниения результатов
возвращает результат обработчика success или error


=== isErrors

есть ли ошибки на форме


=== hasError

проверяет - установлена ли такая ошибка


=== addErrors

добавляет ошибки в форму


=== addInfo

добавляет информацию в форму


=== addError

добавляет ошибку к полю


=== at




=== sex

порождает инпут по имени


=== render

если форма вставлена в шаблон - распечатывает всю форму


=== content

возвращает содержимое формы


=== runInEnd

запускается в end




=== new

конструктор - синглетон


=== DESTROY




=== uri

возвращает гиперссылку на форму


=== url

возвращает url формы с параметрами


=== href_class

класс для ссылки на форму (метод href в RubinForm)


=== href_label

для ссылки на форму (метод href в RubinForm)


=== hasAllow

имеет разрешение


=== check

валидация параметров
проводится в 2 этапа:
1. для allow-параметров
2. для save - из q.param
а для view производится своя "валидация"


=== runInit

запускает init единожды


=== runView

устанавливает дефолтные значения параметрам для представления
и запускает view


=== init

инициализатор - запускается при старте формы до hasAllow


=== validate

обработчик валидации - позволяет добавить ошибки. Запускается после валидации


=== success

обработчик успешного завершения


=== error

обработчик ошибки


=== complete

обработчик сохранения формы. Выполняется в любом случае


=== view

устанавливает данные для формы


=== finish

вызывается после отображения формы из end


=== save

вызывается для сохраниения результатов
возвращает результат обработчика success или error


=== isErrors

есть ли ошибки на форме


=== hasError

проверяет - установлена ли такая ошибка


=== addErrors

добавляет ошибки в форму


=== addInfo

добавляет информацию в форму


=== addError

добавляет ошибку к полю


=== at




=== sex

порождает инпут по имени


=== render

если форма вставлена в шаблон - распечатывает всю форму


=== content

возвращает содержимое формы


=== runInEnd

запускается в end


== R::Form::Input

представляет ввод с формы, может сам сформировать форму
== R::Form::Input

представляет ввод с формы, может сам сформировать форму


=== new

конструктор инпута


=== DESTROY



=== CLASS_INIT

инициализация класса сразу после полной загрузки views


=== id

идентификатор инпута
int($self->form) для уникальных id, например, в label for, когда форма повторяется в списке


=== name

имя инпута


=== param

имя параметра, реализуемого инпутом


=== field

возвращает филд


=== model

возвращает модель


=== val

возвращает параметр инпута, в отличие от value, которое преобразует его


=== value

значение


=== showonly

только показывать


=== _WRAP

html-код вокруг инпута


=== class

возвращает класс


=== _attr

возвращает значение атрибута


=== attrs

возвращает все атрибуты


=== refset

возвращает набор объектов для select или подобных виджетов


=== options

опции для селекта и т.д.




=== new

конструктор инпута


=== DESTROY




=== CLASS_INIT

инициализация класса сразу после полной загрузки views


=== id

идентификатор инпута
int($self->form) для уникальных id, например, в label for, когда форма повторяется в списке


=== name

имя инпута


=== param

имя параметра, реализуемого инпутом


=== field

возвращает филд


=== model

возвращает модель


=== val

возвращает параметр инпута, в отличие от value, которое преобразует его


=== value

значение


=== showonly

только показывать


=== _WRAP

html-код вокруг инпута


=== class

возвращает класс


=== _attr

возвращает значение атрибута


=== attrs

возвращает все атрибуты


=== refset

возвращает набор объектов для select или подобных виджетов


=== options

опции для селекта и т.д.




=== new

конструктор инпута


=== DESTROY




=== CLASS_INIT

инициализация класса сразу после полной загрузки views


=== id

идентификатор инпута
int($self->form) для уникальных id, например, в label for, когда форма повторяется в списке


=== name

имя инпута


=== param

имя параметра, реализуемого инпутом


=== field

возвращает филд


=== model

возвращает модель


=== val

возвращает параметр инпута, в отличие от value, которое преобразует его


=== value

значение


=== showonly

только показывать


=== _WRAP

html-код вокруг инпута


=== class

возвращает класс


=== _attr

возвращает значение атрибута


=== attrs

возвращает все атрибуты


=== refset

возвращает набор объектов для select или подобных виджетов


=== options

опции для селекта и т.д.




=== new

конструктор инпута


=== DESTROY




=== CLASS_INIT

инициализация класса сразу после полной загрузки views


=== id

идентификатор инпута
int($self->form) для уникальных id, например, в label for, когда форма повторяется в списке


=== name

имя инпута


=== param

имя параметра, реализуемого инпутом


=== field

возвращает филд


=== model

возвращает модель


=== val

возвращает параметр инпута, в отличие от value, которое преобразует его


=== value

значение


=== showonly

только показывать


=== _WRAP

html-код вокруг инпута


=== class

возвращает класс


=== _attr

возвращает значение атрибута


=== attrs

возвращает все атрибуты


=== refset

возвращает набор объектов для select или подобных виджетов


=== options

опции для селекта и т.д.


== R::Form::Metaform

метаинформация о форме - аналог фиелдсета
== R::Form::Metaform

метаинформация о форме - аналог фиелдсета


=== exists

проверяет - есть ли форма


=== new

конструктор - синглетон


=== add

создаёт поле


=== del

удаляет метаинпут из метаформы


=== ovl

заменяет инпут


=== name_type_model

по переданным параметрам определяет тип и модель


=== at

возвращает инпут по имени


=== for

добавляет поля из указанной модели


=== submit

создаёт submit


=== GET

метод GET


=== POST

метод POST


=== ADD

тип формы "для добавления", по умолчанию
при сохранении формы, если не было ошибок, будут показаны параметры "для отображения"


=== MOD

тип формы "для редактирования". 
при редактировании не вызывает initView
не используется в pages. Pages всегда EXMOD


=== EXMOD



=== pass

указывает не выводить форму, если нет разрешения (hasAllow)




=== exists

проверяет - есть ли форма


=== new

конструктор - синглетон


=== add

создаёт поле


=== del

удаляет метаинпут из метаформы


=== ovl

заменяет инпут


=== name_type_model

по переданным параметрам определяет тип и модель


=== at

возвращает инпут по имени


=== for

добавляет поля из указанной модели


=== submit

создаёт submit


=== GET

метод GET


=== POST

метод POST


=== ADD

тип формы "для добавления", по умолчанию
при сохранении формы, если не было ошибок, будут показаны параметры "для отображения"


=== MOD

тип формы "для редактирования". 
при редактировании не вызывает initView
не используется в pages. Pages всегда EXMOD


=== EXMOD




=== pass

указывает не выводить форму, если нет разрешения (hasAllow)




=== exists

проверяет - есть ли форма


=== new

конструктор - синглетон


=== add

создаёт поле


=== del

удаляет метаинпут из метаформы


=== ovl

заменяет инпут


=== name_type_model

по переданным параметрам определяет тип и модель


=== at

возвращает инпут по имени


=== for

добавляет поля из указанной модели


=== submit

создаёт submit


=== GET

метод GET


=== POST

метод POST


=== ADD

тип формы "для добавления", по умолчанию
при сохранении формы, если не было ошибок, будут показаны параметры "для отображения"


=== MOD

тип формы "для редактирования". 
при редактировании не вызывает initView
не используется в pages. Pages всегда EXMOD


=== EXMOD




=== pass

указывает не выводить форму, если нет разрешения (hasAllow)




=== exists

проверяет - есть ли форма


=== new

конструктор - синглетон


=== add

создаёт поле


=== del

удаляет метаинпут из метаформы


=== ovl

заменяет инпут


=== name_type_model

по переданным параметрам определяет тип и модель


=== at

возвращает инпут по имени


=== for

добавляет поля из указанной модели


=== submit

создаёт submit


=== GET

метод GET


=== POST

метод POST


=== ADD

тип формы "для добавления", по умолчанию
при сохранении формы, если не было ошибок, будут показаны параметры "для отображения"


=== MOD

тип формы "для редактирования". 
при редактировании не вызывает initView
не используется в pages. Pages всегда EXMOD


=== EXMOD




=== pass

указывает не выводить форму, если нет разрешения (hasAllow)


== R::Form::Metainput

метаинформация для инпута
== R::Form::Metainput

метаинформация для инпута


=== new

конструктор метаинпута


=== init



=== _check

добавляет валидатор по имени из зарегистрированных или возвращает очередь чекеров


=== _check_refTo



=== _check_toMajor



=== _check_majorRef



=== field

связывает с филдом модели
должен быть связан с другим филдом, представляющим модель


=== mirror

изменяет поведение взятых от этого параметра параметров-моделей формы
например:
class MirrorForm inherits RubinForm
sub fields
self.add("task" => "hidden:task")
self.add("aim" => "hidden:aim").mirror.id.need
end
sub allow then 1
end


=== mirrorOff

отключает отображение


=== array

сообщает, что ожидается массив параметров


=== placeholder

устанавливает плейсхолдер


=== model

устанавливает/возвращает модель


=== allow

указывает, что поле должно браться для определения разрешения (метода allow)


=== param

указывает из какого параметра грузить


=== id

сокращение для param(id)


=== id2

сокращение для param(id2)


=== showonly

только для показа


=== novalidate

не имеет значения


=== _class

устанавливает атрибут класс


=== _attr

добавляет атрибуты


=== default

устанавливает дефолтный параметр для отображения


=== const

не считывает параметр, а всегда устанавливает его


=== value

устанавливает дефолтное значение (синоним default)


=== label

добавляет label к полю


=== nlabel

добавляет label к полю


=== rlabel

добавляет label к полю


=== _escapeHTMLX

преобразует html


=== _WRAP

оборачивает в теги


=== _PRE

добавляет html-текст до инпута


=== _POST

добавляет html-текст после инпута




=== new

конструктор метаинпута


=== init




=== _check

добавляет валидатор по имени из зарегистрированных или возвращает очередь чекеров


=== _check_refTo




=== _check_toMajor




=== _check_majorRef




=== field

связывает с филдом модели
должен быть связан с другим филдом, представляющим модель


=== mirror

изменяет поведение взятых от этого параметра параметров-моделей формы
например:
class MirrorForm inherits RubinForm
sub fields
self.add("task" => "hidden:task")
self.add("aim" => "hidden:aim").mirror.id.need
end
sub allow then 1
end


=== mirrorOff

отключает отображение


=== array

сообщает, что ожидается массив параметров


=== placeholder

устанавливает плейсхолдер


=== model

устанавливает/возвращает модель


=== allow

указывает, что поле должно браться для определения разрешения (метода allow)


=== param

указывает из какого параметра грузить


=== id

сокращение для param(id)


=== id2

сокращение для param(id2)


=== showonly

только для показа


=== novalidate

не имеет значения


=== _class

устанавливает атрибут класс


=== _attr

добавляет атрибуты


=== default

устанавливает дефолтный параметр для отображения


=== const

не считывает параметр, а всегда устанавливает его


=== value

устанавливает дефолтное значение (синоним default)


=== label

добавляет label к полю


=== nlabel

добавляет label к полю


=== rlabel

добавляет label к полю


=== _escapeHTMLX

преобразует html


=== _WRAP

оборачивает в теги


=== _PRE

добавляет html-текст до инпута


=== _POST

добавляет html-текст после инпута




=== new

конструктор метаинпута


=== init




=== _check

добавляет валидатор по имени из зарегистрированных или возвращает очередь чекеров


=== _check_refTo




=== _check_toMajor




=== _check_majorRef




=== field

связывает с филдом модели
должен быть связан с другим филдом, представляющим модель


=== mirror

изменяет поведение взятых от этого параметра параметров-моделей формы
например:
class MirrorForm inherits RubinForm
sub fields
self.add("task" => "hidden:task")
self.add("aim" => "hidden:aim").mirror.id.need
end
sub allow then 1
end


=== mirrorOff

отключает отображение


=== array

сообщает, что ожидается массив параметров


=== placeholder

устанавливает плейсхолдер


=== model

устанавливает/возвращает модель


=== allow

указывает, что поле должно браться для определения разрешения (метода allow)


=== param

указывает из какого параметра грузить


=== id

сокращение для param(id)


=== id2

сокращение для param(id2)


=== showonly

только для показа


=== novalidate

не имеет значения


=== _class

устанавливает атрибут класс


=== _attr

добавляет атрибуты


=== default

устанавливает дефолтный параметр для отображения


=== const

не считывает параметр, а всегда устанавливает его


=== value

устанавливает дефолтное значение (синоним default)


=== label

добавляет label к полю


=== nlabel

добавляет label к полю


=== rlabel

добавляет label к полю


=== _escapeHTMLX

преобразует html


=== _WRAP

оборачивает в теги


=== _PRE

добавляет html-текст до инпута


=== _POST

добавляет html-текст после инпута




=== new

конструктор метаинпута


=== init




=== _check

добавляет валидатор по имени из зарегистрированных или возвращает очередь чекеров


=== _check_refTo




=== _check_toMajor




=== _check_majorRef




=== field

связывает с филдом модели
должен быть связан с другим филдом, представляющим модель


=== mirror

изменяет поведение взятых от этого параметра параметров-моделей формы
например:
class MirrorForm inherits RubinForm
sub fields
self.add("task" => "hidden:task")
self.add("aim" => "hidden:aim").mirror.id.need
end
sub allow then 1
end


=== mirrorOff

отключает отображение


=== array

сообщает, что ожидается массив параметров


=== placeholder

устанавливает плейсхолдер


=== model

устанавливает/возвращает модель


=== allow

указывает, что поле должно браться для определения разрешения (метода allow)


=== param

указывает из какого параметра грузить


=== id

сокращение для param(id)


=== id2

сокращение для param(id2)


=== showonly

только для показа


=== novalidate

не имеет значения


=== _class

устанавливает атрибут класс


=== _attr

добавляет атрибуты


=== default

устанавливает дефолтный параметр для отображения


=== const

не считывает параметр, а всегда устанавливает его


=== value

устанавливает дефолтное значение (синоним default)


=== label

добавляет label к полю


=== nlabel

добавляет label к полю


=== rlabel

добавляет label к полю


=== _escapeHTMLX

преобразует html


=== _WRAP

оборачивает в теги


=== _PRE

добавляет html-текст до инпута


=== _POST

добавляет html-текст после инпута


== R::Form::Role

роль - позволяет создавать ACL - списки доступа
роль может наследовать несколько других ролей
sub fields нужна для создания необходимых валидируемых полей-параметров для allow
sub allow указывает, что роль 
fields и allow вызываются со всех классов, которые наследуются:
fields с new, а allow с hasAllow
в форме роль указывается в sub role и может быть только одна
использование:
class AimRole inherits R::Form::Role
sub fields then self.add("aim"=>":aim")
sub allow* then aim.owner == user.id
end
class AimAdd inherits RubinForm
sub allow then new AimRole.hasAllow
...
end
== R::Form::Role

end


=== fields



=== allow



=== role



=== fields



=== allow



=== allow









== R::Html

всё что связано с html
== R::Html

всё что связано с html


=== new

конструктор


=== unescape

декодирует из html


=== escape

кодирует в html


=== render

магический метод render


=== _escape



=== escape_ansi

для ошибок


=== ch

чекбокс для css:
<label for="id">кликать сюда</label> ... <% app.html.ch(id) %> <div>а тут всё меняется</div>


=== attr

возвращает атрибуты


=== emmet





=== new

конструктор


=== unescape

декодирует из html


=== escape

кодирует в html


=== render

магический метод render


=== _escape




=== escape_ansi

для ошибок


=== ch

чекбокс для css:
<label for="id">кликать сюда</label> ... <% app.html.ch(id) %> <div>а тут всё меняется</div>


=== attr

возвращает атрибуты


=== emmet






=== new

конструктор


=== unescape

декодирует из html


=== escape

кодирует в html


=== render

магический метод render


=== _escape




=== escape_ansi

для ошибок


=== ch

чекбокс для css:
<label for="id">кликать сюда</label> ... <% app.html.ch(id) %> <div>а тут всё меняется</div>


=== attr

возвращает атрибуты


=== emmet






=== new

конструктор


=== unescape

декодирует из html


=== escape

кодирует в html


=== render

магический метод render


=== _escape




=== escape_ansi

для ошибок


=== ch

чекбокс для css:
<label for="id">кликать сюда</label> ... <% app.html.ch(id) %> <div>а тут всё меняется</div>


=== attr

возвращает атрибуты


=== emmet




== R::Http::Agent

тестировщик страниц
== R::Http::Agent

тестировщик страниц


=== _update_page



=== new

конструктор


=== clear

очищает настройки, после перехода на другую страницу


=== go

переходит на указанный url


=== goto

переходит на указанный url. Не выдаёт ошибку, если статус не 200


=== reload

перезагружает страницу


=== title

проверяет титл


=== Q

возвращает Web::Query


=== count

проверяет что на странице есть текст n раз


=== look

проверяет что на странице есть текст


=== looknt

проверяет что на странице нет текста


=== form

форма: #id, name, "!f1 f2"
остальные параметры: поля формы для заполнения


=== link

проверяет, что есть ссылка


=== type_

заполняет указанный look input


=== _click

нажимает на указанное последним see ссылку или кнопку


=== _click_by_look

предыдущий - look


=== set_current_form_by_pos

устанавливает форму по позиции курсора


=== it

комментарий. Логируется при проходе


=== end

оканчивает цепочку








== WWW::Mechanize::PATCH

хак, испраляющий ошибку невернога referer-а
== WWW::Mechanize::PATCH

хак, испраляющий ошибку невернога referer-а


=== _update_page



=== new

конструктор


=== clear

очищает настройки, после перехода на другую страницу


=== go

переходит на указанный url


=== goto

переходит на указанный url. Не выдаёт ошибку, если статус не 200


=== reload

перезагружает страницу


=== title

проверяет титл


=== Q

возвращает Web::Query


=== count

проверяет что на странице есть текст n раз


=== look

проверяет что на странице есть текст


=== looknt

проверяет что на странице нет текста


=== form

форма: #id, name, "!f1 f2"
остальные параметры: поля формы для заполнения


=== link

проверяет, что есть ссылка


=== type_

заполняет указанный look input


=== _click

нажимает на указанное последним see ссылку или кнопку


=== _click_by_look

предыдущий - look


=== set_current_form_by_pos

устанавливает форму по позиции курсора


=== it

комментарий. Логируется при проходе


=== end

оканчивает цепочку




=== _update_page




=== new

конструктор


=== clear

очищает настройки, после перехода на другую страницу


=== go

переходит на указанный url


=== goto

переходит на указанный url. Не выдаёт ошибку, если статус не 200


=== reload

перезагружает страницу


=== title

проверяет титл


=== Q

возвращает Web::Query


=== count

проверяет что на странице есть текст n раз


=== look

проверяет что на странице есть текст


=== looknt

проверяет что на странице нет текста


=== form

форма: #id, name, "!f1 f2"
остальные параметры: поля формы для заполнения


=== link

проверяет, что есть ссылка


=== type_

заполняет указанный look input


=== _click

нажимает на указанное последним see ссылку или кнопку


=== _click_by_look

предыдущий - look


=== set_current_form_by_pos

устанавливает форму по позиции курсора


=== it

комментарий. Логируется при проходе


=== end

оканчивает цепочку




=== _update_page




=== new

конструктор


=== clear

очищает настройки, после перехода на другую страницу


=== go

переходит на указанный url


=== goto

переходит на указанный url. Не выдаёт ошибку, если статус не 200


=== reload

перезагружает страницу


=== title

проверяет титл


=== Q

возвращает Web::Query


=== count

проверяет что на странице есть текст n раз


=== look

проверяет что на странице есть текст


=== looknt

проверяет что на странице нет текста


=== form

форма: #id, name, "!f1 f2"
остальные параметры: поля формы для заполнения


=== link

проверяет, что есть ссылка


=== type_

заполняет указанный look input


=== _click

нажимает на указанное последним see ссылку или кнопку


=== _click_by_look

предыдущий - look


=== set_current_form_by_pos

устанавливает форму по позиции курсора


=== it

комментарий. Логируется при проходе


=== end

оканчивает цепочку


== R::Http::Dispatcher

диспетчер - несёт всю информацию о диспетчере:
кто (форма, экшн-отображение или функция контроллера), откуда (файл, строка)
== R::Http::Dispatcher

кто (форма, экшн-отображение или функция контроллера), откуда (файл, строка)


=== class



=== new

конструктор


=== type

устанавливает тип как по имени, так и по номеру. Возвращает номер


=== rename

переименовывает диспетчера


=== color

выводит цветовую составляющую


=== name

выводит именную составляющую


=== nik

выводит мелкое имя


=== cls

выводит класс или nik


=== action_name

выводит controller/action или action




=== class




=== new

конструктор


=== type

устанавливает тип как по имени, так и по номеру. Возвращает номер


=== rename

переименовывает диспетчера


=== color

выводит цветовую составляющую


=== name

выводит именную составляющую


=== nik

выводит мелкое имя


=== cls

выводит класс или nik


=== action_name

выводит controller/action или action




=== class




=== new

конструктор


=== type

устанавливает тип как по имени, так и по номеру. Возвращает номер


=== rename

переименовывает диспетчера


=== color

выводит цветовую составляющую


=== name

выводит именную составляющую


=== nik

выводит мелкое имя


=== cls

выводит класс или nik


=== action_name

выводит controller/action или action




=== class




=== new

конструктор


=== type

устанавливает тип как по имени, так и по номеру. Возвращает номер


=== rename

переименовывает диспетчера


=== color

выводит цветовую составляющую


=== name

выводит именную составляющую


=== nik

выводит мелкое имя


=== cls

выводит класс или nik


=== action_name

выводит controller/action или action


== R::Http::Mime

mime типы для файлов и писем
== R::Http::Mime

mime типы для файлов и писем


=== new





=== new






=== new






=== new




== R::Http::Request

запрос и ответ одновременно
== R::Http::Request

запрос и ответ одновременно


=== new

конструктор


=== simple

устанавливает пример запроса


=== action

устанавливает некоторые параметры (для тестов)


=== form

обрабытывает запрос формы


=== isGet

метод пришедшего запроса - get


=== isPost

метод пришедшего запроса - post


=== uri

uri запроса


=== ip



=== status

устанавливает статус


=== type

устанавливает тип


=== cookie

возвращает и устанавливает куки


=== redirect

устанавливает редирект


=== isRedirect

будет ли редирект


=== not_found

ошибка "не найдена страница"


=== form_error

показать страницу с ошибками формы


=== js

require для js


=== css

require для css


=== script

выводит в позицию js скрипт на js


=== style

выводит в позицию js скрипт на js


=== print

выводит всё с переводом строк и красиво раскрашенным


=== echo

добавляет к выводу


=== echo_clear

очищает буфер вывода


=== echo_pull

возвращает ссылку на буфер вывода и очищает его


=== render

рендерит шаблон в echo


=== referer

реферер


=== inhead

устанавливает входной заголовок


=== outhead

устанавливает выходной заголовок


=== head_clear

очищает выходные заголовки


=== clear

очищает response часть $q


=== head

устанавливает выходной заголовок, или возвращает входной


=== _ret

ids, get, post и param
$val = param(name) - возвращает первое значение или undef
@val = param(name) - возвращает массив значений
@names = param() - возвращает список имён параметров
вспомогательная функция


=== ids

возвращает параметры URL: /path5_6_-7, тогда ids = { id: 5, id2: 6, id3: -7 }


=== get

параметры после ?


=== post

POST-параметры


=== file

возвращает структуру файла принятую по POST upload


=== param

параметры POST, GET и из URL


=== session

сессия - дёргаем её 1-й раз


=== user

пользователь из сессии


=== auth

добавляет ошибку, если нет сессии и возвращает undef, а если есть, то user_id


=== action



=== isErrors



=== addErrors



=== addInfo



=== addError



=== isErrors

проверяет - есть ли ошибки страницы


=== addError

добавляет ошибку к полю


=== addErrors

добавляет ошибки на страницу


=== addInfo

добавляет информацию на страницу


=== path

возвращает путь url без конечных id


=== real_path

возвращает путь url


=== url

возвращает url, заменяя в нём GET-переменные на указанные
удаляет параметры с фейловым значением


=== id

возвращает параметр id


=== id2

возвращает параметр id2


=== require

требуется значение


=== int

введите число


=== uint

введите целое


=== natural

введите целое


=== number

введите вещественное


=== unumber

введите вещественное


=== email

введите email


=== password

введите email


=== load

загружает модель


=== owner_load

загружает и проверяет, чтобы owner был текущим пользователем


=== model

просто оборачивает значение в модель не проверяя


=== upload

загружает файл


=== _param



=== _param_from_post

считывает из потока параметры POST




=== new

конструктор


=== simple

устанавливает пример запроса


=== action

устанавливает некоторые параметры (для тестов)


=== form

обрабытывает запрос формы


=== isGet

метод пришедшего запроса - get


=== isPost

метод пришедшего запроса - post


=== uri

uri запроса


=== ip




=== status

устанавливает статус


=== type

устанавливает тип


=== cookie

возвращает и устанавливает куки


=== redirect

устанавливает редирект


=== isRedirect

будет ли редирект


=== not_found

ошибка "не найдена страница"


=== form_error

показать страницу с ошибками формы


=== js

require для js


=== css

require для css


=== script

выводит в позицию js скрипт на js


=== style

выводит в позицию js скрипт на js


=== print

выводит всё с переводом строк и красиво раскрашенным


=== echo

добавляет к выводу


=== echo_clear

очищает буфер вывода


=== echo_pull

возвращает ссылку на буфер вывода и очищает его


=== render

рендерит шаблон в echo


=== referer

реферер


=== inhead

устанавливает входной заголовок


=== outhead

устанавливает выходной заголовок


=== head_clear

очищает выходные заголовки


=== clear

очищает response часть $q


=== head

устанавливает выходной заголовок, или возвращает входной


=== _ret

ids, get, post и param
$val = param(name) - возвращает первое значение или undef
@val = param(name) - возвращает массив значений
@names = param() - возвращает список имён параметров
вспомогательная функция


=== ids

возвращает параметры URL: /path5_6_-7, тогда ids = { id: 5, id2: 6, id3: -7 }


=== get

параметры после ?


=== post

POST-параметры


=== file

возвращает структуру файла принятую по POST upload


=== param

параметры POST, GET и из URL


=== session

сессия - дёргаем её 1-й раз


=== user

пользователь из сессии


=== auth

добавляет ошибку, если нет сессии и возвращает undef, а если есть, то user_id


=== action




=== isErrors




=== addErrors




=== addInfo




=== addError




=== isErrors

проверяет - есть ли ошибки страницы


=== addError

добавляет ошибку к полю


=== addErrors

добавляет ошибки на страницу


=== addInfo

добавляет информацию на страницу


=== path

возвращает путь url без конечных id


=== real_path

возвращает путь url


=== url

возвращает url, заменяя в нём GET-переменные на указанные
удаляет параметры с фейловым значением


=== id

возвращает параметр id


=== id2

возвращает параметр id2


=== require

требуется значение


=== int

введите число


=== uint

введите целое


=== natural

введите целое


=== number

введите вещественное


=== unumber

введите вещественное


=== email

введите email


=== password

введите email


=== load

загружает модель


=== owner_load

загружает и проверяет, чтобы owner был текущим пользователем


=== model

просто оборачивает значение в модель не проверяя


=== upload

загружает файл


=== _param




=== _param_from_post

считывает из потока параметры POST




=== new

конструктор


=== simple

устанавливает пример запроса


=== action

устанавливает некоторые параметры (для тестов)


=== form

обрабытывает запрос формы


=== isGet

метод пришедшего запроса - get


=== isPost

метод пришедшего запроса - post


=== uri

uri запроса


=== ip




=== status

устанавливает статус


=== type

устанавливает тип


=== cookie

возвращает и устанавливает куки


=== redirect

устанавливает редирект


=== isRedirect

будет ли редирект


=== not_found

ошибка "не найдена страница"


=== form_error

показать страницу с ошибками формы


=== js

require для js


=== css

require для css


=== script

выводит в позицию js скрипт на js


=== style

выводит в позицию js скрипт на js


=== print

выводит всё с переводом строк и красиво раскрашенным


=== echo

добавляет к выводу


=== echo_clear

очищает буфер вывода


=== echo_pull

возвращает ссылку на буфер вывода и очищает его


=== render

рендерит шаблон в echo


=== referer

реферер


=== inhead

устанавливает входной заголовок


=== outhead

устанавливает выходной заголовок


=== head_clear

очищает выходные заголовки


=== clear

очищает response часть $q


=== head

устанавливает выходной заголовок, или возвращает входной


=== _ret

ids, get, post и param
$val = param(name) - возвращает первое значение или undef
@val = param(name) - возвращает массив значений
@names = param() - возвращает список имён параметров
вспомогательная функция


=== ids

возвращает параметры URL: /path5_6_-7, тогда ids = { id: 5, id2: 6, id3: -7 }


=== get

параметры после ?


=== post

POST-параметры


=== file

возвращает структуру файла принятую по POST upload


=== param

параметры POST, GET и из URL


=== session

сессия - дёргаем её 1-й раз


=== user

пользователь из сессии


=== auth

добавляет ошибку, если нет сессии и возвращает undef, а если есть, то user_id


=== action




=== isErrors




=== addErrors




=== addInfo




=== addError




=== isErrors

проверяет - есть ли ошибки страницы


=== addError

добавляет ошибку к полю


=== addErrors

добавляет ошибки на страницу


=== addInfo

добавляет информацию на страницу


=== path

возвращает путь url без конечных id


=== real_path

возвращает путь url


=== url

возвращает url, заменяя в нём GET-переменные на указанные
удаляет параметры с фейловым значением


=== id

возвращает параметр id


=== id2

возвращает параметр id2


=== require

требуется значение


=== int

введите число


=== uint

введите целое


=== natural

введите целое


=== number

введите вещественное


=== unumber

введите вещественное


=== email

введите email


=== password

введите email


=== load

загружает модель


=== owner_load

загружает и проверяет, чтобы owner был текущим пользователем


=== model

просто оборачивает значение в модель не проверяя


=== upload

загружает файл


=== _param




=== _param_from_post

считывает из потока параметры POST




=== new

конструктор


=== simple

устанавливает пример запроса


=== action

устанавливает некоторые параметры (для тестов)


=== form

обрабытывает запрос формы


=== isGet

метод пришедшего запроса - get


=== isPost

метод пришедшего запроса - post


=== uri

uri запроса


=== ip




=== status

устанавливает статус


=== type

устанавливает тип


=== cookie

возвращает и устанавливает куки


=== redirect

устанавливает редирект


=== isRedirect

будет ли редирект


=== not_found

ошибка "не найдена страница"


=== form_error

показать страницу с ошибками формы


=== js

require для js


=== css

require для css


=== script

выводит в позицию js скрипт на js


=== style

выводит в позицию js скрипт на js


=== print

выводит всё с переводом строк и красиво раскрашенным


=== echo

добавляет к выводу


=== echo_clear

очищает буфер вывода


=== echo_pull

возвращает ссылку на буфер вывода и очищает его


=== render

рендерит шаблон в echo


=== referer

реферер


=== inhead

устанавливает входной заголовок


=== outhead

устанавливает выходной заголовок


=== head_clear

очищает выходные заголовки


=== clear

очищает response часть $q


=== head

устанавливает выходной заголовок, или возвращает входной


=== _ret

ids, get, post и param
$val = param(name) - возвращает первое значение или undef
@val = param(name) - возвращает массив значений
@names = param() - возвращает список имён параметров
вспомогательная функция


=== ids

возвращает параметры URL: /path5_6_-7, тогда ids = { id: 5, id2: 6, id3: -7 }


=== get

параметры после ?


=== post

POST-параметры


=== file

возвращает структуру файла принятую по POST upload


=== param

параметры POST, GET и из URL


=== session

сессия - дёргаем её 1-й раз


=== user

пользователь из сессии


=== auth

добавляет ошибку, если нет сессии и возвращает undef, а если есть, то user_id


=== action




=== isErrors




=== addErrors




=== addInfo




=== addError




=== isErrors

проверяет - есть ли ошибки страницы


=== addError

добавляет ошибку к полю


=== addErrors

добавляет ошибки на страницу


=== addInfo

добавляет информацию на страницу


=== path

возвращает путь url без конечных id


=== real_path

возвращает путь url


=== url

возвращает url, заменяя в нём GET-переменные на указанные
удаляет параметры с фейловым значением


=== id

возвращает параметр id


=== id2

возвращает параметр id2


=== require

требуется значение


=== int

введите число


=== uint

введите целое


=== natural

введите целое


=== number

введите вещественное


=== unumber

введите вещественное


=== email

введите email


=== password

введите email


=== load

загружает модель


=== owner_load

загружает и проверяет, чтобы owner был текущим пользователем


=== model

просто оборачивает значение в модель не проверяя


=== upload

загружает файл


=== _param




=== _param_from_post

считывает из потока параметры POST


== R::Http::Scenario

сценарий
== R::Http::Scenario

сценарий


=== new

конструктор


=== start

очистка тестов


=== describe

описание


=== context

ситуация


=== agent

создаёт и возвращает агента




=== new

конструктор


=== start

очистка тестов


=== describe

описание


=== context

ситуация


=== agent

создаёт и возвращает агента




=== new

конструктор


=== start

очистка тестов


=== describe

описание


=== context

ситуация


=== agent

создаёт и возвращает агента




=== new

конструктор


=== start

очистка тестов


=== describe

описание


=== context

ситуация


=== agent

создаёт и возвращает агента


== R::Http::Server

http-сервер
== R::Http::Server

http-сервер


=== new

конструктор


=== analarm

обработчик таймаута: если есть сокет, то пишет в него


=== action

фиктивный запрос экшена. Возвращает {}


=== GET

action GET


=== POST

action POST


=== before

вызывается перед обработкой запроса


=== after

выполяняется перед выдачей


=== ritter

устанавливает обработчик запросов


=== impulse

обрабатывает серию запросов


=== impulseWithoutKeepAlive

обрабатывает одиночный запрос


=== response

отправляет ответ 


=== _helper_mem

возвращает сообщение


=== close

закрывает сокет


=== controllers



=== dispatchers



=== ne



=== ne



=== rename_dispatchers



=== stat_begin

выводит статистику


=== stat_end

выводит статистику




=== new

конструктор


=== analarm

обработчик таймаута: если есть сокет, то пишет в него


=== action

фиктивный запрос экшена. Возвращает {}


=== GET

action GET


=== POST

action POST


=== before

вызывается перед обработкой запроса


=== after

выполяняется перед выдачей


=== ritter

устанавливает обработчик запросов


=== impulse

обрабатывает серию запросов


=== impulseWithoutKeepAlive

обрабатывает одиночный запрос


=== response

отправляет ответ 


=== _helper_mem

возвращает сообщение


=== close

закрывает сокет


=== controllers




=== dispatchers




=== ne




=== ne




=== rename_dispatchers




=== stat_begin

выводит статистику


=== stat_end

выводит статистику




=== new

конструктор


=== analarm

обработчик таймаута: если есть сокет, то пишет в него


=== action

фиктивный запрос экшена. Возвращает {}


=== GET

action GET


=== POST

action POST


=== before

вызывается перед обработкой запроса


=== after

выполяняется перед выдачей


=== ritter

устанавливает обработчик запросов


=== impulse

обрабатывает серию запросов


=== impulseWithoutKeepAlive

обрабатывает одиночный запрос


=== response

отправляет ответ 


=== _helper_mem

возвращает сообщение


=== close

закрывает сокет


=== controllers




=== dispatchers




=== ne




=== ne




=== rename_dispatchers




=== stat_begin

выводит статистику


=== stat_end

выводит статистику




=== new

конструктор


=== analarm

обработчик таймаута: если есть сокет, то пишет в него


=== action

фиктивный запрос экшена. Возвращает {}


=== GET

action GET


=== POST

action POST


=== before

вызывается перед обработкой запроса


=== after

выполяняется перед выдачей


=== ritter

устанавливает обработчик запросов


=== impulse

обрабатывает серию запросов


=== impulseWithoutKeepAlive

обрабатывает одиночный запрос


=== response

отправляет ответ 


=== _helper_mem

возвращает сообщение


=== close

закрывает сокет


=== controllers




=== dispatchers




=== ne




=== ne




=== rename_dispatchers




=== stat_begin

выводит статистику


=== stat_end

выводит статистику


== R::Http::Server::Aura

http-сервер на Coro
== R::Http::Server::Aura

http-сервер на Coro








== R::Http::Server::Unicorn

http-сервер с интеграцией с базой и шаблонами
== R::Http::Server::Unicorn

http-сервер с интеграцией с базой и шаблонами


=== setup

запускается когда сокет уже создан, а воркеры ещё не порождены


=== init

инициализирует воркер


=== before

вызывается перед обработкой запроса


=== after

вызывается после обработки запроса




=== setup

запускается когда сокет уже создан, а воркеры ещё не порождены


=== init

инициализирует воркер


=== before

вызывается перед обработкой запроса


=== after

вызывается после обработки запроса




=== setup

запускается когда сокет уже создан, а воркеры ещё не порождены


=== init

инициализирует воркер


=== before

вызывается перед обработкой запроса


=== after

вызывается после обработки запроса




=== setup

запускается когда сокет уже создан, а воркеры ещё не порождены


=== init

инициализирует воркер


=== before

вызывается перед обработкой запроса


=== after

вызывается после обработки запроса


== R::Http::Status

статусы http
== R::Http::Status

статусы http


=== new

конструктор, возвращающий просто хэш номер=>статус




=== new

конструктор, возвращающий просто хэш номер=>статус




=== new

конструктор, возвращающий просто хэш номер=>статус




=== new

конструктор, возвращающий просто хэш номер=>статус


== R::Ini

парсит ini-файл
== R::Ini

парсит ini-файл


=== new

конструктор


=== parse



=== parse_str



=== dump



=== print



=== inject



=== delete



=== parse_ini

разбирает ini-файл и возвращает хэш


=== dump_ini

сериализирует данные в ini


=== print_ini

печатает ini в файл


=== inject_ini

вставляет или заменяет в ini-тексте значение


=== delete_ini

удляляет из ini-текста ключ. Если key не указан, то - секцию




=== new

конструктор


=== parse




=== parse_str




=== dump




=== print




=== inject




=== delete




=== parse_ini

разбирает ini-файл и возвращает хэш


=== dump_ini

сериализирует данные в ini


=== print_ini

печатает ini в файл


=== inject_ini

вставляет или заменяет в ini-тексте значение


=== delete_ini

удляляет из ini-текста ключ. Если key не указан, то - секцию




=== new

конструктор


=== parse




=== parse_str




=== dump




=== print




=== inject




=== delete




=== parse_ini

разбирает ini-файл и возвращает хэш


=== dump_ini

сериализирует данные в ini


=== print_ini

печатает ini в файл


=== inject_ini

вставляет или заменяет в ini-тексте значение


=== delete_ini

удляляет из ini-текста ключ. Если key не указан, то - секцию




=== new

конструктор


=== parse




=== parse_str




=== dump




=== print




=== inject




=== delete




=== parse_ini

разбирает ini-файл и возвращает хэш


=== dump_ini

сериализирует данные в ini


=== print_ini

печатает ini в файл


=== inject_ini

вставляет или заменяет в ini-тексте значение


=== delete_ini

удляляет из ini-текста ключ. Если key не указан, то - секцию


== R::Js

менеджер управления скриптами фронт-энда
== R::Js

менеджер управления скриптами фронт-энда


=== new

конструктор


=== append

добавляет код js


=== save

сохраняет код в файл




=== new

конструктор


=== append

добавляет код js


=== save

сохраняет код в файл




=== new

конструктор


=== append

добавляет код js


=== save

сохраняет код в файл




=== new

конструктор


=== append

добавляет код js


=== save

сохраняет код в файл


== R::Json

кодирует-раскодирует в json
== R::Json

кодирует-раскодирует в json


=== new



=== from

декодирует из json


=== to

кодирует в json


=== true

возвращает true


=== false

возвращает false




=== new




=== from

декодирует из json


=== to

кодирует в json


=== true

возвращает true


=== false

возвращает false




=== new




=== from

декодирует из json


=== to

кодирует в json


=== true

возвращает true


=== false

возвращает false




=== new




=== from

декодирует из json


=== to

кодирует в json


=== true

возвращает true


=== false

возвращает false


== R::Listener

обработчик событий
== R::Listener

обработчик событий


=== new

конструктор


=== on

установка слушателя


=== once

единоразово выполняет


=== then

установка слушателя


=== drop

удаление слушателя


=== fire

сообщение


=== stop

останавливает цепочку выполнения


=== exists

проверяет - есть ли хоть одна цепочка




=== new

конструктор


=== on

установка слушателя


=== once

единоразово выполняет


=== then

установка слушателя


=== drop

удаление слушателя


=== fire

сообщение


=== stop

останавливает цепочку выполнения


=== exists

проверяет - есть ли хоть одна цепочка




=== new

конструктор


=== on

установка слушателя


=== once

единоразово выполняет


=== then

установка слушателя


=== drop

удаление слушателя


=== fire

сообщение


=== stop

останавливает цепочку выполнения


=== exists

проверяет - есть ли хоть одна цепочка




=== new

конструктор


=== on

установка слушателя


=== once

единоразово выполняет


=== then

установка слушателя


=== drop

удаление слушателя


=== fire

сообщение


=== stop

останавливает цепочку выполнения


=== exists

проверяет - есть ли хоть одна цепочка


== R::Locale

локализация
== R::Locale

локализация


=== new

конструктор


=== PERMISSION_DENIED

константы


=== abbr

возвращает аббревиатуру


=== days

для дней


=== months

для месяцев


=== years

для лет


=== month



=== mon

3 1-х символа




=== new

конструктор


=== PERMISSION_DENIED

константы


=== abbr

возвращает аббревиатуру


=== days

для дней


=== months

для месяцев


=== years

для лет


=== month




=== mon

3 1-х символа




=== new

конструктор


=== PERMISSION_DENIED

константы


=== abbr

возвращает аббревиатуру


=== days

для дней


=== months

для месяцев


=== years

для лет


=== month




=== mon

3 1-х символа




=== new

конструктор


=== PERMISSION_DENIED

константы


=== abbr

возвращает аббревиатуру


=== days

для дней


=== months

для месяцев


=== years

для лет


=== month




=== mon

3 1-х символа


== R::Log

обёртка для логов
== R::Log

обёртка для логов


=== new

конструктор


=== send

сообщение


=== info

уровень информации


=== debug

уровень отладки


=== notice

уровень важных сообщений


=== warn

уровень предупреждений


=== error

уровень ошибок


=== critical

критический уровень


=== alert

сообщение должно быть доставлено


=== emerg

ничто не работает




=== new

конструктор


=== send

сообщение


=== info

уровень информации


=== debug

уровень отладки


=== notice

уровень важных сообщений


=== warn

уровень предупреждений


=== error

уровень ошибок


=== critical

критический уровень


=== alert

сообщение должно быть доставлено


=== emerg

ничто не работает




=== new

конструктор


=== send

сообщение


=== info

уровень информации


=== debug

уровень отладки


=== notice

уровень важных сообщений


=== warn

уровень предупреждений


=== error

уровень ошибок


=== critical

критический уровень


=== alert

сообщение должно быть доставлено


=== emerg

ничто не работает




=== new

конструктор


=== send

сообщение


=== info

уровень информации


=== debug

уровень отладки


=== notice

уровень важных сообщений


=== warn

уровень предупреждений


=== error

уровень ошибок


=== critical

критический уровень


=== alert

сообщение должно быть доставлено


=== emerg

ничто не работает


== R::Log::Echo

печатает в html
== R::Log::Echo

печатает в html


=== new

конструктор


=== send

сообщение


=== response

добавляет к ответу сообщение




=== new

конструктор


=== send

сообщение


=== response

добавляет к ответу сообщение




=== new

конструктор


=== send

сообщение


=== response

добавляет к ответу сообщение




=== new

конструктор


=== send

сообщение


=== response

добавляет к ответу сообщение


== R::Log::File

логирует на терминал
== R::Log::File

логирует на терминал


=== new

конструктор


=== send

сообщение


=== lock



=== unlock





=== new

конструктор


=== send

сообщение


=== lock




=== unlock






=== new

конструктор


=== send

сообщение


=== lock




=== unlock






=== new

конструктор


=== send

сообщение


=== lock




=== unlock




== R::Log::Std

логирует на терминал
== R::Log::Std

логирует на терминал


=== new

конструктор


=== send

сообщение




=== new

конструктор


=== send

сообщение




=== new

конструктор


=== send

сообщение




=== new

конструктор


=== send

сообщение


== R::Log::Syslog

логирует на терминал
== R::Log::Syslog

логирует на терминал


=== new

конструктор


=== send

сообщение


=== DESTROY

деструктор




=== new

конструктор


=== send

сообщение


=== DESTROY

деструктор




=== new

конструктор


=== send

сообщение


=== DESTROY

деструктор




=== new

конструктор


=== send

сообщение


=== DESTROY

деструктор


== R::Mail

почтальён
== R::Mail

почтальён


=== new

конструктор письма


=== subject

тема


=== from

от кого


=== to

кому


=== attach

подключает файл


=== real_render

рендерит и подключает файл


=== render

реальный рендер


=== no_utf8

декодирует все ключи


=== form_mail

формирует письмо


=== send

отправляет


=== stringify

возвращает текст письма




=== new

конструктор письма


=== subject

тема


=== from

от кого


=== to

кому


=== attach

подключает файл


=== real_render

рендерит и подключает файл


=== render

реальный рендер


=== no_utf8

декодирует все ключи


=== form_mail

формирует письмо


=== send

отправляет


=== stringify

возвращает текст письма




=== new

конструктор письма


=== subject

тема


=== from

от кого


=== to

кому


=== attach

подключает файл


=== real_render

рендерит и подключает файл


=== render

реальный рендер


=== no_utf8

декодирует все ключи


=== form_mail

формирует письмо


=== send

отправляет


=== stringify

возвращает текст письма




=== new

конструктор письма


=== subject

тема


=== from

от кого


=== to

кому


=== attach

подключает файл


=== real_render

рендерит и подключает файл


=== render

реальный рендер


=== no_utf8

декодирует все ключи


=== form_mail

формирует письмо


=== send

отправляет


=== stringify

возвращает текст письма


== R::Make

создаёт файл зависимостей и применяет их
== R::Make

создаёт файл зависимостей и применяет их


=== import

импортирует символы


=== unimport



=== new

конструктор


=== category

категория заданий


=== name

имя задания


=== args

аргументы задания


=== desc

описание задания


=== spec

спецификация задания - появляется, если набрать myapp help mytask


=== rels

зависимости задания


=== deps

файловые зависимости задания


=== test

тестирует до того как будут применены зависимости 


=== default_task

устанавливает дефолтное задание


=== task

задание


=== make

выполняет задание вместе с зависимостями рекурсивно


=== quit

используется для тестирования


=== load

подгружает все источники


=== run

выполняет указанное в @ARGV задание




=== import

импортирует символы


=== unimport




=== new

конструктор


=== category

категория заданий


=== name

имя задания


=== args

аргументы задания


=== desc

описание задания


=== spec

спецификация задания - появляется, если набрать myapp help mytask


=== rels

зависимости задания


=== deps

файловые зависимости задания


=== test

тестирует до того как будут применены зависимости 


=== default_task

устанавливает дефолтное задание


=== task

задание


=== make

выполняет задание вместе с зависимостями рекурсивно


=== quit

используется для тестирования


=== load

подгружает все источники


=== run

выполняет указанное в @ARGV задание




=== import

импортирует символы


=== unimport




=== new

конструктор


=== category

категория заданий


=== name

имя задания


=== args

аргументы задания


=== desc

описание задания


=== spec

спецификация задания - появляется, если набрать myapp help mytask


=== rels

зависимости задания


=== deps

файловые зависимости задания


=== test

тестирует до того как будут применены зависимости 


=== default_task

устанавливает дефолтное задание


=== task

задание


=== make

выполняет задание вместе с зависимостями рекурсивно


=== quit

используется для тестирования


=== load

подгружает все источники


=== run

выполняет указанное в @ARGV задание




=== import

импортирует символы


=== unimport




=== new

конструктор


=== category

категория заданий


=== name

имя задания


=== args

аргументы задания


=== desc

описание задания


=== spec

спецификация задания - появляется, если набрать myapp help mytask


=== rels

зависимости задания


=== deps

файловые зависимости задания


=== test

тестирует до того как будут применены зависимости 


=== default_task

устанавливает дефолтное задание


=== task

задание


=== make

выполняет задание вместе с зависимостями рекурсивно


=== quit

используется для тестирования


=== load

подгружает все источники


=== run

выполняет указанное в @ARGV задание


== R::Make::Assistant

разнообразные вспомогательные задания не вошедшие ни в одну категорию
== R::Make::Assistant

разнообразные вспомогательные задания не вошедшие ни в одну категорию


=== new

конструктор


=== help



=== utf8



=== home





=== new

конструктор


=== help




=== utf8




=== home






=== new

конструктор


=== help




=== utf8




=== home






=== new

конструктор


=== help




=== utf8




=== home




== R::Make::Compute

задачи для вычислений
== R::Make::Compute

задачи для вычислений


=== new

конструктор




=== new

конструктор




=== new

конструктор




=== new

конструктор


== R::Make::Git

добавляет команды для работы с 
== R::Make::Git

добавляет команды для работы с 


=== new

конструктор


=== commit



=== merge



=== to





=== new

конструктор


=== commit




=== merge




=== to






=== new

конструктор


=== commit




=== merge




=== to






=== new

конструктор


=== commit




=== merge




=== to




== R::Make::Model

команды для работы с моделью
== R::Make::Model

команды для работы с моделью


=== new

конструктор


=== models



=== show



=== is



=== sync



=== drop





=== new

конструктор


=== models




=== show




=== is




=== sync




=== drop






=== new

конструктор


=== models




=== show




=== is




=== sync




=== drop






=== new

конструктор


=== models




=== show




=== is




=== sync




=== drop




== R::Make::Scenario

задачи для сценариев
== R::Make::Scenario

задачи для сценариев


=== new

конструктор


=== scenario_ini

хелпер для переключения на ini сценариев


=== man



=== t



=== scserver



=== sc





=== new

конструктор


=== scenario_ini

хелпер для переключения на ini сценариев


=== man




=== t




=== scserver




=== sc






=== new

конструктор


=== scenario_ini

хелпер для переключения на ini сценариев


=== man




=== t




=== scserver




=== sc






=== new

конструктор


=== scenario_ini

хелпер для переключения на ini сценариев


=== man




=== t




=== scserver




=== sc




== R::Make::Server

задачи для работы с сервером
== R::Make::Server

задачи для работы с сервером


=== new

конструктор


=== default_log

хелпер для переключения логов на дефолтный режим


=== routers



=== unicorn_cls

хелпер для класса сервера


=== unicorn

хелпер для процесса


=== loop



=== run



=== start



=== restart



=== status



=== stop



=== watch





=== new

конструктор


=== default_log

хелпер для переключения логов на дефолтный режим


=== routers




=== unicorn_cls

хелпер для класса сервера


=== unicorn

хелпер для процесса


=== loop




=== run




=== start




=== restart




=== status




=== stop




=== watch






=== new

конструктор


=== default_log

хелпер для переключения логов на дефолтный режим


=== routers




=== unicorn_cls

хелпер для класса сервера


=== unicorn

хелпер для процесса


=== loop




=== run




=== start




=== restart




=== status




=== stop




=== watch






=== new

конструктор


=== default_log

хелпер для переключения логов на дефолтный режим


=== routers




=== unicorn_cls

хелпер для класса сервера


=== unicorn

хелпер для процесса


=== loop




=== run




=== start




=== restart




=== status




=== stop




=== watch




== R::Make::Style

задачи по обработке стилей
== R::Make::Style

задачи по обработке стилей


=== new

конструктор


=== css2r



=== sign



=== sprite

deps $app->file("html/sprite/*")->glob->grep() => "";


=== style





=== new

конструктор


=== css2r




=== sign




=== sprite

deps $app->file("html/sprite/*")->glob->grep() => "";


=== style






=== new

конструктор


=== css2r




=== sign




=== sprite

deps $app->file("html/sprite/*")->glob->grep() => "";


=== style






=== new

конструктор


=== css2r




=== sign




=== sprite

deps $app->file("html/sprite/*")->glob->grep() => "";


=== style




== R::Model

менеджер моделей
app->model->mymodel
== R::Model

app->model->mymodel


=== new

конструктор


=== Metafieldset

возвращает мету


=== AUTOLOAD

возвращает модель


=== DESTROY





=== close

закрывает метаописание


=== fieldset

создаёт и возвращает новую таблицу


=== meta

устанавливает метаинформацию для базы


=== exists

проверяет на существование филдсет по имени и возвращает его, если тот есть


=== existsTab

проверяет таблицу на существование


=== existsCol

проверяет колумн на существование


=== _inspect

проверяет, что есть такой обработчик


=== on

устанавливает обработчик события на мету


=== fire

возбуждает событие на мете


=== on_exists

проверяет - установлено ли событие


=== load_all_models

загружает все модели


=== create

запускает setup, если такого филдсета нет
филдсет в сетап передаётся и параметром и в $_


=== getUIntType

возвращает текстовый тип для базы по размеру


=== getTextType

возвращает текстовый тип для базы по размеру


=== sync_for_script

синхронизация используемая в скриптах - запрашивает 


=== sync

синхронизирует базу


=== presync

формирует запросы для синхронизации базы


=== syncing

синхронизация после presync


=== synced

выполняем функции синхронизации в установленном порядке 


=== sql

sql для опций БД


=== alter

sql для alter database


=== create_database

sql для создания БД


=== database

если такой БД нет - создаёт и переключает на неё (???)


=== drop

удаляет базу


=== down

сгружает в указанную директорию структуру базы в виде моделей
Создаётся папка с именем базы




=== close

закрывает метаописание


=== fieldset

создаёт и возвращает новую таблицу


=== meta

устанавливает метаинформацию для базы


=== exists

проверяет на существование филдсет по имени и возвращает его, если тот есть


=== existsTab

проверяет таблицу на существование


=== existsCol

проверяет колумн на существование


=== _inspect

проверяет, что есть такой обработчик


=== on

устанавливает обработчик события на мету


=== fire

возбуждает событие на мете


=== on_exists

проверяет - установлено ли событие


=== load_all_models

загружает все модели


=== create

запускает setup, если такого филдсета нет
филдсет в сетап передаётся и параметром и в $_


=== getUIntType

возвращает текстовый тип для базы по размеру


=== getTextType

возвращает текстовый тип для базы по размеру


=== sync_for_script

синхронизация используемая в скриптах - запрашивает 


=== sync

синхронизирует базу


=== presync

формирует запросы для синхронизации базы


=== syncing

синхронизация после presync


=== synced

выполняем функции синхронизации в установленном порядке 


=== sql

sql для опций БД


=== alter

sql для alter database


=== create_database

sql для создания БД


=== database

если такой БД нет - создаёт и переключает на неё (???)


=== drop

удаляет базу


=== down

сгружает в указанную директорию структуру базы в виде моделей
Создаётся папка с именем базы




=== new

конструктор


=== Metafieldset

возвращает мету


=== AUTOLOAD

возвращает модель


=== DESTROY




== R::Model::Extend::Sphinx::Metafieldset


== R::Model::Extend::Sphinx::Metafieldset

use common::sense;


=== new

конструктор




=== new

конструктор




=== new

конструктор




=== new

конструктор


== R::Model::Field

поле таблицы
== R::Model::Field

поле таблицы


=== new

конструктор


=== add_method

создаёт метод в модели


=== check

добавляет чекер по имени из зарегистрированных


=== drop_method



=== info2

специальная информация для отладки


=== register

регистрирует филд в филдсете


=== cloneto



=== field_with_name

ищет филд в этом филдсете, который имеет такое же имя


=== delete

удаляет из филдсета


=== connect

возвращает коннект


=== bean

возвращает row


=== info

выдаёт краткую информацию о себе


=== remark

добавляет комментарий


=== input

берёт описание виджета из своих параметров




=== new

конструктор


=== add_method

создаёт метод в модели


=== check

добавляет чекер по имени из зарегистрированных


=== drop_method




=== info2

специальная информация для отладки


=== register

регистрирует филд в филдсете


=== cloneto




=== field_with_name

ищет филд в этом филдсете, который имеет такое же имя


=== delete

удаляет из филдсета


=== connect

возвращает коннект


=== bean

возвращает row


=== info

выдаёт краткую информацию о себе


=== remark

добавляет комментарий


=== input

берёт описание виджета из своих параметров




=== new

конструктор


=== add_method

создаёт метод в модели


=== check

добавляет чекер по имени из зарегистрированных


=== drop_method




=== info2

специальная информация для отладки


=== register

регистрирует филд в филдсете


=== cloneto




=== field_with_name

ищет филд в этом филдсете, который имеет такое же имя


=== delete

удаляет из филдсета


=== connect

возвращает коннект


=== bean

возвращает row


=== info

выдаёт краткую информацию о себе


=== remark

добавляет комментарий


=== input

берёт описание виджета из своих параметров




=== new

конструктор


=== add_method

создаёт метод в модели


=== check

добавляет чекер по имени из зарегистрированных


=== drop_method




=== info2

специальная информация для отладки


=== register

регистрирует филд в филдсете


=== cloneto




=== field_with_name

ищет филд в этом филдсете, который имеет такое же имя


=== delete

удаляет из филдсета


=== connect

возвращает коннект


=== bean

возвращает row


=== info

выдаёт краткую информацию о себе


=== remark

добавляет комментарий


=== input

берёт описание виджета из своих параметров


== R::Model::Field::Assign

поле таблицы базы данных - ссылка один-к-одному обратная
== R::Model::Field::Assign

поле таблицы базы данных - ссылка один-к-одному обратная


=== new

конструктор


=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== row

свойство row




=== new

конструктор


=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== row

свойство row




=== new

конструктор


=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== row

свойство row




=== new

конструктор


=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== row

свойство row


== R::Model::Field::Back

обратная ссылка на филд
== R::Model::Field::Back

обратная ссылка на филд


=== new

конструктор


=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== refTo

возвращает столбец в таблице, на к-ю ссылается


=== cloneto



=== row

свойство обратной ссылки
author.books


=== rowset



=== rowset_new





=== new

конструктор


=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== refTo

возвращает столбец в таблице, на к-ю ссылается


=== cloneto




=== row

свойство обратной ссылки
author.books


=== rowset




=== rowset_new






=== new

конструктор


=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== refTo

возвращает столбец в таблице, на к-ю ссылается


=== cloneto




=== row

свойство обратной ссылки
author.books


=== rowset




=== rowset_new






=== new

конструктор


=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== refTo

возвращает столбец в таблице, на к-ю ссылается


=== cloneto




=== row

свойство обратной ссылки
author.books


=== rowset




=== rowset_new




== R::Model::Field::Col

поле таблицы базы данных
== R::Model::Field::Col

поле таблицы базы данных


=== new

конструктор


=== register_class

устанавливает класс для возвращения-установки значений


=== tab

возвращает таблицу


=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== charset

добавляет collate


=== indexes



=== fk_to_col



=== rename

указывает sync переименовать столбец


=== sql

возвращает представление филда в sql


=== alter

возвращает alter column
$after - после какого столбца
$rename - переименовать


=== drop

код для удаления столбца


=== sync

синхронизирует филд с базой


=== not_eq_info

сравнивает колумн с info


=== alter_info

возвращает колумн из info


=== row

свойство филда - устанавливается в класс row


=== rowset

устанавливается в класс rowset-а




=== new

конструктор


=== register_class

устанавливает класс для возвращения-установки значений


=== tab

возвращает таблицу


=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== charset

добавляет collate


=== indexes




=== fk_to_col




=== rename

указывает sync переименовать столбец


=== sql

возвращает представление филда в sql


=== alter

возвращает alter column
$after - после какого столбца
$rename - переименовать


=== drop

код для удаления столбца


=== sync

синхронизирует филд с базой


=== not_eq_info

сравнивает колумн с info


=== alter_info

возвращает колумн из info


=== row

свойство филда - устанавливается в класс row


=== rowset

устанавливается в класс rowset-а




=== new

конструктор


=== register_class

устанавливает класс для возвращения-установки значений


=== tab

возвращает таблицу


=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== charset

добавляет collate


=== indexes




=== fk_to_col




=== rename

указывает sync переименовать столбец


=== sql

возвращает представление филда в sql


=== alter

возвращает alter column
$after - после какого столбца
$rename - переименовать


=== drop

код для удаления столбца


=== sync

синхронизирует филд с базой


=== not_eq_info

сравнивает колумн с info


=== alter_info

возвращает колумн из info


=== row

свойство филда - устанавливается в класс row


=== rowset

устанавливается в класс rowset-а




=== new

конструктор


=== register_class

устанавливает класс для возвращения-установки значений


=== tab

возвращает таблицу


=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== charset

добавляет collate


=== indexes




=== fk_to_col




=== rename

указывает sync переименовать столбец


=== sql

возвращает представление филда в sql


=== alter

возвращает alter column
$after - после какого столбца
$rename - переименовать


=== drop

код для удаления столбца


=== sync

синхронизирует филд с базой


=== not_eq_info

сравнивает колумн с info


=== alter_info

возвращает колумн из info


=== row

свойство филда - устанавливается в класс row


=== rowset

устанавливается в класс rowset-а


== R::Model::Field::Compute

вычислимое поле
== R::Model::Field::Compute

вычислимое поле


=== new

конструктор


=== add_method

переопределяем метод, чтобы не создавать существующий


=== info

выдаёт краткую информацию о себе


=== row



=== rowset





=== new

конструктор


=== add_method

переопределяем метод, чтобы не создавать существующий


=== info

выдаёт краткую информацию о себе


=== row




=== rowset






=== new

конструктор


=== add_method

переопределяем метод, чтобы не создавать существующий


=== info

выдаёт краткую информацию о себе


=== row




=== rowset






=== new

конструктор


=== add_method

переопределяем метод, чтобы не создавать существующий


=== info

выдаёт краткую информацию о себе


=== row




=== rowset




== R::Model::Field::M2m

поле многие-ко-многим
== R::Model::Field::M2m

поле многие-ко-многим


=== new

конструктор


=== remark

комментарий


=== input

возвращает или устанавливает инпут


=== info

выдаёт краткую информацию о себе


=== refTo

возвращает столбец в таблице, на к-ю ссылается


=== cloneto



=== row

свойство m2m


=== rowset



=== rowset_new





=== new

конструктор


=== remark

комментарий


=== input

возвращает или устанавливает инпут


=== info

выдаёт краткую информацию о себе


=== refTo

возвращает столбец в таблице, на к-ю ссылается


=== cloneto




=== row

свойство m2m


=== rowset




=== rowset_new






=== new

конструктор


=== remark

комментарий


=== input

возвращает или устанавливает инпут


=== info

выдаёт краткую информацию о себе


=== refTo

возвращает столбец в таблице, на к-ю ссылается


=== cloneto




=== row

свойство m2m


=== rowset




=== rowset_new






=== new

конструктор


=== remark

комментарий


=== input

возвращает или устанавливает инпут


=== info

выдаёт краткую информацию о себе


=== refTo

возвращает столбец в таблице, на к-ю ссылается


=== cloneto




=== row

свойство m2m


=== rowset




=== rowset_new




== R::Model::Field::M2n

поле многие-к-одному
== R::Model::Field::M2n

поле многие-к-одному


=== new



=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== row

свойство m2n из row


=== rowset

свойство из rowset




=== new




=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== row

свойство m2n из row


=== rowset

свойство из rowset




=== new




=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== row

свойство m2n из row


=== rowset

свойство из rowset




=== new




=== info

выдаёт краткую информацию о себе


=== input

возвращает или устанавливает инпут


=== row

свойство m2n из row


=== rowset

свойство из rowset


== R::Model::Field::Ref

поле таблицы базы данных - ссылка
== R::Model::Field::Ref

поле таблицы базы данных - ссылка


=== new

конструктор


=== info

выдаёт краткую информацию о себе


=== remark

устанавливает комментарий


=== input

возвращает или устанавливает инпут


=== fk_to

создаёт foreign key на указанный филд


=== refTo

возвращает столбец в таблице, на к-ю ссылается


=== cloneto



=== row

свойство row


=== rowset

свойство
book -> author (books => books)




=== new

конструктор


=== info

выдаёт краткую информацию о себе


=== remark

устанавливает комментарий


=== input

возвращает или устанавливает инпут


=== fk_to

создаёт foreign key на указанный филд


=== refTo

возвращает столбец в таблице, на к-ю ссылается


=== cloneto




=== row

свойство row


=== rowset

свойство
book -> author (books => books)




=== new

конструктор


=== info

выдаёт краткую информацию о себе


=== remark

устанавливает комментарий


=== input

возвращает или устанавливает инпут


=== fk_to

создаёт foreign key на указанный филд


=== refTo

возвращает столбец в таблице, на к-ю ссылается


=== cloneto




=== row

свойство row


=== rowset

свойство
book -> author (books => books)




=== new

конструктор


=== info

выдаёт краткую информацию о себе


=== remark

устанавливает комментарий


=== input

возвращает или устанавливает инпут


=== fk_to

создаёт foreign key на указанный филд


=== refTo

возвращает столбец в таблице, на к-ю ссылается


=== cloneto




=== row

свойство row


=== rowset

свойство
book -> author (books => books)


== R::Model::Fieldset

таблица - менеджер полей, дополнительных опций таблицы базы и ключей
== R::Model::Fieldset

таблица - менеджер полей, дополнительных опций таблицы базы и ключей


=== _inspect

проверяет, что есть такой обработчик


=== new

конструктор


=== meta

устанавливает метаинформацию для филдсета


=== setup

запускаем сетап


=== setup_on

устанавливаем обработчики событий


=== setup_on_args

устанавливаем обработчики событий c указанного класса и с доп-аргументами


=== model

модель


=== field

возвращает все филды или один по имени


=== import

импортирует поля из указанного филдсета


=== extends

расширяет модель другой


=== rename

указывает, что столбец был переименован c from, где from - наименование столбца в базе 


=== last

возвращает последний филд


=== charset

добавляет в последний столбец charset:collate, если ":" не будет, то collate будет взято из _: utf8_unicode_ci => utf8:utf8_unicode_ci


=== col_name

указывает имя поля в базе


=== compute

добавляет вычислимый столбец


=== col

добавляет поле


=== ref

добавляет поле-ссылку


=== one

обавляет поле-ссылку один-к-одному
user.id -> everUser.id (assign) everUser.ever -> ever.id (one)
everUser.ever <- ever.everUser


=== assign

добавляет столбец один-к-одному. Должен быть после столбца, который будет его представлять
обычно используется для связи id-to-id


=== m2m

ссылка многие-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== m2n

ссылка многие-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== n2m

ссылка один-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== n2n

ссылка многие-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== now

частоиспользуемое поле - время добавления


=== upd

частоиспользуемое поле - время изменения


=== refset

добавляет функцию возвращающую запрос на множество объектов, к-е могут быть вставлены в это поле


=== check

добавляет валидатор или преобразователь


=== input

добавляет тип виджета


=== pk

возвращает, добавляет или удаляет pk


=== autoincrement

добавляет автоинкремент


=== null

делает филд нулевым


=== require

делает филд обязательным


=== required



=== need



=== default

добавляет значение по умолчанию к последнему филду


=== default_raw



=== extra

добавляет текст в описание столбца. Только для col


=== remark

добавляет комментарий к последнему филду


=== _add_index



=== primary_key



=== index



=== unique



=== fulltext



=== spatial



=== mult

мультииндекс - создаёт таблицу, которая будет служить индексом.
принимает 1-й параметр: строка-запрос или запрос в функции
и имена столбцов с весами
полнотекстовый поиск осуществляется с помощью присоединённой таблицы words


=== weight



=== attach

присоединяет столбец другой таблицы
можно объединять только col и ref


=== associate

объединяет столбец со столбцом из другой таблицы
при изменении значения в любом из столбцов изменяется и в ассоциированом
можно объединять только col и ref


=== match

добавляет полнотекстовый индекс для таблицы


=== counter

создаёт поле-счётчик для подсчитывания ссылок


=== recalc

пересчитывает счётчики в таблице


=== end

просто для окончания, чтобы можно было столбец закомментировать


=== data

в новую таблицу добавляются обязательные данные


=== testdata

в новую таблицу добавляются тестовые данные


=== run_data

запускает данные


=== col_keys

возвращает имена столбцов таблицы


=== connect

возвращает коннект таблицы


=== existsTab

проверяет, что в базе есть таблица. По умолчанию - своя


=== existsCol

проверяет, что в базе есть колумн. По умолчанию - последний


=== after

после столбца - устанавливается перед cange


=== change

синхронизирует последний столбец


=== sync

синхронизация таблицы


=== presync

создание sql для синхронизации таблицы и всех связанных таблиц


=== drop_relation

если есть fk зависящие от удаляемых ключей или изменяемых столбцов, то - удаляем их
параметры - столбцы


=== autoinctrement_get

возвращает значение автоинкремента таблицы


=== autoinctrement_set

устанавливает значение автоинкремента таблицы


=== autoincrement_inc

инкрементирует автоинкремент на указанное количество и возвращает последний id


=== sql

возвращает дополнительные опции таблицы, которые можно использовать в alter table


=== alter

возвращает alter table для таблицы (не для столбцов)


=== create_table

возвращает create table


=== sql_rename



=== rename



=== drop

удаляет таблицу




=== _inspect

проверяет, что есть такой обработчик


=== new

конструктор


=== meta

устанавливает метаинформацию для филдсета


=== setup

запускаем сетап


=== setup_on

устанавливаем обработчики событий


=== setup_on_args

устанавливаем обработчики событий c указанного класса и с доп-аргументами


=== model

модель


=== field

возвращает все филды или один по имени


=== import

импортирует поля из указанного филдсета


=== extends

расширяет модель другой


=== rename

указывает, что столбец был переименован c from, где from - наименование столбца в базе 


=== last

возвращает последний филд


=== charset

добавляет в последний столбец charset:collate, если ":" не будет, то collate будет взято из _: utf8_unicode_ci => utf8:utf8_unicode_ci


=== col_name

указывает имя поля в базе


=== compute

добавляет вычислимый столбец


=== col

добавляет поле


=== ref

добавляет поле-ссылку


=== one

обавляет поле-ссылку один-к-одному
user.id -> everUser.id (assign) everUser.ever -> ever.id (one)
everUser.ever <- ever.everUser


=== assign

добавляет столбец один-к-одному. Должен быть после столбца, который будет его представлять
обычно используется для связи id-to-id


=== m2m

ссылка многие-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== m2n

ссылка многие-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== n2m

ссылка один-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== n2n

ссылка многие-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== now

частоиспользуемое поле - время добавления


=== upd

частоиспользуемое поле - время изменения


=== refset

добавляет функцию возвращающую запрос на множество объектов, к-е могут быть вставлены в это поле


=== check

добавляет валидатор или преобразователь


=== input

добавляет тип виджета


=== pk

возвращает, добавляет или удаляет pk


=== autoincrement

добавляет автоинкремент


=== null

делает филд нулевым


=== require

делает филд обязательным


=== required




=== need




=== default

добавляет значение по умолчанию к последнему филду


=== default_raw




=== extra

добавляет текст в описание столбца. Только для col


=== remark

добавляет комментарий к последнему филду


=== _add_index




=== primary_key




=== index




=== unique




=== fulltext




=== spatial




=== mult

мультииндекс - создаёт таблицу, которая будет служить индексом.
принимает 1-й параметр: строка-запрос или запрос в функции
и имена столбцов с весами
полнотекстовый поиск осуществляется с помощью присоединённой таблицы words


=== weight




=== attach

присоединяет столбец другой таблицы
можно объединять только col и ref


=== associate

объединяет столбец со столбцом из другой таблицы
при изменении значения в любом из столбцов изменяется и в ассоциированом
можно объединять только col и ref


=== match

добавляет полнотекстовый индекс для таблицы


=== counter

создаёт поле-счётчик для подсчитывания ссылок


=== recalc

пересчитывает счётчики в таблице


=== end

просто для окончания, чтобы можно было столбец закомментировать


=== data

в новую таблицу добавляются обязательные данные


=== testdata

в новую таблицу добавляются тестовые данные


=== run_data

запускает данные


=== col_keys

возвращает имена столбцов таблицы


=== connect

возвращает коннект таблицы


=== existsTab

проверяет, что в базе есть таблица. По умолчанию - своя


=== existsCol

проверяет, что в базе есть колумн. По умолчанию - последний


=== after

после столбца - устанавливается перед cange


=== change

синхронизирует последний столбец


=== sync

синхронизация таблицы


=== presync

создание sql для синхронизации таблицы и всех связанных таблиц


=== drop_relation

если есть fk зависящие от удаляемых ключей или изменяемых столбцов, то - удаляем их
параметры - столбцы


=== autoinctrement_get

возвращает значение автоинкремента таблицы


=== autoinctrement_set

устанавливает значение автоинкремента таблицы


=== autoincrement_inc

инкрементирует автоинкремент на указанное количество и возвращает последний id


=== sql

возвращает дополнительные опции таблицы, которые можно использовать в alter table


=== alter

возвращает alter table для таблицы (не для столбцов)


=== create_table

возвращает create table


=== sql_rename




=== rename




=== drop

удаляет таблицу




=== _inspect

проверяет, что есть такой обработчик


=== new

конструктор


=== meta

устанавливает метаинформацию для филдсета


=== setup

запускаем сетап


=== setup_on

устанавливаем обработчики событий


=== setup_on_args

устанавливаем обработчики событий c указанного класса и с доп-аргументами


=== model

модель


=== field

возвращает все филды или один по имени


=== import

импортирует поля из указанного филдсета


=== extends

расширяет модель другой


=== rename

указывает, что столбец был переименован c from, где from - наименование столбца в базе 


=== last

возвращает последний филд


=== charset

добавляет в последний столбец charset:collate, если ":" не будет, то collate будет взято из _: utf8_unicode_ci => utf8:utf8_unicode_ci


=== col_name

указывает имя поля в базе


=== compute

добавляет вычислимый столбец


=== col

добавляет поле


=== ref

добавляет поле-ссылку


=== one

обавляет поле-ссылку один-к-одному
user.id -> everUser.id (assign) everUser.ever -> ever.id (one)
everUser.ever <- ever.everUser


=== assign

добавляет столбец один-к-одному. Должен быть после столбца, который будет его представлять
обычно используется для связи id-to-id


=== m2m

ссылка многие-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== m2n

ссылка многие-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== n2m

ссылка один-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== n2n

ссылка многие-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== now

частоиспользуемое поле - время добавления


=== upd

частоиспользуемое поле - время изменения


=== refset

добавляет функцию возвращающую запрос на множество объектов, к-е могут быть вставлены в это поле


=== check

добавляет валидатор или преобразователь


=== input

добавляет тип виджета


=== pk

возвращает, добавляет или удаляет pk


=== autoincrement

добавляет автоинкремент


=== null

делает филд нулевым


=== require

делает филд обязательным


=== required




=== need




=== default

добавляет значение по умолчанию к последнему филду


=== default_raw




=== extra

добавляет текст в описание столбца. Только для col


=== remark

добавляет комментарий к последнему филду


=== _add_index




=== primary_key




=== index




=== unique




=== fulltext




=== spatial




=== mult

мультииндекс - создаёт таблицу, которая будет служить индексом.
принимает 1-й параметр: строка-запрос или запрос в функции
и имена столбцов с весами
полнотекстовый поиск осуществляется с помощью присоединённой таблицы words


=== weight




=== attach

присоединяет столбец другой таблицы
можно объединять только col и ref


=== associate

объединяет столбец со столбцом из другой таблицы
при изменении значения в любом из столбцов изменяется и в ассоциированом
можно объединять только col и ref


=== match

добавляет полнотекстовый индекс для таблицы


=== counter

создаёт поле-счётчик для подсчитывания ссылок


=== recalc

пересчитывает счётчики в таблице


=== end

просто для окончания, чтобы можно было столбец закомментировать


=== data

в новую таблицу добавляются обязательные данные


=== testdata

в новую таблицу добавляются тестовые данные


=== run_data

запускает данные


=== col_keys

возвращает имена столбцов таблицы


=== connect

возвращает коннект таблицы


=== existsTab

проверяет, что в базе есть таблица. По умолчанию - своя


=== existsCol

проверяет, что в базе есть колумн. По умолчанию - последний


=== after

после столбца - устанавливается перед cange


=== change

синхронизирует последний столбец


=== sync

синхронизация таблицы


=== presync

создание sql для синхронизации таблицы и всех связанных таблиц


=== drop_relation

если есть fk зависящие от удаляемых ключей или изменяемых столбцов, то - удаляем их
параметры - столбцы


=== autoinctrement_get

возвращает значение автоинкремента таблицы


=== autoinctrement_set

устанавливает значение автоинкремента таблицы


=== autoincrement_inc

инкрементирует автоинкремент на указанное количество и возвращает последний id


=== sql

возвращает дополнительные опции таблицы, которые можно использовать в alter table


=== alter

возвращает alter table для таблицы (не для столбцов)


=== create_table

возвращает create table


=== sql_rename




=== rename




=== drop

удаляет таблицу




=== _inspect

проверяет, что есть такой обработчик


=== new

конструктор


=== meta

устанавливает метаинформацию для филдсета


=== setup

запускаем сетап


=== setup_on

устанавливаем обработчики событий


=== setup_on_args

устанавливаем обработчики событий c указанного класса и с доп-аргументами


=== model

модель


=== field

возвращает все филды или один по имени


=== import

импортирует поля из указанного филдсета


=== extends

расширяет модель другой


=== rename

указывает, что столбец был переименован c from, где from - наименование столбца в базе 


=== last

возвращает последний филд


=== charset

добавляет в последний столбец charset:collate, если ":" не будет, то collate будет взято из _: utf8_unicode_ci => utf8:utf8_unicode_ci


=== col_name

указывает имя поля в базе


=== compute

добавляет вычислимый столбец


=== col

добавляет поле


=== ref

добавляет поле-ссылку


=== one

обавляет поле-ссылку один-к-одному
user.id -> everUser.id (assign) everUser.ever -> ever.id (one)
everUser.ever <- ever.everUser


=== assign

добавляет столбец один-к-одному. Должен быть после столбца, который будет его представлять
обычно используется для связи id-to-id


=== m2m

ссылка многие-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== m2n

ссылка многие-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== n2m

ссылка один-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== n2n

ссылка многие-ко-многим
$name - имя филда m2m
$to_model - имя модели
$name_from_model - имя обратной связи в $to_model
$m2m_model - имя модели-связи
$alias1 - название ref на себя
$alias2 - название ref на модель


=== now

частоиспользуемое поле - время добавления


=== upd

частоиспользуемое поле - время изменения


=== refset

добавляет функцию возвращающую запрос на множество объектов, к-е могут быть вставлены в это поле


=== check

добавляет валидатор или преобразователь


=== input

добавляет тип виджета


=== pk

возвращает, добавляет или удаляет pk


=== autoincrement

добавляет автоинкремент


=== null

делает филд нулевым


=== require

делает филд обязательным


=== required




=== need




=== default

добавляет значение по умолчанию к последнему филду


=== default_raw




=== extra

добавляет текст в описание столбца. Только для col


=== remark

добавляет комментарий к последнему филду


=== _add_index




=== primary_key




=== index




=== unique




=== fulltext




=== spatial




=== mult

мультииндекс - создаёт таблицу, которая будет служить индексом.
принимает 1-й параметр: строка-запрос или запрос в функции
и имена столбцов с весами
полнотекстовый поиск осуществляется с помощью присоединённой таблицы words


=== weight




=== attach

присоединяет столбец другой таблицы
можно объединять только col и ref


=== associate

объединяет столбец со столбцом из другой таблицы
при изменении значения в любом из столбцов изменяется и в ассоциированом
можно объединять только col и ref


=== match

добавляет полнотекстовый индекс для таблицы


=== counter

создаёт поле-счётчик для подсчитывания ссылок


=== recalc

пересчитывает счётчики в таблице


=== end

просто для окончания, чтобы можно было столбец закомментировать


=== data

в новую таблицу добавляются обязательные данные


=== testdata

в новую таблицу добавляются тестовые данные


=== run_data

запускает данные


=== col_keys

возвращает имена столбцов таблицы


=== connect

возвращает коннект таблицы


=== existsTab

проверяет, что в базе есть таблица. По умолчанию - своя


=== existsCol

проверяет, что в базе есть колумн. По умолчанию - последний


=== after

после столбца - устанавливается перед cange


=== change

синхронизирует последний столбец


=== sync

синхронизация таблицы


=== presync

создание sql для синхронизации таблицы и всех связанных таблиц


=== drop_relation

если есть fk зависящие от удаляемых ключей или изменяемых столбцов, то - удаляем их
параметры - столбцы


=== autoinctrement_get

возвращает значение автоинкремента таблицы


=== autoinctrement_set

устанавливает значение автоинкремента таблицы


=== autoincrement_inc

инкрементирует автоинкремент на указанное количество и возвращает последний id


=== sql

возвращает дополнительные опции таблицы, которые можно использовать в alter table


=== alter

возвращает alter table для таблицы (не для столбцов)


=== create_table

возвращает create table


=== sql_rename




=== rename




=== drop

удаляет таблицу


== R::Model::Index

описывает индекс базы данных
== R::Model::Index

описывает индекс базы данных


=== new

конструктор


=== tab

возвращает таблицу


=== connect

возвращает коннект


=== index

перечисление столбцов


=== sql

для тела таблицы


=== alter

изменение ключа


=== drop

удаление ключа


=== sync

синхронизация с базой




=== new

конструктор


=== tab

возвращает таблицу


=== connect

возвращает коннект


=== index

перечисление столбцов


=== sql

для тела таблицы


=== alter

изменение ключа


=== drop

удаление ключа


=== sync

синхронизация с базой




=== new

конструктор


=== tab

возвращает таблицу


=== connect

возвращает коннект


=== index

перечисление столбцов


=== sql

для тела таблицы


=== alter

изменение ключа


=== drop

удаление ключа


=== sync

синхронизация с базой




=== new

конструктор


=== tab

возвращает таблицу


=== connect

возвращает коннект


=== index

перечисление столбцов


=== sql

для тела таблицы


=== alter

изменение ключа


=== drop

удаление ключа


=== sync

синхронизация с базой


== R::Model::Indexref

внешний ключ
== R::Model::Indexref

внешний ключ


=== new

конструктор


=== tab

возвращает таблицу


=== fieldset

возвращает fieldset


=== connect

возвращает connect


=== sql

для таблицы


=== drop

удаление из базы


=== sync

синхронизация с базой




=== new

конструктор


=== tab

возвращает таблицу


=== fieldset

возвращает fieldset


=== connect

возвращает connect


=== sql

для таблицы


=== drop

удаление из базы


=== sync

синхронизация с базой




=== new

конструктор


=== tab

возвращает таблицу


=== fieldset

возвращает fieldset


=== connect

возвращает connect


=== sql

для таблицы


=== drop

удаление из базы


=== sync

синхронизация с базой




=== new

конструктор


=== tab

возвращает таблицу


=== fieldset

возвращает fieldset


=== connect

возвращает connect


=== sql

для таблицы


=== drop

удаление из базы


=== sync

синхронизация с базой


== R::Model::Metafieldset

база данных
== R::Model::Metafieldset

база данных


=== new

конструктор


=== close

закрывает метаописание


=== fieldset

создаёт и возвращает новую таблицу


=== meta

устанавливает метаинформацию для базы


=== exists

проверяет на существование филдсет по имени и возвращает его, если тот есть


=== existsTab

проверяет таблицу на существование


=== existsCol

проверяет колумн на существование


=== _inspect

проверяет, что есть такой обработчик


=== on

устанавливает обработчик события на мету


=== fire

возбуждает событие на мете


=== on_exists

проверяет - установлено ли событие


=== load_all_models

загружает все модели


=== create

запускает setup, если такого филдсета нет
филдсет в сетап передаётся и параметром и в $_


=== getUIntType

возвращает текстовый тип для базы по размеру


=== getTextType

возвращает текстовый тип для базы по размеру


=== sync_for_script

синхронизация используемая в скриптах - запрашивает 


=== sync

синхронизирует базу


=== presync

формирует запросы для синхронизации базы


=== syncing

синхронизация после presync


=== synced

выполняем функции синхронизации в установленном порядке 


=== sql

sql для опций БД


=== alter

sql для alter database


=== create_database

sql для создания БД


=== database

если такой БД нет - создаёт и переключает на неё (???)


=== drop

удаляет базу


=== down

сгружает в указанную директорию структуру базы в виде моделей
Создаётся папка с именем базы


=== setup

вызывается для создания структуры базы


=== testdata

тестовые данные


=== declare_col

возвращает код представления модели в setup


=== declare_tab

декларирует информацию о таблице




=== new

конструктор




=== new

конструктор




=== new

конструктор


== R::Model


== R::Model

app->model->mymodel


=== new

конструктор


=== Metafieldset

возвращает мету


=== AUTOLOAD

возвращает модель


=== DESTROY





=== close

закрывает метаописание


=== fieldset

создаёт и возвращает новую таблицу


=== meta

устанавливает метаинформацию для базы


=== exists

проверяет на существование филдсет по имени и возвращает его, если тот есть


=== existsTab

проверяет таблицу на существование


=== existsCol

проверяет колумн на существование


=== _inspect

проверяет, что есть такой обработчик


=== on

устанавливает обработчик события на мету


=== fire

возбуждает событие на мете


=== on_exists

проверяет - установлено ли событие


=== load_all_models

загружает все модели


=== create

запускает setup, если такого филдсета нет
филдсет в сетап передаётся и параметром и в $_


=== getUIntType

возвращает текстовый тип для базы по размеру


=== getTextType

возвращает текстовый тип для базы по размеру


=== sync_for_script

синхронизация используемая в скриптах - запрашивает 


=== sync

синхронизирует базу


=== presync

формирует запросы для синхронизации базы


=== syncing

синхронизация после presync


=== synced

выполняем функции синхронизации в установленном порядке 


=== sql

sql для опций БД


=== alter

sql для alter database


=== create_database

sql для создания БД


=== database

если такой БД нет - создаёт и переключает на неё (???)


=== drop

удаляет базу


=== down

сгружает в указанную директорию структуру базы в виде моделей
Создаётся папка с именем базы




=== close

закрывает метаописание


=== fieldset

создаёт и возвращает новую таблицу


=== meta

устанавливает метаинформацию для базы


=== exists

проверяет на существование филдсет по имени и возвращает его, если тот есть


=== existsTab

проверяет таблицу на существование


=== existsCol

проверяет колумн на существование


=== _inspect

проверяет, что есть такой обработчик


=== on

устанавливает обработчик события на мету


=== fire

возбуждает событие на мете


=== on_exists

проверяет - установлено ли событие


=== load_all_models

загружает все модели


=== create

запускает setup, если такого филдсета нет
филдсет в сетап передаётся и параметром и в $_


=== getUIntType

возвращает текстовый тип для базы по размеру


=== getTextType

возвращает текстовый тип для базы по размеру


=== sync_for_script

синхронизация используемая в скриптах - запрашивает 


=== sync

синхронизирует базу


=== presync

формирует запросы для синхронизации базы


=== syncing

синхронизация после presync


=== synced

выполняем функции синхронизации в установленном порядке 


=== sql

sql для опций БД


=== alter

sql для alter database


=== create_database

sql для создания БД


=== database

если такой БД нет - создаёт и переключает на неё (???)


=== drop

удаляет базу


=== down

сгружает в указанную директорию структуру базы в виде моделей
Создаётся папка с именем базы




=== close

закрывает метаописание


=== fieldset

создаёт и возвращает новую таблицу


=== meta

устанавливает метаинформацию для базы


=== exists

проверяет на существование филдсет по имени и возвращает его, если тот есть


=== existsTab

проверяет таблицу на существование


=== existsCol

проверяет колумн на существование


=== _inspect

проверяет, что есть такой обработчик


=== on

устанавливает обработчик события на мету


=== fire

возбуждает событие на мете


=== on_exists

проверяет - установлено ли событие


=== load_all_models

загружает все модели


=== create

запускает setup, если такого филдсета нет
филдсет в сетап передаётся и параметром и в $_


=== getUIntType

возвращает текстовый тип для базы по размеру


=== getTextType

возвращает текстовый тип для базы по размеру


=== sync_for_script

синхронизация используемая в скриптах - запрашивает 


=== sync

синхронизирует базу


=== presync

формирует запросы для синхронизации базы


=== syncing

синхронизация после presync


=== synced

выполняем функции синхронизации в установленном порядке 


=== sql

sql для опций БД


=== alter

sql для alter database


=== create_database

sql для создания БД


=== database

если такой БД нет - создаёт и переключает на неё (???)


=== drop

удаляет базу


=== down

сгружает в указанную директорию структуру базы в виде моделей
Создаётся папка с именем базы


== R::Row::


== R::Row::



=== setup

вызывается для создания структуры базы


=== testdata

тестовые данные


=== declare_col

возвращает код представления модели в setup


=== declare_tab

декларирует информацию о таблице




=== setup

вызывается для создания структуры базы


=== testdata

тестовые данные


=== declare_col

возвращает код представления модели в setup


=== declare_tab

декларирует информацию о таблице




=== setup

вызывается для создания структуры базы


=== testdata

тестовые данные


=== declare_col

возвращает код представления модели в setup


=== declare_tab

декларирует информацию о таблице


== R::Model::Row

наследный класс для моделей. Представляет запись
== R::Model::Row

наследный класс для моделей. Представляет запись


=== new

конструктор
app->model->модель или model->m2m->new или model->back->new


=== DESTROY

деструктор


=== FromHash



=== update

добавляет элементы


=== touch

обновляет запись, если есть id


=== id

возвращает/устанавливает идентификатор


=== view

добавляет поля, которые должны запроситься при первом запросе
compute-поля отбрасываются
если compute-поле зависит от другого поля - устанавливается и другое поле


=== annotate

возвращает хэш с указанными полями. Поля могут быть любыми - так же и вычисляемыми


=== saveAs

сохраняет в указанный идентификатор


=== save

сохраняет, если есть что


=== AfterSave

очищает save после сохранения


=== store

сохраняет - смотрит, есть ли с таким id запись и обязательно сохраняет, даже если нет $self->{save}


=== CacheKey

формирует ключ кеша


=== CacheSet

устанавливает


=== CacheGet

возвращает


=== CacheExists

проверяет


=== CacheDel

удаляет


=== CacheClear

удаляет запись


=== CacheUpdate

апдейтит записи


=== New

применяется в событии update, но в событии updated - нет
возвращает копию объекта, которая будет возвращать немодифицированные, а реальные поля


=== Old

применяется в событии update, но в событии updated - нет
возвращает копию объекта, которая будет возвращать немодифицированные, а реальные поля


=== Real

удаляет кэш val и save


=== replace



=== ToCol

помощник


=== erase

удаляет строку


=== exists

проверяет sql-запросом, существует ли запись


=== left

возвращает подстроку поля


=== right

возвращает подстроку поля


=== mid

возвращает подстроку поля


=== annonce

строчное представление объекта


=== annonce_href

uri на страницу объекта


=== annonce_img

объект img, представляющий объект - ава, логотип и т.д.


=== sync



=== onCreate



=== onDrop



=== onAdd



=== onUpdate



=== onSave



=== onErase





=== new

конструктор
app->model->модель или model->m2m->new или model->back->new


=== DESTROY

деструктор


=== FromHash




=== update

добавляет элементы


=== touch

обновляет запись, если есть id


=== id

возвращает/устанавливает идентификатор


=== view

добавляет поля, которые должны запроситься при первом запросе
compute-поля отбрасываются
если compute-поле зависит от другого поля - устанавливается и другое поле


=== annotate

возвращает хэш с указанными полями. Поля могут быть любыми - так же и вычисляемыми


=== saveAs

сохраняет в указанный идентификатор


=== save

сохраняет, если есть что


=== AfterSave

очищает save после сохранения


=== store

сохраняет - смотрит, есть ли с таким id запись и обязательно сохраняет, даже если нет $self->{save}


=== CacheKey

формирует ключ кеша


=== CacheSet

устанавливает


=== CacheGet

возвращает


=== CacheExists

проверяет


=== CacheDel

удаляет


=== CacheClear

удаляет запись


=== CacheUpdate

апдейтит записи


=== New

применяется в событии update, но в событии updated - нет
возвращает копию объекта, которая будет возвращать немодифицированные, а реальные поля


=== Old

применяется в событии update, но в событии updated - нет
возвращает копию объекта, которая будет возвращать немодифицированные, а реальные поля


=== Real

удаляет кэш val и save


=== replace




=== ToCol

помощник


=== erase

удаляет строку


=== exists

проверяет sql-запросом, существует ли запись


=== left

возвращает подстроку поля


=== right

возвращает подстроку поля


=== mid

возвращает подстроку поля


=== annonce

строчное представление объекта


=== annonce_href

uri на страницу объекта


=== annonce_img

объект img, представляющий объект - ава, логотип и т.д.


=== sync




=== onCreate




=== onDrop




=== onAdd




=== onUpdate




=== onSave




=== onErase






=== new

конструктор
app->model->модель или model->m2m->new или model->back->new


=== DESTROY

деструктор


=== FromHash




=== update

добавляет элементы


=== touch

обновляет запись, если есть id


=== id

возвращает/устанавливает идентификатор


=== view

добавляет поля, которые должны запроситься при первом запросе
compute-поля отбрасываются
если compute-поле зависит от другого поля - устанавливается и другое поле


=== annotate

возвращает хэш с указанными полями. Поля могут быть любыми - так же и вычисляемыми


=== saveAs

сохраняет в указанный идентификатор


=== save

сохраняет, если есть что


=== AfterSave

очищает save после сохранения


=== store

сохраняет - смотрит, есть ли с таким id запись и обязательно сохраняет, даже если нет $self->{save}


=== CacheKey

формирует ключ кеша


=== CacheSet

устанавливает


=== CacheGet

возвращает


=== CacheExists

проверяет


=== CacheDel

удаляет


=== CacheClear

удаляет запись


=== CacheUpdate

апдейтит записи


=== New

применяется в событии update, но в событии updated - нет
возвращает копию объекта, которая будет возвращать немодифицированные, а реальные поля


=== Old

применяется в событии update, но в событии updated - нет
возвращает копию объекта, которая будет возвращать немодифицированные, а реальные поля


=== Real

удаляет кэш val и save


=== replace




=== ToCol

помощник


=== erase

удаляет строку


=== exists

проверяет sql-запросом, существует ли запись


=== left

возвращает подстроку поля


=== right

возвращает подстроку поля


=== mid

возвращает подстроку поля


=== annonce

строчное представление объекта


=== annonce_href

uri на страницу объекта


=== annonce_img

объект img, представляющий объект - ава, логотип и т.д.


=== sync




=== onCreate




=== onDrop




=== onAdd




=== onUpdate




=== onSave




=== onErase






=== new

конструктор
app->model->модель или model->m2m->new или model->back->new


=== DESTROY

деструктор


=== FromHash




=== update

добавляет элементы


=== touch

обновляет запись, если есть id


=== id

возвращает/устанавливает идентификатор


=== view

добавляет поля, которые должны запроситься при первом запросе
compute-поля отбрасываются
если compute-поле зависит от другого поля - устанавливается и другое поле


=== annotate

возвращает хэш с указанными полями. Поля могут быть любыми - так же и вычисляемыми


=== saveAs

сохраняет в указанный идентификатор


=== save

сохраняет, если есть что


=== AfterSave

очищает save после сохранения


=== store

сохраняет - смотрит, есть ли с таким id запись и обязательно сохраняет, даже если нет $self->{save}


=== CacheKey

формирует ключ кеша


=== CacheSet

устанавливает


=== CacheGet

возвращает


=== CacheExists

проверяет


=== CacheDel

удаляет


=== CacheClear

удаляет запись


=== CacheUpdate

апдейтит записи


=== New

применяется в событии update, но в событии updated - нет
возвращает копию объекта, которая будет возвращать немодифицированные, а реальные поля


=== Old

применяется в событии update, но в событии updated - нет
возвращает копию объекта, которая будет возвращать немодифицированные, а реальные поля


=== Real

удаляет кэш val и save


=== replace




=== ToCol

помощник


=== erase

удаляет строку


=== exists

проверяет sql-запросом, существует ли запись


=== left

возвращает подстроку поля


=== right

возвращает подстроку поля


=== mid

возвращает подстроку поля


=== annonce

строчное представление объекта


=== annonce_href

uri на страницу объекта


=== annonce_img

объект img, представляющий объект - ава, логотип и т.д.


=== sync




=== onCreate




=== onDrop




=== onAdd




=== onUpdate




=== onSave




=== onErase




== R::Model::Rowset

наборы моделей
== R::Model::Rowset

наборы моделей


=== new

конструктор


=== DESTROY

деструктор


=== id

возвращает id


=== load

загружает запись. Если записи нет - устанавливает id в save


=== add

добавляет записи в m2m


=== addRet

добавляет и возвращает


=== del

удаляет записи из m2m


=== clean

очищает связь m2m


=== _clone

создаёт копию себя заменяя ключи


=== distinct

добавляет в select distinct


=== union

объединяет несколько запросов через UNION ALL


=== find

выбирает записи. Возвращает массив моделей или копию себя


=== and

оборачивает существующий find в скобки и добавляет указанный find


=== or

оборачивает существующий find в скобки и добавляет указанный find через OR


=== replace_find

заменяет find


=== view

выбирает много столбцов


=== replace_view

заменяет мшуp


=== select

можно указать выборку как текст


=== order

сортировка записей


=== append_order

добавление сортировки записей


=== prepend_order

добавление сортировки записей в начало сортировки


=== offset

offset


=== limit

limit


=== wrap_find

оборачивает find в скобки


=== wrap_having

оборачивает having в скобки


=== wrap_aggregate

оборачивает aggregate в скобки


=== page_query

выборка страницы начиная с 1


=== pages_count

количество страниц


=== page_from_limit



=== _form_page

выборка страницы начиная с id


=== page

выборка страницы начиная с id


=== prev_page

возвращает запрос для выборки предыдущей части страницы


=== next_page

возвращает запрос для выборки следующей части страницы


=== is_prev_page

возвращает [, id предыдущей страницы]


=== is_next_page

сообщает, что есть следующая страница


=== url_prev_page

url предыдущей страницы


=== url_next_page

url следующей страницы


=== _url_page

формирует url для страниц


=== qpage

выбирает по параметру и устанавливает параметр


=== match

производит полнотектовый поиск, а именно: добавляет в find поисковые условия и параметр relevance, который потом можно добавить в order("Relevance") или в annotate("Relevance") или aggregate("Relevance") или извлечь из rowset и вставить в select: 


=== relevance

добавляет релевантность: столбец, чему равно, вес


=== __FN__

основная функция для count, max и др. функций агрегации


=== count

количество записей


=== sum

и так понятно:


=== avg



=== max



=== min



=== groupby

добавляет group by


=== having

добавляет having


=== aggregate

добавляет группировку одновременно с having


=== annotate

выдаёт аннотацию - хэш с данными и произвольными полями


=== annotates

возвращает в виде массива, а не хэша


=== into

вставить выбранные записи в указанную таблицу


=== deep_into

предназначен для быстрого копирования. Он сбрасывает кэш.


=== insert

вставить в таблицу группу записей
записи могут быть: хешами, массивами или объектами этого филдсета. В последнем случае у объектов должна быть установлена save


=== update

проапдейтить записи


=== deep_update

быстрый update. Срабатывает, если нет записей


=== erase

удалить выбранные записи


=== deep_erase

быстрое удаление


=== effected_rows

возвращает количество записей изменённых предшествующим insert, into, update, erase, add или del


=== merge

модифицирует запрос так, чтобы переданный массив совпадал (store ?)


=== rows

выдать в виде массива


=== exists

если существует - выдаёт первую запись, иначе - undef


=== by

возвращает хэш field => row


=== refby

как и by, но ссылку на хэш


=== annotateby

возвращает хэш field => {annotate}


=== annotaterefby

как и annotateby, но ссылку на хэш


=== query

возвращает select-запрос


=== explain

возвращает explain


=== analyse

возвращает анализ данных


=== lj

устанавливает дефолтный left join (1), а не inner join (undef)


=== ij

устанавливает дефолтный inner join (undef), а не left join (1)


=== asis

возвращает себя как скаляр в любом контексте


=== share

создаёт блокировку чтения


=== for_update

создаёт блокировку чтения


=== cache

кэширует результат


=== as

помечает запрос, как подзапрос в sql-запросе.
например: ... FROM (SELECT a, b FROM ...) AS A
или SELECT (SELECT a, b FROM ...) as A
!!!
недоделано - надо все поля в view добавить в fieldset, а так же алиас за скобкой заменять на А№, когда таблиц много
и при срабатывании деструктора - разрушить метаинформацию о таблице!
пока можно использовать для $query->as("tab")->count


=== _cache

кэширует, если надо


=== _array

возвращает массив массивов


=== _all

возвращает массив хешей


=== _col_ref

возвращает массив значений


=== _rows

возвращает beans


=== _bypass



=== _query

возвращает "сырой" sql-запрос


=== __filter

создаёт фильтр для where и having


=== _filter

фильтр для одного ключа-значения




=== new

конструктор


=== DESTROY

деструктор


=== id

возвращает id


=== load

загружает запись. Если записи нет - устанавливает id в save


=== add

добавляет записи в m2m


=== addRet

добавляет и возвращает


=== del

удаляет записи из m2m


=== clean

очищает связь m2m


=== _clone

создаёт копию себя заменяя ключи


=== distinct

добавляет в select distinct


=== union

объединяет несколько запросов через UNION ALL


=== find

выбирает записи. Возвращает массив моделей или копию себя


=== and

оборачивает существующий find в скобки и добавляет указанный find


=== or

оборачивает существующий find в скобки и добавляет указанный find через OR


=== replace_find

заменяет find


=== view

выбирает много столбцов


=== replace_view

заменяет мшуp


=== select

можно указать выборку как текст


=== order

сортировка записей


=== append_order

добавление сортировки записей


=== prepend_order

добавление сортировки записей в начало сортировки


=== offset

offset


=== limit

limit


=== wrap_find

оборачивает find в скобки


=== wrap_having

оборачивает having в скобки


=== wrap_aggregate

оборачивает aggregate в скобки


=== page_query

выборка страницы начиная с 1


=== pages_count

количество страниц


=== page_from_limit




=== _form_page

выборка страницы начиная с id


=== page

выборка страницы начиная с id


=== prev_page

возвращает запрос для выборки предыдущей части страницы


=== next_page

возвращает запрос для выборки следующей части страницы


=== is_prev_page

возвращает [, id предыдущей страницы]


=== is_next_page

сообщает, что есть следующая страница


=== url_prev_page

url предыдущей страницы


=== url_next_page

url следующей страницы


=== _url_page

формирует url для страниц


=== qpage

выбирает по параметру и устанавливает параметр


=== match

производит полнотектовый поиск, а именно: добавляет в find поисковые условия и параметр relevance, который потом можно добавить в order("Relevance") или в annotate("Relevance") или aggregate("Relevance") или извлечь из rowset и вставить в select: 


=== relevance

добавляет релевантность: столбец, чему равно, вес


=== __FN__

основная функция для count, max и др. функций агрегации


=== count

количество записей


=== sum

и так понятно:


=== avg




=== max




=== min




=== groupby

добавляет group by


=== having

добавляет having


=== aggregate

добавляет группировку одновременно с having


=== annotate

выдаёт аннотацию - хэш с данными и произвольными полями


=== annotates

возвращает в виде массива, а не хэша


=== into

вставить выбранные записи в указанную таблицу


=== deep_into

предназначен для быстрого копирования. Он сбрасывает кэш.


=== insert

вставить в таблицу группу записей
записи могут быть: хешами, массивами или объектами этого филдсета. В последнем случае у объектов должна быть установлена save


=== update

проапдейтить записи


=== deep_update

быстрый update. Срабатывает, если нет записей


=== erase

удалить выбранные записи


=== deep_erase

быстрое удаление


=== effected_rows

возвращает количество записей изменённых предшествующим insert, into, update, erase, add или del


=== merge

модифицирует запрос так, чтобы переданный массив совпадал (store ?)


=== rows

выдать в виде массива


=== exists

если существует - выдаёт первую запись, иначе - undef


=== by

возвращает хэш field => row


=== refby

как и by, но ссылку на хэш


=== annotateby

возвращает хэш field => {annotate}


=== annotaterefby

как и annotateby, но ссылку на хэш


=== query

возвращает select-запрос


=== explain

возвращает explain


=== analyse

возвращает анализ данных


=== lj

устанавливает дефолтный left join (1), а не inner join (undef)


=== ij

устанавливает дефолтный inner join (undef), а не left join (1)


=== asis

возвращает себя как скаляр в любом контексте


=== share

создаёт блокировку чтения


=== for_update

создаёт блокировку чтения


=== cache

кэширует результат


=== as

помечает запрос, как подзапрос в sql-запросе.
например: ... FROM (SELECT a, b FROM ...) AS A
или SELECT (SELECT a, b FROM ...) as A
!!!
недоделано - надо все поля в view добавить в fieldset, а так же алиас за скобкой заменять на А№, когда таблиц много
и при срабатывании деструктора - разрушить метаинформацию о таблице!
пока можно использовать для $query->as("tab")->count


=== _cache

кэширует, если надо


=== _array

возвращает массив массивов


=== _all

возвращает массив хешей


=== _col_ref

возвращает массив значений


=== _rows

возвращает beans


=== _bypass




=== _query

возвращает "сырой" sql-запрос


=== __filter

создаёт фильтр для where и having


=== _filter

фильтр для одного ключа-значения




=== new

конструктор


=== DESTROY

деструктор


=== id

возвращает id


=== load

загружает запись. Если записи нет - устанавливает id в save


=== add

добавляет записи в m2m


=== addRet

добавляет и возвращает


=== del

удаляет записи из m2m


=== clean

очищает связь m2m


=== _clone

создаёт копию себя заменяя ключи


=== distinct

добавляет в select distinct


=== union

объединяет несколько запросов через UNION ALL


=== find

выбирает записи. Возвращает массив моделей или копию себя


=== and

оборачивает существующий find в скобки и добавляет указанный find


=== or

оборачивает существующий find в скобки и добавляет указанный find через OR


=== replace_find

заменяет find


=== view

выбирает много столбцов


=== replace_view

заменяет мшуp


=== select

можно указать выборку как текст


=== order

сортировка записей


=== append_order

добавление сортировки записей


=== prepend_order

добавление сортировки записей в начало сортировки


=== offset

offset


=== limit

limit


=== wrap_find

оборачивает find в скобки


=== wrap_having

оборачивает having в скобки


=== wrap_aggregate

оборачивает aggregate в скобки


=== page_query

выборка страницы начиная с 1


=== pages_count

количество страниц


=== page_from_limit




=== _form_page

выборка страницы начиная с id


=== page

выборка страницы начиная с id


=== prev_page

возвращает запрос для выборки предыдущей части страницы


=== next_page

возвращает запрос для выборки следующей части страницы


=== is_prev_page

возвращает [, id предыдущей страницы]


=== is_next_page

сообщает, что есть следующая страница


=== url_prev_page

url предыдущей страницы


=== url_next_page

url следующей страницы


=== _url_page

формирует url для страниц


=== qpage

выбирает по параметру и устанавливает параметр


=== match

производит полнотектовый поиск, а именно: добавляет в find поисковые условия и параметр relevance, который потом можно добавить в order("Relevance") или в annotate("Relevance") или aggregate("Relevance") или извлечь из rowset и вставить в select: 


=== relevance

добавляет релевантность: столбец, чему равно, вес


=== __FN__

основная функция для count, max и др. функций агрегации


=== count

количество записей


=== sum

и так понятно:


=== avg




=== max




=== min




=== groupby

добавляет group by


=== having

добавляет having


=== aggregate

добавляет группировку одновременно с having


=== annotate

выдаёт аннотацию - хэш с данными и произвольными полями


=== annotates

возвращает в виде массива, а не хэша


=== into

вставить выбранные записи в указанную таблицу


=== deep_into

предназначен для быстрого копирования. Он сбрасывает кэш.


=== insert

вставить в таблицу группу записей
записи могут быть: хешами, массивами или объектами этого филдсета. В последнем случае у объектов должна быть установлена save


=== update

проапдейтить записи


=== deep_update

быстрый update. Срабатывает, если нет записей


=== erase

удалить выбранные записи


=== deep_erase

быстрое удаление


=== effected_rows

возвращает количество записей изменённых предшествующим insert, into, update, erase, add или del


=== merge

модифицирует запрос так, чтобы переданный массив совпадал (store ?)


=== rows

выдать в виде массива


=== exists

если существует - выдаёт первую запись, иначе - undef


=== by

возвращает хэш field => row


=== refby

как и by, но ссылку на хэш


=== annotateby

возвращает хэш field => {annotate}


=== annotaterefby

как и annotateby, но ссылку на хэш


=== query

возвращает select-запрос


=== explain

возвращает explain


=== analyse

возвращает анализ данных


=== lj

устанавливает дефолтный left join (1), а не inner join (undef)


=== ij

устанавливает дефолтный inner join (undef), а не left join (1)


=== asis

возвращает себя как скаляр в любом контексте


=== share

создаёт блокировку чтения


=== for_update

создаёт блокировку чтения


=== cache

кэширует результат


=== as

помечает запрос, как подзапрос в sql-запросе.
например: ... FROM (SELECT a, b FROM ...) AS A
или SELECT (SELECT a, b FROM ...) as A
!!!
недоделано - надо все поля в view добавить в fieldset, а так же алиас за скобкой заменять на А№, когда таблиц много
и при срабатывании деструктора - разрушить метаинформацию о таблице!
пока можно использовать для $query->as("tab")->count


=== _cache

кэширует, если надо


=== _array

возвращает массив массивов


=== _all

возвращает массив хешей


=== _col_ref

возвращает массив значений


=== _rows

возвращает beans


=== _bypass




=== _query

возвращает "сырой" sql-запрос


=== __filter

создаёт фильтр для where и having


=== _filter

фильтр для одного ключа-значения




=== new

конструктор


=== DESTROY

деструктор


=== id

возвращает id


=== load

загружает запись. Если записи нет - устанавливает id в save


=== add

добавляет записи в m2m


=== addRet

добавляет и возвращает


=== del

удаляет записи из m2m


=== clean

очищает связь m2m


=== _clone

создаёт копию себя заменяя ключи


=== distinct

добавляет в select distinct


=== union

объединяет несколько запросов через UNION ALL


=== find

выбирает записи. Возвращает массив моделей или копию себя


=== and

оборачивает существующий find в скобки и добавляет указанный find


=== or

оборачивает существующий find в скобки и добавляет указанный find через OR


=== replace_find

заменяет find


=== view

выбирает много столбцов


=== replace_view

заменяет мшуp


=== select

можно указать выборку как текст


=== order

сортировка записей


=== append_order

добавление сортировки записей


=== prepend_order

добавление сортировки записей в начало сортировки


=== offset

offset


=== limit

limit


=== wrap_find

оборачивает find в скобки


=== wrap_having

оборачивает having в скобки


=== wrap_aggregate

оборачивает aggregate в скобки


=== page_query

выборка страницы начиная с 1


=== pages_count

количество страниц


=== page_from_limit




=== _form_page

выборка страницы начиная с id


=== page

выборка страницы начиная с id


=== prev_page

возвращает запрос для выборки предыдущей части страницы


=== next_page

возвращает запрос для выборки следующей части страницы


=== is_prev_page

возвращает [, id предыдущей страницы]


=== is_next_page

сообщает, что есть следующая страница


=== url_prev_page

url предыдущей страницы


=== url_next_page

url следующей страницы


=== _url_page

формирует url для страниц


=== qpage

выбирает по параметру и устанавливает параметр


=== match

производит полнотектовый поиск, а именно: добавляет в find поисковые условия и параметр relevance, который потом можно добавить в order("Relevance") или в annotate("Relevance") или aggregate("Relevance") или извлечь из rowset и вставить в select: 


=== relevance

добавляет релевантность: столбец, чему равно, вес


=== __FN__

основная функция для count, max и др. функций агрегации


=== count

количество записей


=== sum

и так понятно:


=== avg




=== max




=== min




=== groupby

добавляет group by


=== having

добавляет having


=== aggregate

добавляет группировку одновременно с having


=== annotate

выдаёт аннотацию - хэш с данными и произвольными полями


=== annotates

возвращает в виде массива, а не хэша


=== into

вставить выбранные записи в указанную таблицу


=== deep_into

предназначен для быстрого копирования. Он сбрасывает кэш.


=== insert

вставить в таблицу группу записей
записи могут быть: хешами, массивами или объектами этого филдсета. В последнем случае у объектов должна быть установлена save


=== update

проапдейтить записи


=== deep_update

быстрый update. Срабатывает, если нет записей


=== erase

удалить выбранные записи


=== deep_erase

быстрое удаление


=== effected_rows

возвращает количество записей изменённых предшествующим insert, into, update, erase, add или del


=== merge

модифицирует запрос так, чтобы переданный массив совпадал (store ?)


=== rows

выдать в виде массива


=== exists

если существует - выдаёт первую запись, иначе - undef


=== by

возвращает хэш field => row


=== refby

как и by, но ссылку на хэш


=== annotateby

возвращает хэш field => {annotate}


=== annotaterefby

как и annotateby, но ссылку на хэш


=== query

возвращает select-запрос


=== explain

возвращает explain


=== analyse

возвращает анализ данных


=== lj

устанавливает дефолтный left join (1), а не inner join (undef)


=== ij

устанавливает дефолтный inner join (undef), а не left join (1)


=== asis

возвращает себя как скаляр в любом контексте


=== share

создаёт блокировку чтения


=== for_update

создаёт блокировку чтения


=== cache

кэширует результат


=== as

помечает запрос, как подзапрос в sql-запросе.
например: ... FROM (SELECT a, b FROM ...) AS A
или SELECT (SELECT a, b FROM ...) as A
!!!
недоделано - надо все поля в view добавить в fieldset, а так же алиас за скобкой заменять на А№, когда таблиц много
и при срабатывании деструктора - разрушить метаинформацию о таблице!
пока можно использовать для $query->as("tab")->count


=== _cache

кэширует, если надо


=== _array

возвращает массив массивов


=== _all

возвращает массив хешей


=== _col_ref

возвращает массив значений


=== _rows

возвращает beans


=== _bypass




=== _query

возвращает "сырой" sql-запрос


=== __filter

создаёт фильтр для where и having


=== _filter

фильтр для одного ключа-значения


== R::Model::Type::Datetime

тип времени для колумнов
== R::Model::Type::Datetime

тип времени для колумнов


=== typeCol

возвращает тип колумна в базе 


=== toCol

в представление столбца


=== fromCol

конструктор - возвращает новый объект


=== now



=== format_datetime

форматирует дату




=== typeCol

возвращает тип колумна в базе 


=== toCol

в представление столбца


=== fromCol

конструктор - возвращает новый объект


=== now






=== typeCol

возвращает тип колумна в базе 


=== toCol

в представление столбца


=== fromCol

конструктор - возвращает новый объект


=== now






=== typeCol

возвращает тип колумна в базе 


=== toCol

в представление столбца


=== fromCol

конструктор - возвращает новый объект


=== now




== R::Model::Type::Datetime::Format


== R::Model::Type::Datetime::Format



=== format_datetime

форматирует дату




=== format_datetime

форматирует дату




=== format_datetime

форматирует дату


== R::Model::Type::Enum

перечисление - отражает число в строку
== R::Model::Type::Enum

перечисление - отражает число в строку


=== typeCol

тип столбца


=== fromCol

из базы


=== toCol

в базу




=== typeCol

тип столбца


=== fromCol

из базы


=== toCol

в базу




=== typeCol

тип столбца


=== fromCol

из базы


=== toCol

в базу




=== typeCol

тип столбца


=== fromCol

из базы


=== toCol

в базу


== R::Model::Type::Markdown

хранит markdown документы
== R::Model::Type::Markdown

хранит markdown документы


=== render





=== render






=== render






=== render




== R::Model::Type::Msg

текстовое поле, преобразует текст в html.
выделяются линки и переводы строк заменяются на br
заменяются последовательности пробелов и знаки табуляции
ненормативная лексика заменяется на ***
== R::Model::Type::Msg

ненормативная лексика заменяется на ***


=== new



=== typeCol

возвращает тип колумна в базе 


=== fromCol

конструктор - возвращает новый объект из базы


=== toCol

преобразует из объекта в представление базы


=== render

рендерит в шаблоне


=== _convert

конвертирует текст в html




=== new




=== typeCol

возвращает тип колумна в базе 


=== fromCol

конструктор - возвращает новый объект из базы


=== toCol

преобразует из объекта в представление базы


=== render

рендерит в шаблоне


=== _convert

конвертирует текст в html




=== new




=== typeCol

возвращает тип колумна в базе 


=== fromCol

конструктор - возвращает новый объект из базы


=== toCol

преобразует из объекта в представление базы


=== render

рендерит в шаблоне


=== _convert

конвертирует текст в html




=== new




=== typeCol

возвращает тип колумна в базе 


=== fromCol

конструктор - возвращает новый объект из базы


=== toCol

преобразует из объекта в представление базы


=== render

рендерит в шаблоне


=== _convert

конвертирует текст в html


== R::Model::Type::Now

объект время изменения записи
== R::Model::Type::Now

объект время изменения записи


=== onAdd

при сохранении добавляет




=== onAdd

при сохранении добавляет




=== onAdd

при сохранении добавляет




=== onAdd

при сохранении добавляет


== R::Model::Type::Safehtml

объект представляющий текст html
== R::Model::Type::Safehtml

объект представляющий текст html


=== _replace_attr

заменяет атрибут


=== _replace

заменяет


=== toCol

преобразует объект к значению в столбце. Может не использоваться, если fromCol вернёт не объект


=== fromCol

конструктор - вызывается, когда значение из базы преобразуется к типу


=== typeCol

тип столбца


=== render

рендерит в шаблоне - проверено: подозрительных тегов нет




=== _replace_attr

заменяет атрибут


=== _replace

заменяет


=== toCol

преобразует объект к значению в столбце. Может не использоваться, если fromCol вернёт не объект


=== fromCol

конструктор - вызывается, когда значение из базы преобразуется к типу


=== typeCol

тип столбца


=== render

рендерит в шаблоне - проверено: подозрительных тегов нет




=== _replace_attr

заменяет атрибут


=== _replace

заменяет


=== toCol

преобразует объект к значению в столбце. Может не использоваться, если fromCol вернёт не объект


=== fromCol

конструктор - вызывается, когда значение из базы преобразуется к типу


=== typeCol

тип столбца


=== render

рендерит в шаблоне - проверено: подозрительных тегов нет




=== _replace_attr

заменяет атрибут


=== _replace

заменяет


=== toCol

преобразует объект к значению в столбце. Может не использоваться, если fromCol вернёт не объект


=== fromCol

конструктор - вызывается, когда значение из базы преобразуется к типу


=== typeCol

тип столбца


=== render

рендерит в шаблоне - проверено: подозрительных тегов нет


== R::Model::Type::Softerase

мягкое удаление - добавляет поле
== R::Model::Type::Softerase

мягкое удаление - добавляет поле


=== typeCol



=== onFind



=== onUpdates



=== onErases



=== onErase





=== typeCol




=== onFind




=== onUpdates




=== onErases




=== onErase






=== typeCol




=== onFind




=== onUpdates




=== onErases




=== onErase






=== typeCol




=== onFind




=== onUpdates




=== onErases




=== onErase




== R::Model::Type::String

объект представляющий значение
== R::Model::Type::String

объект представляющий значение


=== typeCol

тип столбца в базе


=== onCheck

устанавливается в check филда


=== fromCol



=== toCol





=== typeCol

тип столбца в базе


=== onCheck

устанавливается в check филда


=== fromCol




=== toCol






=== typeCol

тип столбца в базе


=== onCheck

устанавливается в check филда


=== fromCol




=== toCol






=== typeCol

тип столбца в базе


=== onCheck

устанавливается в check филда


=== fromCol




=== toCol




== R::Model::Type::Unixtime

тип времени для колумнов
== R::Model::Type::Unixtime

тип времени для колумнов


=== typeCol

возвращает тип колумна в базе 


=== toCol

в представление столбца


=== fromCol

конструктор - возвращает новый объект




=== typeCol

возвращает тип колумна в базе 


=== toCol

в представление столбца


=== fromCol

конструктор - возвращает новый объект




=== typeCol

возвращает тип колумна в базе 


=== toCol

в представление столбца


=== fromCol

конструктор - возвращает новый объект




=== typeCol

возвращает тип колумна в базе 


=== toCol

в представление столбца


=== fromCol

конструктор - возвращает новый объект


== R::Model::Type::Upd

объект время изменения записи
== R::Model::Type::Upd

объект время изменения записи


=== onSave

при сохранении добавляет




=== onSave

при сохранении добавляет




=== onSave

при сохранении добавляет




=== onSave

при сохранении добавляет


== R::Model::Type::

объект представляющий значение
== R::Model::Type::

объект представляющий значение


=== typeCol

тип столбца в базе


=== fromCol

конструктор - вызывается, когда значение из базы преобразуется к типу


=== toCol

преобразует объект к значению в столбце. Может не использоваться, если fromCol вернёт не объект




=== typeCol

тип столбца в базе


=== fromCol

конструктор - вызывается, когда значение из базы преобразуется к типу


=== toCol

преобразует объект к значению в столбце. Может не использоваться, если fromCol вернёт не объект




=== typeCol

тип столбца в базе


=== fromCol

конструктор - вызывается, когда значение из базы преобразуется к типу


=== toCol

преобразует объект к значению в столбце. Может не использоваться, если fromCol вернёт не объект




=== typeCol

тип столбца в базе


=== fromCol

конструктор - вызывается, когда значение из базы преобразуется к типу


=== toCol

преобразует объект к значению в столбце. Может не использоваться, если fromCol вернёт не объект


== R::Model::Words::Rus

модель для парсинга русскоязычных фраз
== R::Model::Words::Rus

модель для парсинга русскоязычных фраз


=== new

конструктор


=== build

фразу разбивает на слова для поиска


=== set

добавляет фразу в таблицу words, если их там нет и возвращает их идентификаторы


=== get

возвращает word_id для тех слов в фразе, которые есть в words




=== new

конструктор


=== build

фразу разбивает на слова для поиска


=== set

добавляет фразу в таблицу words, если их там нет и возвращает их идентификаторы


=== get

возвращает word_id для тех слов в фразе, которые есть в words




=== new

конструктор


=== build

фразу разбивает на слова для поиска


=== set

добавляет фразу в таблицу words, если их там нет и возвращает их идентификаторы


=== get

возвращает word_id для тех слов в фразе, которые есть в words




=== new

конструктор


=== build

фразу разбивает на слова для поиска


=== set

добавляет фразу в таблицу words, если их там нет и возвращает их идентификаторы


=== get

возвращает word_id для тех слов в фразе, которые есть в words


== R::Mq

клиент очередей
== R::Mq

клиент очередей


=== new

конструктор


=== public

отправить соощение в очередь




=== new

конструктор


=== public

отправить соощение в очередь




=== new

конструктор


=== public

отправить соощение в очередь




=== new

конструктор


=== public

отправить соощение в очередь


== R::Mq::Queen

очередь
== R::Mq::Queen

очередь


=== new

конструктор


=== channel



=== public

добавляет сообщение в каналы


=== top

получает из очереди сообщение


=== pop

сообщает, что сообщение обработано и его можно удалить




=== new

конструктор


=== channel




=== public

добавляет сообщение в каналы


=== top

получает из очереди сообщение


=== pop

сообщает, что сообщение обработано и его можно удалить




=== new

конструктор


=== channel




=== public

добавляет сообщение в каналы


=== top

получает из очереди сообщение


=== pop

сообщает, что сообщение обработано и его можно удалить




=== new

конструктор


=== channel




=== public

добавляет сообщение в каналы


=== top

получает из очереди сообщение


=== pop

сообщает, что сообщение обработано и его можно удалить


== R::Mq::Server

сервер очередей
== R::Mq::Server

сервер очередей


=== new

конструктор


=== impulse

переопределяем обработчик




=== new

конструктор


=== impulse

переопределяем обработчик




=== new

конструктор


=== impulse

переопределяем обработчик




=== new

конструктор


=== impulse

переопределяем обработчик


== R::Ness

механизм 
== R::Ness

механизм 


=== new

конструктор




=== new

конструктор




=== new

конструктор




=== new

конструктор


== R::Perl

функции для управления данными
== R::Perl

функции для управления данными


=== new

конструктор


=== refcnt

возвращает количество ссылок на значение. Разыменовывает ссылку


=== dumpsv

расписывает внутреннюю структуру переменной


=== TIEHASH



=== STORE



=== FETCH



=== leak



=== set

создаёт множество-хэш


=== setref

создаёт множество-хэш


=== starset

создаёт множество-хэш с порядковым номером


=== starsetref

создаёт множество-хэш с порядковым номером


=== unique

удаляет дубликаты


=== array

переводит в массив строку, возвращает ключи хэш и пропускает ссылку на массив


=== union

объединяет хеши рекурсивно


=== canallnames

возвращает имена на все методы в иерархии
порядок: с наиболее удалённых к наиболее приближённым
из ISA c конца смотрим


=== canall

возвращает ссылки на все методы в иерархии


=== Super



=== order_by

сортирует по свойству


=== dump



=== dump



=== inline_dump

возвращает дамп данных в одну линию


=== unic_id



=== to_radix

переводит натуральное число в заданную систему счисления


=== from_radix

парсит число в указанной системе счисления


=== reverse

переворачивает хэш


=== unstring

парсит из строки


=== trim

обрезает пробелы с двух сторон


=== rtrim

обрезает пробелы справа


=== ltrim

обрезает пробелы слева


=== strftime



=== cipher

возвращает магический шифр (хэш), который расшифровывается множеством разных способов.
Используется в паролях.
Если к паролю применены определённые правила для пользователя, создающего пароль, то к нему не подойдут многие расшифровки


=== _cipher



=== iconv



=== base64

кодирует в base64


=== sha1

подпись sha1


=== _sha1



=== md5

подпись md5


=== _md5



=== lines

подсчитывает строки


=== size

парсит значение и выдаёт в байтах


=== _size



=== seconds

парсит значение и выдаёт в секундах




=== new

конструктор


=== refcnt

возвращает количество ссылок на значение. Разыменовывает ссылку


=== dumpsv

расписывает внутреннюю структуру переменной




=== new

конструктор


=== refcnt

возвращает количество ссылок на значение. Разыменовывает ссылку


=== dumpsv

расписывает внутреннюю структуру переменной




=== new

конструктор


=== refcnt

возвращает количество ссылок на значение. Разыменовывает ссылку


=== dumpsv

расписывает внутреннюю структуру переменной


== R::Perl::LeakHash


== R::Perl::LeakHash



=== TIEHASH



=== STORE



=== FETCH



=== leak



=== set

создаёт множество-хэш


=== setref

создаёт множество-хэш


=== starset

создаёт множество-хэш с порядковым номером


=== starsetref

создаёт множество-хэш с порядковым номером


=== unique

удаляет дубликаты


=== array

переводит в массив строку, возвращает ключи хэш и пропускает ссылку на массив


=== union

объединяет хеши рекурсивно


=== canallnames

возвращает имена на все методы в иерархии
порядок: с наиболее удалённых к наиболее приближённым
из ISA c конца смотрим


=== canall

возвращает ссылки на все методы в иерархии


=== Super



=== order_by

сортирует по свойству


=== dump



=== dump



=== inline_dump

возвращает дамп данных в одну линию


=== unic_id



=== to_radix

переводит натуральное число в заданную систему счисления


=== from_radix

парсит число в указанной системе счисления


=== reverse

переворачивает хэш


=== unstring

парсит из строки


=== trim

обрезает пробелы с двух сторон


=== rtrim

обрезает пробелы справа


=== ltrim

обрезает пробелы слева


=== strftime



=== cipher

возвращает магический шифр (хэш), который расшифровывается множеством разных способов.
Используется в паролях.
Если к паролю применены определённые правила для пользователя, создающего пароль, то к нему не подойдут многие расшифровки


=== _cipher



=== iconv



=== base64

кодирует в base64


=== sha1

подпись sha1


=== _sha1



=== md5

подпись md5


=== _md5



=== lines

подсчитывает строки


=== size

парсит значение и выдаёт в байтах


=== _size



=== seconds

парсит значение и выдаёт в секундах




=== TIEHASH




=== STORE




=== FETCH




=== leak




=== set

создаёт множество-хэш


=== setref

создаёт множество-хэш


=== starset

создаёт множество-хэш с порядковым номером


=== starsetref

создаёт множество-хэш с порядковым номером


=== unique

удаляет дубликаты


=== array

переводит в массив строку, возвращает ключи хэш и пропускает ссылку на массив


=== union

объединяет хеши рекурсивно


=== canallnames

возвращает имена на все методы в иерархии
порядок: с наиболее удалённых к наиболее приближённым
из ISA c конца смотрим


=== canall

возвращает ссылки на все методы в иерархии


=== Super




=== order_by

сортирует по свойству


=== dump




=== dump




=== inline_dump

возвращает дамп данных в одну линию


=== unic_id




=== to_radix

переводит натуральное число в заданную систему счисления


=== from_radix

парсит число в указанной системе счисления


=== reverse

переворачивает хэш


=== unstring

парсит из строки


=== trim

обрезает пробелы с двух сторон


=== rtrim

обрезает пробелы справа


=== ltrim

обрезает пробелы слева


=== strftime




=== cipher

возвращает магический шифр (хэш), который расшифровывается множеством разных способов.
Используется в паролях.
Если к паролю применены определённые правила для пользователя, создающего пароль, то к нему не подойдут многие расшифровки


=== _cipher




=== iconv




=== base64

кодирует в base64


=== sha1

подпись sha1


=== _sha1




=== md5

подпись md5


=== _md5




=== lines

подсчитывает строки


=== size

парсит значение и выдаёт в байтах


=== _size




=== seconds

парсит значение и выдаёт в секундах




=== TIEHASH




=== STORE




=== FETCH




=== leak




=== set

создаёт множество-хэш


=== setref

создаёт множество-хэш


=== starset

создаёт множество-хэш с порядковым номером


=== starsetref

создаёт множество-хэш с порядковым номером


=== unique

удаляет дубликаты


=== array

переводит в массив строку, возвращает ключи хэш и пропускает ссылку на массив


=== union

объединяет хеши рекурсивно


=== canallnames

возвращает имена на все методы в иерархии
порядок: с наиболее удалённых к наиболее приближённым
из ISA c конца смотрим


=== canall

возвращает ссылки на все методы в иерархии


=== Super




=== order_by

сортирует по свойству


=== dump




=== dump




=== inline_dump

возвращает дамп данных в одну линию


=== unic_id




=== to_radix

переводит натуральное число в заданную систему счисления


=== from_radix

парсит число в указанной системе счисления


=== reverse

переворачивает хэш


=== unstring

парсит из строки


=== trim

обрезает пробелы с двух сторон


=== rtrim

обрезает пробелы справа


=== ltrim

обрезает пробелы слева


=== strftime




=== cipher

возвращает магический шифр (хэш), который расшифровывается множеством разных способов.
Используется в паролях.
Если к паролю применены определённые правила для пользователя, создающего пароль, то к нему не подойдут многие расшифровки


=== _cipher




=== iconv




=== base64

кодирует в base64


=== sha1

подпись sha1


=== _sha1




=== md5

подпись md5


=== _md5




=== lines

подсчитывает строки


=== size

парсит значение и выдаёт в байтах


=== _size




=== seconds

парсит значение и выдаёт в секундах


== R::Process

работает с текущим процессом
== R::Process

работает с текущим процессом


=== new

конструктор


=== DESTROY



=== done



=== bg

свойство bg - запускать процесс в фоне


=== fg

свойство fg - запускать процесс в текущем окружении


=== fork

создаёт процесс


=== background

создаёт фоновый процесс


=== run

запускает процесс в текущем


=== start

стартует процесс в фоне


=== restart

рестартует процесс. Если процесс не был запущен, то он стартует


=== newsid

отключает процесс от терминала


=== pidpath

путь к pid-файлу


=== savepid

пишет/читает из pid-файла


=== loadpid

загружает pid


=== erasepid

загружает и удаляет pid-файл


=== kill

посылает сигнал INT, если не указан другой


=== exists

процесс имеет pid-файл и существует указанный в нём процесс


=== stop

останавливает процесс


=== wait

ожидает завершения процесса


=== waitkid

ожидает завершения процесса, если он дочерний


=== check_pid

проверяет: существует ли процесс, если он дочерний


=== kill_zombie

удаляет всех зомби


=== pid

устанавливает/возвращает pid


=== killall

отправляет сигнал всем процессам, подходящим по маске




=== new

конструктор


=== DESTROY




=== done




=== bg

свойство bg - запускать процесс в фоне


=== fg

свойство fg - запускать процесс в текущем окружении


=== fork

создаёт процесс


=== background

создаёт фоновый процесс


=== run

запускает процесс в текущем


=== start

стартует процесс в фоне


=== restart

рестартует процесс. Если процесс не был запущен, то он стартует


=== newsid

отключает процесс от терминала


=== pidpath

путь к pid-файлу


=== savepid

пишет/читает из pid-файла


=== loadpid

загружает pid


=== erasepid

загружает и удаляет pid-файл


=== kill

посылает сигнал INT, если не указан другой


=== exists

процесс имеет pid-файл и существует указанный в нём процесс


=== stop

останавливает процесс


=== wait

ожидает завершения процесса


=== waitkid

ожидает завершения процесса, если он дочерний


=== check_pid

проверяет: существует ли процесс, если он дочерний


=== kill_zombie

удаляет всех зомби


=== pid

устанавливает/возвращает pid


=== killall

отправляет сигнал всем процессам, подходящим по маске




=== new

конструктор


=== DESTROY




=== done




=== bg

свойство bg - запускать процесс в фоне


=== fg

свойство fg - запускать процесс в текущем окружении


=== fork

создаёт процесс


=== background

создаёт фоновый процесс


=== run

запускает процесс в текущем


=== start

стартует процесс в фоне


=== restart

рестартует процесс. Если процесс не был запущен, то он стартует


=== newsid

отключает процесс от терминала


=== pidpath

путь к pid-файлу


=== savepid

пишет/читает из pid-файла


=== loadpid

загружает pid


=== erasepid

загружает и удаляет pid-файл


=== kill

посылает сигнал INT, если не указан другой


=== exists

процесс имеет pid-файл и существует указанный в нём процесс


=== stop

останавливает процесс


=== wait

ожидает завершения процесса


=== waitkid

ожидает завершения процесса, если он дочерний


=== check_pid

проверяет: существует ли процесс, если он дочерний


=== kill_zombie

удаляет всех зомби


=== pid

устанавливает/возвращает pid


=== killall

отправляет сигнал всем процессам, подходящим по маске




=== new

конструктор


=== DESTROY




=== done




=== bg

свойство bg - запускать процесс в фоне


=== fg

свойство fg - запускать процесс в текущем окружении


=== fork

создаёт процесс


=== background

создаёт фоновый процесс


=== run

запускает процесс в текущем


=== start

стартует процесс в фоне


=== restart

рестартует процесс. Если процесс не был запущен, то он стартует


=== newsid

отключает процесс от терминала


=== pidpath

путь к pid-файлу


=== savepid

пишет/читает из pid-файла


=== loadpid

загружает pid


=== erasepid

загружает и удаляет pid-файл


=== kill

посылает сигнал INT, если не указан другой


=== exists

процесс имеет pid-файл и существует указанный в нём процесс


=== stop

останавливает процесс


=== wait

ожидает завершения процесса


=== waitkid

ожидает завершения процесса, если он дочерний


=== check_pid

проверяет: существует ли процесс, если он дочерний


=== kill_zombie

удаляет всех зомби


=== pid

устанавливает/возвращает pid


=== killall

отправляет сигнал всем процессам, подходящим по маске


== R::Process::Client

tcp клиент. Базовый класс - его надо расширять
== R::Process::Client

tcp клиент. Базовый класс - его надо расширять


=== new

конструктор


=== hi

переопределяется - вызывается при создании подключения


=== bay

переопределяется - вызывается при завершении сервера


=== connect

коннектится


=== ping

проверяет, что подключение есть и восстанавливает его, если оно потеряно


=== close

закрывает соединение


=== DESTROY

деструктор - закрываем соединение




=== new

конструктор


=== hi

переопределяется - вызывается при создании подключения


=== bay

переопределяется - вызывается при завершении сервера


=== connect

коннектится


=== ping

проверяет, что подключение есть и восстанавливает его, если оно потеряно


=== close

закрывает соединение


=== DESTROY

деструктор - закрываем соединение




=== new

конструктор


=== hi

переопределяется - вызывается при создании подключения


=== bay

переопределяется - вызывается при завершении сервера


=== connect

коннектится


=== ping

проверяет, что подключение есть и восстанавливает его, если оно потеряно


=== close

закрывает соединение


=== DESTROY

деструктор - закрываем соединение




=== new

конструктор


=== hi

переопределяется - вызывается при создании подключения


=== bay

переопределяется - вызывается при завершении сервера


=== connect

коннектится


=== ping

проверяет, что подключение есть и восстанавливает его, если оно потеряно


=== close

закрывает соединение


=== DESTROY

деструктор - закрываем соединение


== R::Process::Io

межпроцессорное взаимодействие
его наследует сервер и клиент
== R::Process::Io

его наследует сервер и клиент


=== new

конструктор


=== send

отправляет строку в сокет


=== recv

считывает указанное кол. байт из сокета


=== read

считывает 4 байта в сетевом формате N, а затем - строку из таких байт


=== write

записывает размер строки в сетевом формате N


=== freeze

замораживает данные и отправляет


=== thaw

считывает и размораживает данные


=== close

закрывает соединение




=== new

конструктор


=== send

отправляет строку в сокет


=== recv

считывает указанное кол. байт из сокета


=== read

считывает 4 байта в сетевом формате N, а затем - строку из таких байт


=== write

записывает размер строки в сетевом формате N


=== freeze

замораживает данные и отправляет


=== thaw

считывает и размораживает данные


=== close

закрывает соединение




=== new

конструктор


=== send

отправляет строку в сокет


=== recv

считывает указанное кол. байт из сокета


=== read

считывает 4 байта в сетевом формате N, а затем - строку из таких байт


=== write

записывает размер строки в сетевом формате N


=== freeze

замораживает данные и отправляет


=== thaw

считывает и размораживает данные


=== close

закрывает соединение




=== new

конструктор


=== send

отправляет строку в сокет


=== recv

считывает указанное кол. байт из сокета


=== read

считывает 4 байта в сетевом формате N, а затем - строку из таких байт


=== write

записывает размер строки в сетевом формате N


=== freeze

замораживает данные и отправляет


=== thaw

считывает и размораживает данные


=== close

закрывает соединение


== R::Process::Manager

управляет процессами
порождает и восстанавливает завершившиеся процессы
завершает все процессы
== R::Process::Manager

завершает все процессы


=== new

конструктор-синглетон


=== stop

завершает все дочерние процессы


=== birth

порождает процесс


=== loop

бесконечный цикл ожидания и восстановления потомков


=== count

количество процессов




=== new

конструктор-синглетон


=== stop

завершает все дочерние процессы


=== birth

порождает процесс


=== loop

бесконечный цикл ожидания и восстановления потомков


=== count

количество процессов




=== new

конструктор-синглетон


=== stop

завершает все дочерние процессы


=== birth

порождает процесс


=== loop

бесконечный цикл ожидания и восстановления потомков


=== count

количество процессов




=== new

конструктор-синглетон


=== stop

завершает все дочерние процессы


=== birth

порождает процесс


=== loop

бесконечный цикл ожидания и восстановления потомков


=== count

количество процессов


== R::Process::Server

tcp-сервер на интернет и unix-сокетах и даже на разделяемой памяти (todo)
протокол для данного сервера придумываете сами
сервер на http - app->httpServer
== R::Process::Server

сервер на http - app->httpServer


=== new

конструктор


=== make

создаёт подключение


=== setup

инициализация сервера


=== init

инициализация воркера


=== destroyer

выполняется при нормальном завершении воркера


=== analarm

выполняется при привышении обработчиком таймаута


=== on_alarm

обработчик сигнала alrm


=== set_alarm

устанавливает обработчик сигнала alarm для воркера


=== loop

инициализация и бесконечный цикл ожидания и выполнения запросов


=== run

инициализация, порождение обработчиков и восстановление грохнувшихся


=== birth

порождает воркер


=== accept

бесконечный цикл ожидания и выполнения запросов


=== impulse

обработчик запроса


=== ritter

запускается на к-й вызов




=== new

конструктор


=== make

создаёт подключение


=== setup

инициализация сервера


=== init

инициализация воркера


=== destroyer

выполняется при нормальном завершении воркера


=== analarm

выполняется при привышении обработчиком таймаута


=== on_alarm

обработчик сигнала alrm


=== set_alarm

устанавливает обработчик сигнала alarm для воркера


=== loop

инициализация и бесконечный цикл ожидания и выполнения запросов


=== run

инициализация, порождение обработчиков и восстановление грохнувшихся


=== birth

порождает воркер


=== accept

бесконечный цикл ожидания и выполнения запросов


=== impulse

обработчик запроса


=== ritter

запускается на к-й вызов




=== new

конструктор


=== make

создаёт подключение


=== setup

инициализация сервера


=== init

инициализация воркера


=== destroyer

выполняется при нормальном завершении воркера


=== analarm

выполняется при привышении обработчиком таймаута


=== on_alarm

обработчик сигнала alrm


=== set_alarm

устанавливает обработчик сигнала alarm для воркера


=== loop

инициализация и бесконечный цикл ожидания и выполнения запросов


=== run

инициализация, порождение обработчиков и восстановление грохнувшихся


=== birth

порождает воркер


=== accept

бесконечный цикл ожидания и выполнения запросов


=== impulse

обработчик запроса


=== ritter

запускается на к-й вызов




=== new

конструктор


=== make

создаёт подключение


=== setup

инициализация сервера


=== init

инициализация воркера


=== destroyer

выполняется при нормальном завершении воркера


=== analarm

выполняется при привышении обработчиком таймаута


=== on_alarm

обработчик сигнала alrm


=== set_alarm

устанавливает обработчик сигнала alarm для воркера


=== loop

инициализация и бесконечный цикл ожидания и выполнения запросов


=== run

инициализация, порождение обработчиков и восстановление грохнувшихся


=== birth

порождает воркер


=== accept

бесконечный цикл ожидания и выполнения запросов


=== impulse

обработчик запроса


=== ritter

запускается на к-й вызов


== R::Raise

исключение фоматирует исключение
== R::Raise

исключение фоматирует исключение


=== setdie



=== retdie

возвращает как было


=== defdie

возвращает дефолтные


=== bingo

конструктор


=== new

конструктор


=== __ondie__

обработчик события die


=== __onwarn__

обработчик события warn


=== _log

логирует


=== stringify

превращает в строку


=== concat

объединяет со строкой


=== orig

Возвращает оригинальную ошибку


=== message

возвращает сообщение без at line


=== messageAdd

добавляет в начало сообщения


=== is

сообщает, что аббревиатура совпадает


=== trace

возвращает трейсбак
count - количество строк с конца


=== tracex

возвращает строку




=== setdie




=== retdie

возвращает как было


=== defdie

возвращает дефолтные


=== bingo

конструктор


=== new

конструктор


=== __ondie__

обработчик события die


=== __onwarn__

обработчик события warn


=== _log

логирует


=== stringify

превращает в строку


=== concat

объединяет со строкой


=== orig

Возвращает оригинальную ошибку


=== message

возвращает сообщение без at line


=== messageAdd

добавляет в начало сообщения


=== is

сообщает, что аббревиатура совпадает


=== trace

возвращает трейсбак
count - количество строк с конца


=== tracex

возвращает строку




=== setdie




=== retdie

возвращает как было


=== defdie

возвращает дефолтные


=== bingo

конструктор


=== new

конструктор


=== __ondie__

обработчик события die


=== __onwarn__

обработчик события warn


=== _log

логирует


=== stringify

превращает в строку


=== concat

объединяет со строкой


=== orig

Возвращает оригинальную ошибку


=== message

возвращает сообщение без at line


=== messageAdd

добавляет в начало сообщения


=== is

сообщает, что аббревиатура совпадает


=== trace

возвращает трейсбак
count - количество строк с конца


=== tracex

возвращает строку




=== setdie




=== retdie

возвращает как было


=== defdie

возвращает дефолтные


=== bingo

конструктор


=== new

конструктор


=== __ondie__

обработчик события die


=== __onwarn__

обработчик события warn


=== _log

логирует


=== stringify

превращает в строку


=== concat

объединяет со строкой


=== orig

Возвращает оригинальную ошибку


=== message

возвращает сообщение без at line


=== messageAdd

добавляет в начало сообщения


=== is

сообщает, что аббревиатура совпадает


=== trace

возвращает трейсбак
count - количество строк с конца


=== tracex

возвращает строку


== R::Re

словарь регулярных выражений
== R::Re

словарь регулярных выражений


=== new

конструктор


=== AUTOLOAD



=== DESTROY





=== new

конструктор


=== AUTOLOAD




=== DESTROY






=== new

конструктор


=== AUTOLOAD




=== DESTROY






=== new

конструктор


=== AUTOLOAD




=== DESTROY




== R::Rubin

Упраляет командами из lib/Rubin
== R::Rubin

Упраляет командами из lib/Rubin


=== new

конструктор


=== AUTOLOAD



=== DESTROY





=== new

конструктор


=== AUTOLOAD




=== DESTROY






=== new

конструктор


=== AUTOLOAD




=== DESTROY






=== new

конструктор


=== AUTOLOAD




=== DESTROY




== R::Shiva

энтропия - выполняет задачи по времени
лета - река времени
исида-сотис - Сириус Л в созвездии Большого Пса
== R::Shiva

исида-сотис - Сириус Л в созвездии Большого Пса


=== new

конструктор


=== start

добавляет в process manager


=== loop

бесконечный цикл ожидания и выполнения заданий


=== step

делает шаг


=== init

инициализирует задание и отправляет его в очередь


=== on

добавляет задание


=== off

удаляет задание по имени


=== exists

проверяет существование задания




=== new

конструктор


=== start

добавляет в process manager


=== loop

бесконечный цикл ожидания и выполнения заданий


=== step

делает шаг


=== init

инициализирует задание и отправляет его в очередь


=== on

добавляет задание


=== off

удаляет задание по имени


=== exists

проверяет существование задания




=== new

конструктор


=== start

добавляет в process manager


=== loop

бесконечный цикл ожидания и выполнения заданий


=== step

делает шаг


=== init

инициализирует задание и отправляет его в очередь


=== on

добавляет задание


=== off

удаляет задание по имени


=== exists

проверяет существование задания




=== new

конструктор


=== start

добавляет в process manager


=== loop

бесконечный цикл ожидания и выполнения заданий


=== step

делает шаг


=== init

инициализирует задание и отправляет его в очередь


=== on

добавляет задание


=== off

удаляет задание по имени


=== exists

проверяет существование задания


== R::Sign

символы фонта 
== R::Sign

символы фонта 


=== new

конструктор


=== glass



=== music



=== search



=== envelopeO



=== heart



=== star



=== starO



=== user



=== film



=== thLarge



=== th



=== thList



=== check



=== remove



=== close



=== times



=== searchPlus



=== searchMinus



=== powerOff



=== signal



=== gear



=== cog



=== trashO



=== home



=== fileO



=== clockO



=== road



=== download



=== arrowCircleODown



=== arrowCircleOUp



=== inbox



=== playCircleO



=== rotateRight



=== repeat



=== refresh



=== listAlt



=== lock



=== flag



=== headphones



=== volumeOff



=== volumeDown



=== volumeUp



=== qrcode



=== barcode



=== tag



=== tags



=== book



=== bookmark



=== print



=== camera



=== font



=== bold



=== italic



=== textHeight



=== textWidth



=== alignLeft



=== alignCenter



=== alignRight



=== alignJustify



=== list



=== dedent



=== outdent



=== indent



=== videoCamera



=== photo



=== image



=== pictureO



=== pencil



=== mapMarker



=== adjust



=== tint



=== edit



=== pencilSquareO



=== shareSquareO



=== checkSquareO



=== arrows



=== stepBackward



=== fastBackward



=== backward



=== play



=== pause



=== stop



=== forward



=== fastForward



=== stepForward



=== eject



=== chevronLeft



=== chevronRight



=== plusCircle



=== minusCircle



=== timesCircle



=== checkCircle



=== questionCircle



=== infoCircle



=== crosshairs



=== timesCircleO



=== checkCircleO



=== ban



=== arrowLeft



=== arrowRight



=== arrowUp



=== arrowDown



=== mailForward



=== share



=== expand



=== compress



=== plus



=== minus



=== asterisk



=== exclamationCircle



=== gift



=== leaf



=== fire



=== eye



=== eyeSlash



=== warning



=== exclamationTriangle



=== plane



=== calendar



=== random



=== comment



=== magnet



=== chevronUp



=== chevronDown



=== retweet



=== shoppingCart



=== folder



=== folderOpen



=== arrowsV



=== arrowsH



=== barChartO



=== barChart



=== twitterSquare



=== facebookSquare



=== cameraRetro



=== key



=== gears



=== cogs



=== comments



=== thumbsOUp



=== thumbsODown



=== starHalf



=== heartO



=== signOut



=== linkedinSquare



=== thumbTack



=== externalLink



=== signIn



=== trophy



=== githubSquare



=== upload



=== lemonO



=== phone



=== squareO



=== bookmarkO



=== phoneSquare



=== twitter



=== facebookF



=== facebook



=== github



=== unlock



=== creditCard



=== feed



=== rss



=== hddO



=== bullhorn



=== bell



=== certificate



=== handORight



=== handOLeft



=== handOUp



=== handODown



=== arrowCircleLeft



=== arrowCircleRight



=== arrowCircleUp



=== arrowCircleDown



=== globe



=== wrench



=== tasks



=== filter



=== briefcase



=== arrowsAlt



=== group



=== users



=== chain



=== link



=== cloud



=== flask



=== cut



=== scissors



=== copy



=== filesO



=== paperclip



=== save



=== floppyO



=== square



=== navicon



=== reorder



=== bars



=== listUl



=== listOl



=== strikethrough



=== underline



=== table



=== magic



=== truck



=== pinterest



=== pinterestSquare



=== googlePlusSquare



=== googlePlus



=== money



=== caretDown



=== caretUp



=== caretLeft



=== caretRight



=== columns



=== unsorted



=== sort



=== sortDown



=== sortDesc



=== sortUp



=== sortAsc



=== envelope



=== linkedin



=== rotateLeft



=== undo



=== legal



=== gavel



=== dashboard



=== tachometer



=== commentO



=== commentsO



=== flash



=== bolt



=== sitemap



=== umbrella



=== paste



=== clipboard



=== lightbulbO



=== exchange



=== cloudDownload



=== cloudUpload



=== userMd



=== stethoscope



=== suitcase



=== bellO



=== coffee



=== cutlery



=== fileTextO



=== buildingO



=== hospitalO



=== ambulance



=== medkit



=== fighterJet



=== beer



=== hSquare



=== plusSquare



=== angleDoubleLeft



=== angleDoubleRight



=== angleDoubleUp



=== angleDoubleDown



=== angleLeft



=== angleRight



=== angleUp



=== angleDown



=== desktop



=== laptop



=== tablet



=== mobilePhone



=== mobile



=== circleO



=== quoteLeft



=== quoteRight



=== spinner



=== circle



=== mailReply



=== reply



=== githubAlt



=== folderO



=== folderOpenO



=== smileO



=== frownO



=== mehO



=== gamepad



=== keyboardO



=== flagO



=== flagCheckered



=== terminal



=== code



=== mailReplyAll



=== replyAll



=== starHalfEmpty



=== starHalfFull



=== starHalfO



=== locationArrow



=== crop



=== codeFork



=== unlink



=== chainBroken



=== question



=== info



=== exclamation



=== superscript



=== subscript



=== eraser



=== puzzlePiece



=== microphone



=== microphoneSlash



=== shield



=== calendarO



=== fireExtinguisher



=== rocket



=== maxcdn



=== chevronCircleLeft



=== chevronCircleRight



=== chevronCircleUp



=== chevronCircleDown



=== html5



=== css3



=== anchor



=== unlockAlt



=== bullseye



=== ellipsisH



=== ellipsisV



=== rssSquare



=== playCircle



=== ticket



=== minusSquare



=== minusSquareO



=== levelUp



=== levelDown



=== checkSquare



=== pencilSquare



=== externalLinkSquare



=== shareSquare



=== compass



=== toggleDown



=== caretSquareODown



=== toggleUp



=== caretSquareOUp



=== toggleRight



=== caretSquareORight



=== euro



=== eur



=== gbp



=== dollar



=== usd



=== rupee



=== inr



=== cny



=== rmb



=== yen



=== jpy



=== ruble



=== rouble



=== rub



=== won



=== krw



=== bitcoin



=== btc



=== file



=== fileText



=== sortAlphaAsc



=== sortAlphaDesc



=== sortAmountAsc



=== sortAmountDesc



=== sortNumericAsc



=== sortNumericDesc



=== thumbsUp



=== thumbsDown



=== youtubeSquare



=== youtube



=== xing



=== xingSquare



=== youtubePlay



=== dropbox



=== stackOverflow



=== instagram



=== flickr



=== adn



=== bitbucket



=== bitbucketSquare



=== tumblr



=== tumblrSquare



=== longArrowDown



=== longArrowUp



=== longArrowLeft



=== longArrowRight



=== apple



=== windows



=== android



=== linux



=== dribbble



=== skype



=== foursquare



=== trello



=== female



=== male



=== gittip



=== gratipay



=== sunO



=== moonO



=== archive



=== bug



=== vk



=== weibo



=== renren



=== pagelines



=== stackExchange



=== arrowCircleORight



=== arrowCircleOLeft



=== toggleLeft



=== caretSquareOLeft



=== dotCircleO



=== wheelchair



=== vimeoSquare



=== turkishLira



=== try



=== plusSquareO



=== spaceShuttle



=== slack



=== envelopeSquare



=== wordpress



=== openid



=== institution



=== bank



=== university



=== mortarBoard



=== graduationCap



=== yahoo



=== google



=== reddit



=== redditSquare



=== stumbleuponCircle



=== stumbleupon



=== delicious



=== digg



=== piedPiper



=== piedPiperAlt



=== drupal



=== joomla



=== language



=== fax



=== building



=== child



=== paw



=== spoon



=== cube



=== cubes



=== behance



=== behanceSquare



=== steam



=== steamSquare



=== recycle



=== automobile



=== car



=== cab



=== taxi



=== tree



=== spotify



=== deviantart



=== soundcloud



=== database



=== filePdfO



=== fileWordO



=== fileExcelO



=== filePowerpointO



=== filePhotoO



=== filePictureO



=== fileImageO



=== fileZipO



=== fileArchiveO



=== fileSoundO



=== fileAudioO



=== fileMovieO



=== fileVideoO



=== fileCodeO



=== vine



=== codepen



=== jsfiddle



=== lifeBouy



=== lifeBuoy



=== lifeSaver



=== support



=== lifeRing



=== circleONotch



=== ra



=== rebel



=== ge



=== empire



=== gitSquare



=== git



=== yCombinatorSquare



=== ycSquare



=== hackerNews



=== tencentWeibo



=== qq



=== wechat



=== weixin



=== send



=== paperPlane



=== sendO



=== paperPlaneO



=== history



=== circleThin



=== header



=== paragraph



=== sliders



=== shareAlt



=== shareAltSquare



=== bomb



=== soccerBallO



=== futbolO



=== tty



=== binoculars



=== plug



=== slideshare



=== twitch



=== yelp



=== newspaperO



=== wifi



=== calculator



=== paypal



=== googleWallet



=== ccVisa



=== ccMastercard



=== ccDiscover



=== ccAmex



=== ccPaypal



=== ccStripe



=== bellSlash



=== bellSlashO



=== trash



=== copyright



=== at



=== eyedropper



=== paintBrush



=== birthdayCake



=== areaChart



=== pieChart



=== lineChart



=== lastfm



=== lastfmSquare



=== toggleOff



=== toggleOn



=== bicycle



=== bus



=== ioxhost



=== angellist



=== cc



=== shekel



=== sheqel



=== ils



=== meanpath



=== buysellads



=== connectdevelop



=== dashcube



=== forumbee



=== leanpub



=== sellsy



=== shirtsinbulk



=== simplybuilt



=== skyatlas



=== cartPlus



=== cartArrowDown



=== diamond



=== ship



=== userSecret



=== motorcycle



=== streetView



=== heartbeat



=== venus



=== mars



=== mercury



=== intersex



=== transgender



=== transgenderAlt



=== venusDouble



=== marsDouble



=== venusMars



=== marsStroke



=== marsStrokeV



=== marsStrokeH



=== neuter



=== genderless



=== facebookOfficial



=== pinterestP



=== whatsapp



=== server



=== userPlus



=== userTimes



=== hotel



=== bed



=== viacoin



=== train



=== subway



=== medium



=== yc



=== yCombinator



=== optinMonster



=== opencart



=== expeditedssl



=== battery4



=== batteryFull



=== battery3



=== batteryThreeQuarters



=== battery2



=== batteryHalf



=== battery1



=== batteryQuarter



=== battery0



=== batteryEmpty



=== mousePointer



=== iCursor



=== objectGroup



=== objectUngroup



=== stickyNote



=== stickyNoteO



=== ccJcb



=== ccDinersClub



=== clone



=== balanceScale



=== hourglassO



=== hourglass1



=== hourglassStart



=== hourglass2



=== hourglassHalf



=== hourglass3



=== hourglassEnd



=== hourglass



=== handGrabO



=== handRockO



=== handStopO



=== handPaperO



=== handScissorsO



=== handLizardO



=== handSpockO



=== handPointerO



=== handPeaceO



=== trademark



=== registered



=== creativeCommons



=== gg



=== ggCircle



=== tripadvisor



=== odnoklassniki



=== odnoklassnikiSquare



=== getPocket



=== wikipediaW



=== safari



=== chrome



=== firefox



=== opera



=== internetExplorer



=== tv



=== television



=== contao



=== s500px



=== amazon



=== calendarPlusO



=== calendarMinusO



=== calendarTimesO



=== calendarCheckO



=== industry



=== mapPin



=== mapSigns



=== mapO



=== map



=== commenting



=== commentingO



=== houzz



=== vimeo



=== blackTie



=== fonticons



=== redditAlien



=== edge



=== creditCardAlt



=== codiepie



=== modx



=== fortAwesome



=== usb



=== productHunt



=== mixcloud



=== scribd



=== pauseCircle



=== pauseCircleO



=== stopCircle



=== stopCircleO



=== shoppingBag



=== shoppingBasket



=== hashtag



=== bluetooth



=== bluetoothB



=== percent





=== new

конструктор


=== glass




=== music




=== search




=== envelopeO




=== heart




=== star




=== starO




=== user




=== film




=== thLarge




=== th




=== thList




=== check




=== remove




=== close




=== times




=== searchPlus




=== searchMinus




=== powerOff




=== signal




=== gear




=== cog




=== trashO




=== home




=== fileO




=== clockO




=== road




=== download




=== arrowCircleODown




=== arrowCircleOUp




=== inbox




=== playCircleO




=== rotateRight




=== repeat




=== refresh




=== listAlt




=== lock




=== flag




=== headphones




=== volumeOff




=== volumeDown




=== volumeUp




=== qrcode




=== barcode




=== tag




=== tags




=== book




=== bookmark




=== print




=== camera




=== font




=== bold




=== italic




=== textHeight




=== textWidth




=== alignLeft




=== alignCenter




=== alignRight




=== alignJustify




=== list




=== dedent




=== outdent




=== indent




=== videoCamera




=== photo




=== image




=== pictureO




=== pencil




=== mapMarker




=== adjust




=== tint




=== edit




=== pencilSquareO




=== shareSquareO




=== checkSquareO




=== arrows




=== stepBackward




=== fastBackward




=== backward




=== play




=== pause




=== stop




=== forward




=== fastForward




=== stepForward




=== eject




=== chevronLeft




=== chevronRight




=== plusCircle




=== minusCircle




=== timesCircle




=== checkCircle




=== questionCircle




=== infoCircle




=== crosshairs




=== timesCircleO




=== checkCircleO




=== ban




=== arrowLeft




=== arrowRight




=== arrowUp




=== arrowDown




=== mailForward




=== share




=== expand




=== compress




=== plus




=== minus




=== asterisk




=== exclamationCircle




=== gift




=== leaf




=== fire




=== eye




=== eyeSlash




=== warning




=== exclamationTriangle




=== plane




=== calendar




=== random




=== comment




=== magnet




=== chevronUp




=== chevronDown




=== retweet




=== shoppingCart




=== folder




=== folderOpen




=== arrowsV




=== arrowsH




=== barChartO




=== barChart




=== twitterSquare




=== facebookSquare




=== cameraRetro




=== key




=== gears




=== cogs




=== comments




=== thumbsOUp




=== thumbsODown




=== starHalf




=== heartO




=== signOut




=== linkedinSquare




=== thumbTack




=== externalLink




=== signIn




=== trophy




=== githubSquare




=== upload




=== lemonO




=== phone




=== squareO




=== bookmarkO




=== phoneSquare




=== twitter




=== facebookF




=== facebook




=== github




=== unlock




=== creditCard




=== feed




=== rss




=== hddO




=== bullhorn




=== bell




=== certificate




=== handORight




=== handOLeft




=== handOUp




=== handODown




=== arrowCircleLeft




=== arrowCircleRight




=== arrowCircleUp




=== arrowCircleDown




=== globe




=== wrench




=== tasks




=== filter




=== briefcase




=== arrowsAlt




=== group




=== users




=== chain




=== link




=== cloud




=== flask




=== cut




=== scissors




=== copy




=== filesO




=== paperclip




=== save




=== floppyO




=== square




=== navicon




=== reorder




=== bars




=== listUl




=== listOl




=== strikethrough




=== underline




=== table




=== magic




=== truck




=== pinterest




=== pinterestSquare




=== googlePlusSquare




=== googlePlus




=== money




=== caretDown




=== caretUp




=== caretLeft




=== caretRight




=== columns




=== unsorted




=== sort




=== sortDown




=== sortDesc




=== sortUp




=== sortAsc




=== envelope




=== linkedin




=== rotateLeft




=== undo




=== legal




=== gavel




=== dashboard




=== tachometer




=== commentO




=== commentsO




=== flash




=== bolt




=== sitemap




=== umbrella




=== paste




=== clipboard




=== lightbulbO




=== exchange




=== cloudDownload




=== cloudUpload




=== userMd




=== stethoscope




=== suitcase




=== bellO




=== coffee




=== cutlery




=== fileTextO




=== buildingO




=== hospitalO




=== ambulance




=== medkit




=== fighterJet




=== beer




=== hSquare




=== plusSquare




=== angleDoubleLeft




=== angleDoubleRight




=== angleDoubleUp




=== angleDoubleDown




=== angleLeft




=== angleRight




=== angleUp




=== angleDown




=== desktop




=== laptop




=== tablet




=== mobilePhone




=== mobile




=== circleO




=== quoteLeft




=== quoteRight




=== spinner




=== circle




=== mailReply




=== reply




=== githubAlt




=== folderO




=== folderOpenO




=== smileO




=== frownO




=== mehO




=== gamepad




=== keyboardO




=== flagO




=== flagCheckered




=== terminal




=== code




=== mailReplyAll




=== replyAll




=== starHalfEmpty




=== starHalfFull




=== starHalfO




=== locationArrow




=== crop




=== codeFork




=== unlink




=== chainBroken




=== question




=== info




=== exclamation




=== superscript




=== subscript




=== eraser




=== puzzlePiece




=== microphone




=== microphoneSlash




=== shield




=== calendarO




=== fireExtinguisher




=== rocket




=== maxcdn




=== chevronCircleLeft




=== chevronCircleRight




=== chevronCircleUp




=== chevronCircleDown




=== html5




=== css3




=== anchor




=== unlockAlt




=== bullseye




=== ellipsisH




=== ellipsisV




=== rssSquare




=== playCircle




=== ticket




=== minusSquare




=== minusSquareO




=== levelUp




=== levelDown




=== checkSquare




=== pencilSquare




=== externalLinkSquare




=== shareSquare




=== compass




=== toggleDown




=== caretSquareODown




=== toggleUp




=== caretSquareOUp




=== toggleRight




=== caretSquareORight




=== euro




=== eur




=== gbp




=== dollar




=== usd




=== rupee




=== inr




=== cny




=== rmb




=== yen




=== jpy




=== ruble




=== rouble




=== rub




=== won




=== krw




=== bitcoin




=== btc




=== file




=== fileText




=== sortAlphaAsc




=== sortAlphaDesc




=== sortAmountAsc




=== sortAmountDesc




=== sortNumericAsc




=== sortNumericDesc




=== thumbsUp




=== thumbsDown




=== youtubeSquare




=== youtube




=== xing




=== xingSquare




=== youtubePlay




=== dropbox




=== stackOverflow




=== instagram




=== flickr




=== adn




=== bitbucket




=== bitbucketSquare




=== tumblr




=== tumblrSquare




=== longArrowDown




=== longArrowUp




=== longArrowLeft




=== longArrowRight




=== apple




=== windows




=== android




=== linux




=== dribbble




=== skype




=== foursquare




=== trello




=== female




=== male




=== gittip




=== gratipay




=== sunO




=== moonO




=== archive




=== bug




=== vk




=== weibo




=== renren




=== pagelines




=== stackExchange




=== arrowCircleORight




=== arrowCircleOLeft




=== toggleLeft




=== caretSquareOLeft




=== dotCircleO




=== wheelchair




=== vimeoSquare




=== turkishLira




=== try




=== plusSquareO




=== spaceShuttle




=== slack




=== envelopeSquare




=== wordpress




=== openid




=== institution




=== bank




=== university




=== mortarBoard




=== graduationCap




=== yahoo




=== google




=== reddit




=== redditSquare




=== stumbleuponCircle




=== stumbleupon




=== delicious




=== digg




=== piedPiper




=== piedPiperAlt




=== drupal




=== joomla




=== language




=== fax




=== building




=== child




=== paw




=== spoon




=== cube




=== cubes




=== behance




=== behanceSquare




=== steam




=== steamSquare




=== recycle




=== automobile




=== car




=== cab




=== taxi




=== tree




=== spotify




=== deviantart




=== soundcloud




=== database




=== filePdfO




=== fileWordO




=== fileExcelO




=== filePowerpointO




=== filePhotoO




=== filePictureO




=== fileImageO




=== fileZipO




=== fileArchiveO




=== fileSoundO




=== fileAudioO




=== fileMovieO




=== fileVideoO




=== fileCodeO




=== vine




=== codepen




=== jsfiddle




=== lifeBouy




=== lifeBuoy




=== lifeSaver




=== support




=== lifeRing




=== circleONotch




=== ra




=== rebel




=== ge




=== empire




=== gitSquare




=== git




=== yCombinatorSquare




=== ycSquare




=== hackerNews




=== tencentWeibo




=== qq




=== wechat




=== weixin




=== send




=== paperPlane




=== sendO




=== paperPlaneO




=== history




=== circleThin




=== header




=== paragraph




=== sliders




=== shareAlt




=== shareAltSquare




=== bomb




=== soccerBallO




=== futbolO




=== tty




=== binoculars




=== plug




=== slideshare




=== twitch




=== yelp




=== newspaperO




=== wifi




=== calculator




=== paypal




=== googleWallet




=== ccVisa




=== ccMastercard




=== ccDiscover




=== ccAmex




=== ccPaypal




=== ccStripe




=== bellSlash




=== bellSlashO




=== trash




=== copyright




=== at




=== eyedropper




=== paintBrush




=== birthdayCake




=== areaChart




=== pieChart




=== lineChart




=== lastfm




=== lastfmSquare




=== toggleOff




=== toggleOn




=== bicycle




=== bus




=== ioxhost




=== angellist




=== cc




=== shekel




=== sheqel




=== ils




=== meanpath




=== buysellads




=== connectdevelop




=== dashcube




=== forumbee




=== leanpub




=== sellsy




=== shirtsinbulk




=== simplybuilt




=== skyatlas




=== cartPlus




=== cartArrowDown




=== diamond




=== ship




=== userSecret




=== motorcycle




=== streetView




=== heartbeat




=== venus




=== mars




=== mercury




=== intersex




=== transgender




=== transgenderAlt




=== venusDouble




=== marsDouble




=== venusMars




=== marsStroke




=== marsStrokeV




=== marsStrokeH




=== neuter




=== genderless




=== facebookOfficial




=== pinterestP




=== whatsapp




=== server




=== userPlus




=== userTimes




=== hotel




=== bed




=== viacoin




=== train




=== subway




=== medium




=== yc




=== yCombinator




=== optinMonster




=== opencart




=== expeditedssl




=== battery4




=== batteryFull




=== battery3




=== batteryThreeQuarters




=== battery2




=== batteryHalf




=== battery1




=== batteryQuarter




=== battery0




=== batteryEmpty




=== mousePointer




=== iCursor




=== objectGroup




=== objectUngroup




=== stickyNote




=== stickyNoteO




=== ccJcb




=== ccDinersClub




=== clone




=== balanceScale




=== hourglassO




=== hourglass1




=== hourglassStart




=== hourglass2




=== hourglassHalf




=== hourglass3




=== hourglassEnd




=== hourglass




=== handGrabO




=== handRockO




=== handStopO




=== handPaperO




=== handScissorsO




=== handLizardO




=== handSpockO




=== handPointerO




=== handPeaceO




=== trademark




=== registered




=== creativeCommons




=== gg




=== ggCircle




=== tripadvisor




=== odnoklassniki




=== odnoklassnikiSquare




=== getPocket




=== wikipediaW




=== safari




=== chrome




=== firefox




=== opera




=== internetExplorer




=== tv




=== television




=== contao




=== s500px




=== amazon




=== calendarPlusO




=== calendarMinusO




=== calendarTimesO




=== calendarCheckO




=== industry




=== mapPin




=== mapSigns




=== mapO




=== map




=== commenting




=== commentingO




=== houzz




=== vimeo




=== blackTie




=== fonticons




=== redditAlien




=== edge




=== creditCardAlt




=== codiepie




=== modx




=== fortAwesome




=== usb




=== productHunt




=== mixcloud




=== scribd




=== pauseCircle




=== pauseCircleO




=== stopCircle




=== stopCircleO




=== shoppingBag




=== shoppingBasket




=== hashtag




=== bluetooth




=== bluetoothB




=== percent






=== new

конструктор


=== glass




=== music




=== search




=== envelopeO




=== heart




=== star




=== starO




=== user




=== film




=== thLarge




=== th




=== thList




=== check




=== remove




=== close




=== times




=== searchPlus




=== searchMinus




=== powerOff




=== signal




=== gear




=== cog




=== trashO




=== home




=== fileO




=== clockO




=== road




=== download




=== arrowCircleODown




=== arrowCircleOUp




=== inbox




=== playCircleO




=== rotateRight




=== repeat




=== refresh




=== listAlt




=== lock




=== flag




=== headphones




=== volumeOff




=== volumeDown




=== volumeUp




=== qrcode




=== barcode




=== tag




=== tags




=== book




=== bookmark




=== print




=== camera




=== font




=== bold




=== italic




=== textHeight




=== textWidth




=== alignLeft




=== alignCenter




=== alignRight




=== alignJustify




=== list




=== dedent




=== outdent




=== indent




=== videoCamera




=== photo




=== image




=== pictureO




=== pencil




=== mapMarker




=== adjust




=== tint




=== edit




=== pencilSquareO




=== shareSquareO




=== checkSquareO




=== arrows




=== stepBackward




=== fastBackward




=== backward




=== play




=== pause




=== stop




=== forward




=== fastForward




=== stepForward




=== eject




=== chevronLeft




=== chevronRight




=== plusCircle




=== minusCircle




=== timesCircle




=== checkCircle




=== questionCircle




=== infoCircle




=== crosshairs




=== timesCircleO




=== checkCircleO




=== ban




=== arrowLeft




=== arrowRight




=== arrowUp




=== arrowDown




=== mailForward




=== share




=== expand




=== compress




=== plus




=== minus




=== asterisk




=== exclamationCircle




=== gift




=== leaf




=== fire




=== eye




=== eyeSlash




=== warning




=== exclamationTriangle




=== plane




=== calendar




=== random




=== comment




=== magnet




=== chevronUp




=== chevronDown




=== retweet




=== shoppingCart




=== folder




=== folderOpen




=== arrowsV




=== arrowsH




=== barChartO




=== barChart




=== twitterSquare




=== facebookSquare




=== cameraRetro




=== key




=== gears




=== cogs




=== comments




=== thumbsOUp




=== thumbsODown




=== starHalf




=== heartO




=== signOut




=== linkedinSquare




=== thumbTack




=== externalLink




=== signIn




=== trophy




=== githubSquare




=== upload




=== lemonO




=== phone




=== squareO




=== bookmarkO




=== phoneSquare




=== twitter




=== facebookF




=== facebook




=== github




=== unlock




=== creditCard




=== feed




=== rss




=== hddO




=== bullhorn




=== bell




=== certificate




=== handORight




=== handOLeft




=== handOUp




=== handODown




=== arrowCircleLeft




=== arrowCircleRight




=== arrowCircleUp




=== arrowCircleDown




=== globe




=== wrench




=== tasks




=== filter




=== briefcase




=== arrowsAlt




=== group




=== users




=== chain




=== link




=== cloud




=== flask




=== cut




=== scissors




=== copy




=== filesO




=== paperclip




=== save




=== floppyO




=== square




=== navicon




=== reorder




=== bars




=== listUl




=== listOl




=== strikethrough




=== underline




=== table




=== magic




=== truck




=== pinterest




=== pinterestSquare




=== googlePlusSquare




=== googlePlus




=== money




=== caretDown




=== caretUp




=== caretLeft




=== caretRight




=== columns




=== unsorted




=== sort




=== sortDown




=== sortDesc




=== sortUp




=== sortAsc




=== envelope




=== linkedin




=== rotateLeft




=== undo




=== legal




=== gavel




=== dashboard




=== tachometer




=== commentO




=== commentsO




=== flash




=== bolt




=== sitemap




=== umbrella




=== paste




=== clipboard




=== lightbulbO




=== exchange




=== cloudDownload




=== cloudUpload




=== userMd




=== stethoscope




=== suitcase




=== bellO




=== coffee




=== cutlery




=== fileTextO




=== buildingO




=== hospitalO




=== ambulance




=== medkit




=== fighterJet




=== beer




=== hSquare




=== plusSquare




=== angleDoubleLeft




=== angleDoubleRight




=== angleDoubleUp




=== angleDoubleDown




=== angleLeft




=== angleRight




=== angleUp




=== angleDown




=== desktop




=== laptop




=== tablet




=== mobilePhone




=== mobile




=== circleO




=== quoteLeft




=== quoteRight




=== spinner




=== circle




=== mailReply




=== reply




=== githubAlt




=== folderO




=== folderOpenO




=== smileO




=== frownO




=== mehO




=== gamepad




=== keyboardO




=== flagO




=== flagCheckered




=== terminal




=== code




=== mailReplyAll




=== replyAll




=== starHalfEmpty




=== starHalfFull




=== starHalfO




=== locationArrow




=== crop




=== codeFork




=== unlink




=== chainBroken




=== question




=== info




=== exclamation




=== superscript




=== subscript




=== eraser




=== puzzlePiece




=== microphone




=== microphoneSlash




=== shield




=== calendarO




=== fireExtinguisher




=== rocket




=== maxcdn




=== chevronCircleLeft




=== chevronCircleRight




=== chevronCircleUp




=== chevronCircleDown




=== html5




=== css3




=== anchor




=== unlockAlt




=== bullseye




=== ellipsisH




=== ellipsisV




=== rssSquare




=== playCircle




=== ticket




=== minusSquare




=== minusSquareO




=== levelUp




=== levelDown




=== checkSquare




=== pencilSquare




=== externalLinkSquare




=== shareSquare




=== compass




=== toggleDown




=== caretSquareODown




=== toggleUp




=== caretSquareOUp




=== toggleRight




=== caretSquareORight




=== euro




=== eur




=== gbp




=== dollar




=== usd




=== rupee




=== inr




=== cny




=== rmb




=== yen




=== jpy




=== ruble




=== rouble




=== rub




=== won




=== krw




=== bitcoin




=== btc




=== file




=== fileText




=== sortAlphaAsc




=== sortAlphaDesc




=== sortAmountAsc




=== sortAmountDesc




=== sortNumericAsc




=== sortNumericDesc




=== thumbsUp




=== thumbsDown




=== youtubeSquare




=== youtube




=== xing




=== xingSquare




=== youtubePlay




=== dropbox




=== stackOverflow




=== instagram




=== flickr




=== adn




=== bitbucket




=== bitbucketSquare




=== tumblr




=== tumblrSquare




=== longArrowDown




=== longArrowUp




=== longArrowLeft




=== longArrowRight




=== apple




=== windows




=== android




=== linux




=== dribbble




=== skype




=== foursquare




=== trello




=== female




=== male




=== gittip




=== gratipay




=== sunO




=== moonO




=== archive




=== bug




=== vk




=== weibo




=== renren




=== pagelines




=== stackExchange




=== arrowCircleORight




=== arrowCircleOLeft




=== toggleLeft




=== caretSquareOLeft




=== dotCircleO




=== wheelchair




=== vimeoSquare




=== turkishLira




=== try




=== plusSquareO




=== spaceShuttle




=== slack




=== envelopeSquare




=== wordpress




=== openid




=== institution




=== bank




=== university




=== mortarBoard




=== graduationCap




=== yahoo




=== google




=== reddit




=== redditSquare




=== stumbleuponCircle




=== stumbleupon




=== delicious




=== digg




=== piedPiper




=== piedPiperAlt




=== drupal




=== joomla




=== language




=== fax




=== building




=== child




=== paw




=== spoon




=== cube




=== cubes




=== behance




=== behanceSquare




=== steam




=== steamSquare




=== recycle




=== automobile




=== car




=== cab




=== taxi




=== tree




=== spotify




=== deviantart




=== soundcloud




=== database




=== filePdfO




=== fileWordO




=== fileExcelO




=== filePowerpointO




=== filePhotoO




=== filePictureO




=== fileImageO




=== fileZipO




=== fileArchiveO




=== fileSoundO




=== fileAudioO




=== fileMovieO




=== fileVideoO




=== fileCodeO




=== vine




=== codepen




=== jsfiddle




=== lifeBouy




=== lifeBuoy




=== lifeSaver




=== support




=== lifeRing




=== circleONotch




=== ra




=== rebel




=== ge




=== empire




=== gitSquare




=== git




=== yCombinatorSquare




=== ycSquare




=== hackerNews




=== tencentWeibo




=== qq




=== wechat




=== weixin




=== send




=== paperPlane




=== sendO




=== paperPlaneO




=== history




=== circleThin




=== header




=== paragraph




=== sliders




=== shareAlt




=== shareAltSquare




=== bomb




=== soccerBallO




=== futbolO




=== tty




=== binoculars




=== plug




=== slideshare




=== twitch




=== yelp




=== newspaperO




=== wifi




=== calculator




=== paypal




=== googleWallet




=== ccVisa




=== ccMastercard




=== ccDiscover




=== ccAmex




=== ccPaypal




=== ccStripe




=== bellSlash




=== bellSlashO




=== trash




=== copyright




=== at




=== eyedropper




=== paintBrush




=== birthdayCake




=== areaChart




=== pieChart




=== lineChart




=== lastfm




=== lastfmSquare




=== toggleOff




=== toggleOn




=== bicycle




=== bus




=== ioxhost




=== angellist




=== cc




=== shekel




=== sheqel




=== ils




=== meanpath




=== buysellads




=== connectdevelop




=== dashcube




=== forumbee




=== leanpub




=== sellsy




=== shirtsinbulk




=== simplybuilt




=== skyatlas




=== cartPlus




=== cartArrowDown




=== diamond




=== ship




=== userSecret




=== motorcycle




=== streetView




=== heartbeat




=== venus




=== mars




=== mercury




=== intersex




=== transgender




=== transgenderAlt




=== venusDouble




=== marsDouble




=== venusMars




=== marsStroke




=== marsStrokeV




=== marsStrokeH




=== neuter




=== genderless




=== facebookOfficial




=== pinterestP




=== whatsapp




=== server




=== userPlus




=== userTimes




=== hotel




=== bed




=== viacoin




=== train




=== subway




=== medium




=== yc




=== yCombinator




=== optinMonster




=== opencart




=== expeditedssl




=== battery4




=== batteryFull




=== battery3




=== batteryThreeQuarters




=== battery2




=== batteryHalf




=== battery1




=== batteryQuarter




=== battery0




=== batteryEmpty




=== mousePointer




=== iCursor




=== objectGroup




=== objectUngroup




=== stickyNote




=== stickyNoteO




=== ccJcb




=== ccDinersClub




=== clone




=== balanceScale




=== hourglassO




=== hourglass1




=== hourglassStart




=== hourglass2




=== hourglassHalf




=== hourglass3




=== hourglassEnd




=== hourglass




=== handGrabO




=== handRockO




=== handStopO




=== handPaperO




=== handScissorsO




=== handLizardO




=== handSpockO




=== handPointerO




=== handPeaceO




=== trademark




=== registered




=== creativeCommons




=== gg




=== ggCircle




=== tripadvisor




=== odnoklassniki




=== odnoklassnikiSquare




=== getPocket




=== wikipediaW




=== safari




=== chrome




=== firefox




=== opera




=== internetExplorer




=== tv




=== television




=== contao




=== s500px




=== amazon




=== calendarPlusO




=== calendarMinusO




=== calendarTimesO




=== calendarCheckO




=== industry




=== mapPin




=== mapSigns




=== mapO




=== map




=== commenting




=== commentingO




=== houzz




=== vimeo




=== blackTie




=== fonticons




=== redditAlien




=== edge




=== creditCardAlt




=== codiepie




=== modx




=== fortAwesome




=== usb




=== productHunt




=== mixcloud




=== scribd




=== pauseCircle




=== pauseCircleO




=== stopCircle




=== stopCircleO




=== shoppingBag




=== shoppingBasket




=== hashtag




=== bluetooth




=== bluetoothB




=== percent






=== new

конструктор


=== glass




=== music




=== search




=== envelopeO




=== heart




=== star




=== starO




=== user




=== film




=== thLarge




=== th




=== thList




=== check




=== remove




=== close




=== times




=== searchPlus




=== searchMinus




=== powerOff




=== signal




=== gear




=== cog




=== trashO




=== home




=== fileO




=== clockO




=== road




=== download




=== arrowCircleODown




=== arrowCircleOUp




=== inbox




=== playCircleO




=== rotateRight




=== repeat




=== refresh




=== listAlt




=== lock




=== flag




=== headphones




=== volumeOff




=== volumeDown




=== volumeUp




=== qrcode




=== barcode




=== tag




=== tags




=== book




=== bookmark




=== print




=== camera




=== font




=== bold




=== italic




=== textHeight




=== textWidth




=== alignLeft




=== alignCenter




=== alignRight




=== alignJustify




=== list




=== dedent




=== outdent




=== indent




=== videoCamera




=== photo




=== image




=== pictureO




=== pencil




=== mapMarker




=== adjust




=== tint




=== edit




=== pencilSquareO




=== shareSquareO




=== checkSquareO




=== arrows




=== stepBackward




=== fastBackward




=== backward




=== play




=== pause




=== stop




=== forward




=== fastForward




=== stepForward




=== eject




=== chevronLeft




=== chevronRight




=== plusCircle




=== minusCircle




=== timesCircle




=== checkCircle




=== questionCircle




=== infoCircle




=== crosshairs




=== timesCircleO




=== checkCircleO




=== ban




=== arrowLeft




=== arrowRight




=== arrowUp




=== arrowDown




=== mailForward




=== share




=== expand




=== compress




=== plus




=== minus




=== asterisk




=== exclamationCircle




=== gift




=== leaf




=== fire




=== eye




=== eyeSlash




=== warning




=== exclamationTriangle




=== plane




=== calendar




=== random




=== comment




=== magnet




=== chevronUp




=== chevronDown




=== retweet




=== shoppingCart




=== folder




=== folderOpen




=== arrowsV




=== arrowsH




=== barChartO




=== barChart




=== twitterSquare




=== facebookSquare




=== cameraRetro




=== key




=== gears




=== cogs




=== comments




=== thumbsOUp




=== thumbsODown




=== starHalf




=== heartO




=== signOut




=== linkedinSquare




=== thumbTack




=== externalLink




=== signIn




=== trophy




=== githubSquare




=== upload




=== lemonO




=== phone




=== squareO




=== bookmarkO




=== phoneSquare




=== twitter




=== facebookF




=== facebook




=== github




=== unlock




=== creditCard




=== feed




=== rss




=== hddO




=== bullhorn




=== bell




=== certificate




=== handORight




=== handOLeft




=== handOUp




=== handODown




=== arrowCircleLeft




=== arrowCircleRight




=== arrowCircleUp




=== arrowCircleDown




=== globe




=== wrench




=== tasks




=== filter




=== briefcase




=== arrowsAlt




=== group




=== users




=== chain




=== link




=== cloud




=== flask




=== cut




=== scissors




=== copy




=== filesO




=== paperclip




=== save




=== floppyO




=== square




=== navicon




=== reorder




=== bars




=== listUl




=== listOl




=== strikethrough




=== underline




=== table




=== magic




=== truck




=== pinterest




=== pinterestSquare




=== googlePlusSquare




=== googlePlus




=== money




=== caretDown




=== caretUp




=== caretLeft




=== caretRight




=== columns




=== unsorted




=== sort




=== sortDown




=== sortDesc




=== sortUp




=== sortAsc




=== envelope




=== linkedin




=== rotateLeft




=== undo




=== legal




=== gavel




=== dashboard




=== tachometer




=== commentO




=== commentsO




=== flash




=== bolt




=== sitemap




=== umbrella




=== paste




=== clipboard




=== lightbulbO




=== exchange




=== cloudDownload




=== cloudUpload




=== userMd




=== stethoscope




=== suitcase




=== bellO




=== coffee




=== cutlery




=== fileTextO




=== buildingO




=== hospitalO




=== ambulance




=== medkit




=== fighterJet




=== beer




=== hSquare




=== plusSquare




=== angleDoubleLeft




=== angleDoubleRight




=== angleDoubleUp




=== angleDoubleDown




=== angleLeft




=== angleRight




=== angleUp




=== angleDown




=== desktop




=== laptop




=== tablet




=== mobilePhone




=== mobile




=== circleO




=== quoteLeft




=== quoteRight




=== spinner




=== circle




=== mailReply




=== reply




=== githubAlt




=== folderO




=== folderOpenO




=== smileO




=== frownO




=== mehO




=== gamepad




=== keyboardO




=== flagO




=== flagCheckered




=== terminal




=== code




=== mailReplyAll




=== replyAll




=== starHalfEmpty




=== starHalfFull




=== starHalfO




=== locationArrow




=== crop




=== codeFork




=== unlink




=== chainBroken




=== question




=== info




=== exclamation




=== superscript




=== subscript




=== eraser




=== puzzlePiece




=== microphone




=== microphoneSlash




=== shield




=== calendarO




=== fireExtinguisher




=== rocket




=== maxcdn




=== chevronCircleLeft




=== chevronCircleRight




=== chevronCircleUp




=== chevronCircleDown




=== html5




=== css3




=== anchor




=== unlockAlt




=== bullseye




=== ellipsisH




=== ellipsisV




=== rssSquare




=== playCircle




=== ticket




=== minusSquare




=== minusSquareO




=== levelUp




=== levelDown




=== checkSquare




=== pencilSquare




=== externalLinkSquare




=== shareSquare




=== compass




=== toggleDown




=== caretSquareODown




=== toggleUp




=== caretSquareOUp




=== toggleRight




=== caretSquareORight




=== euro




=== eur




=== gbp




=== dollar




=== usd




=== rupee




=== inr




=== cny




=== rmb




=== yen




=== jpy




=== ruble




=== rouble




=== rub




=== won




=== krw




=== bitcoin




=== btc




=== file




=== fileText




=== sortAlphaAsc




=== sortAlphaDesc




=== sortAmountAsc




=== sortAmountDesc




=== sortNumericAsc




=== sortNumericDesc




=== thumbsUp




=== thumbsDown




=== youtubeSquare




=== youtube




=== xing




=== xingSquare




=== youtubePlay




=== dropbox




=== stackOverflow




=== instagram




=== flickr




=== adn




=== bitbucket




=== bitbucketSquare




=== tumblr




=== tumblrSquare




=== longArrowDown




=== longArrowUp




=== longArrowLeft




=== longArrowRight




=== apple




=== windows




=== android




=== linux




=== dribbble




=== skype




=== foursquare




=== trello




=== female




=== male




=== gittip




=== gratipay




=== sunO




=== moonO




=== archive




=== bug




=== vk




=== weibo




=== renren




=== pagelines




=== stackExchange




=== arrowCircleORight




=== arrowCircleOLeft




=== toggleLeft




=== caretSquareOLeft




=== dotCircleO




=== wheelchair




=== vimeoSquare




=== turkishLira




=== try




=== plusSquareO




=== spaceShuttle




=== slack




=== envelopeSquare




=== wordpress




=== openid




=== institution




=== bank




=== university




=== mortarBoard




=== graduationCap




=== yahoo




=== google




=== reddit




=== redditSquare




=== stumbleuponCircle




=== stumbleupon




=== delicious




=== digg




=== piedPiper




=== piedPiperAlt




=== drupal




=== joomla




=== language




=== fax




=== building




=== child




=== paw




=== spoon




=== cube




=== cubes




=== behance




=== behanceSquare




=== steam




=== steamSquare




=== recycle




=== automobile




=== car




=== cab




=== taxi




=== tree




=== spotify




=== deviantart




=== soundcloud




=== database




=== filePdfO




=== fileWordO




=== fileExcelO




=== filePowerpointO




=== filePhotoO




=== filePictureO




=== fileImageO




=== fileZipO




=== fileArchiveO




=== fileSoundO




=== fileAudioO




=== fileMovieO




=== fileVideoO




=== fileCodeO




=== vine




=== codepen




=== jsfiddle




=== lifeBouy




=== lifeBuoy




=== lifeSaver




=== support




=== lifeRing




=== circleONotch




=== ra




=== rebel




=== ge




=== empire




=== gitSquare




=== git




=== yCombinatorSquare




=== ycSquare




=== hackerNews




=== tencentWeibo




=== qq




=== wechat




=== weixin




=== send




=== paperPlane




=== sendO




=== paperPlaneO




=== history




=== circleThin




=== header




=== paragraph




=== sliders




=== shareAlt




=== shareAltSquare




=== bomb




=== soccerBallO




=== futbolO




=== tty




=== binoculars




=== plug




=== slideshare




=== twitch




=== yelp




=== newspaperO




=== wifi




=== calculator




=== paypal




=== googleWallet




=== ccVisa




=== ccMastercard




=== ccDiscover




=== ccAmex




=== ccPaypal




=== ccStripe




=== bellSlash




=== bellSlashO




=== trash




=== copyright




=== at




=== eyedropper




=== paintBrush




=== birthdayCake




=== areaChart




=== pieChart




=== lineChart




=== lastfm




=== lastfmSquare




=== toggleOff




=== toggleOn




=== bicycle




=== bus




=== ioxhost




=== angellist




=== cc




=== shekel




=== sheqel




=== ils




=== meanpath




=== buysellads




=== connectdevelop




=== dashcube




=== forumbee




=== leanpub




=== sellsy




=== shirtsinbulk




=== simplybuilt




=== skyatlas




=== cartPlus




=== cartArrowDown




=== diamond




=== ship




=== userSecret




=== motorcycle




=== streetView




=== heartbeat




=== venus




=== mars




=== mercury




=== intersex




=== transgender




=== transgenderAlt




=== venusDouble




=== marsDouble




=== venusMars




=== marsStroke




=== marsStrokeV




=== marsStrokeH




=== neuter




=== genderless




=== facebookOfficial




=== pinterestP




=== whatsapp




=== server




=== userPlus




=== userTimes




=== hotel




=== bed




=== viacoin




=== train




=== subway




=== medium




=== yc




=== yCombinator




=== optinMonster




=== opencart




=== expeditedssl




=== battery4




=== batteryFull




=== battery3




=== batteryThreeQuarters




=== battery2




=== batteryHalf




=== battery1




=== batteryQuarter




=== battery0




=== batteryEmpty




=== mousePointer




=== iCursor




=== objectGroup




=== objectUngroup




=== stickyNote




=== stickyNoteO




=== ccJcb




=== ccDinersClub




=== clone




=== balanceScale




=== hourglassO




=== hourglass1




=== hourglassStart




=== hourglass2




=== hourglassHalf




=== hourglass3




=== hourglassEnd




=== hourglass




=== handGrabO




=== handRockO




=== handStopO




=== handPaperO




=== handScissorsO




=== handLizardO




=== handSpockO




=== handPointerO




=== handPeaceO




=== trademark




=== registered




=== creativeCommons




=== gg




=== ggCircle




=== tripadvisor




=== odnoklassniki




=== odnoklassnikiSquare




=== getPocket




=== wikipediaW




=== safari




=== chrome




=== firefox




=== opera




=== internetExplorer




=== tv




=== television




=== contao




=== s500px




=== amazon




=== calendarPlusO




=== calendarMinusO




=== calendarTimesO




=== calendarCheckO




=== industry




=== mapPin




=== mapSigns




=== mapO




=== map




=== commenting




=== commentingO




=== houzz




=== vimeo




=== blackTie




=== fonticons




=== redditAlien




=== edge




=== creditCardAlt




=== codiepie




=== modx




=== fortAwesome




=== usb




=== productHunt




=== mixcloud




=== scribd




=== pauseCircle




=== pauseCircleO




=== stopCircle




=== stopCircleO




=== shoppingBag




=== shoppingBasket




=== hashtag




=== bluetooth




=== bluetoothB




=== percent




== R::Signal

сигнал - запускает обработчики
== R::Signal

сигнал - запускает обработчики


=== new

конструктор


=== cb

добавляет обработчик


=== send

отправляет сигнал со всеми параметрами




=== new

конструктор


=== cb

добавляет обработчик


=== send

отправляет сигнал со всеми параметрами




=== new

конструктор


=== cb

добавляет обработчик


=== send

отправляет сигнал со всеми параметрами




=== new

конструктор


=== cb

добавляет обработчик


=== send

отправляет сигнал со всеми параметрами


== R::Skel

скелетон - его методы создают различные скелетоны
== R::Skel

скелетон - его методы создают различные скелетоны


=== new

конструктор


=== make

создаёт директорию для нового проекта




=== new

конструктор


=== make

создаёт директорию для нового проекта




=== new

конструктор


=== make

создаёт директорию для нового проекта




=== new

конструктор


=== make

создаёт директорию для нового проекта


== R::Sphinx

проводник сфинкса
== R::Sphinx

проводник сфинкса


=== new

конструктор


=== quote

переиначиваем quote


=== add

переиначиваем add


=== replace

переиначиваем replace


=== add_rt_index

добавляет реальный индекс


=== add_index

генерирует ресурс c индексом


=== form_index

формирует дефолтные данные для индекса


=== conf

генерирует и перезаписывает конфигурационный файл сфинкса


=== _paths

возвращает bin и conf


=== start

запускает sphinx


=== stop

останавливает sphinx


=== restart

перезапускает сфинкс


=== indexer

индексирует (обязательно после реконфигурирования)


=== drop

удаляет индекс


=== R::Model::Fieldset::search

добавляет полнотекстовый индекс для таблицы


=== R::Model::Fieldset::attr

добавляет атрибуты к индексу сфинкса


=== R::Model::Fieldset::_sync_sphinx

добавляет индекс в конфиг сфинкса


=== R::Model::Rowset::search

поиск по полнотекстовому индексу




=== new

конструктор


=== quote

переиначиваем quote


=== add

переиначиваем add


=== replace

переиначиваем replace


=== add_rt_index

добавляет реальный индекс


=== add_index

генерирует ресурс c индексом


=== form_index

формирует дефолтные данные для индекса


=== conf

генерирует и перезаписывает конфигурационный файл сфинкса


=== _paths

возвращает bin и conf


=== start

запускает sphinx


=== stop

останавливает sphinx


=== restart

перезапускает сфинкс


=== indexer

индексирует (обязательно после реконфигурирования)


=== drop

удаляет индекс


=== R::Model::Fieldset::search

добавляет полнотекстовый индекс для таблицы


=== R::Model::Fieldset::attr

добавляет атрибуты к индексу сфинкса


=== R::Model::Fieldset::_sync_sphinx

добавляет индекс в конфиг сфинкса


=== R::Model::Rowset::search

поиск по полнотекстовому индексу




=== new

конструктор


=== quote

переиначиваем quote


=== add

переиначиваем add


=== replace

переиначиваем replace


=== add_rt_index

добавляет реальный индекс


=== add_index

генерирует ресурс c индексом


=== form_index

формирует дефолтные данные для индекса


=== conf

генерирует и перезаписывает конфигурационный файл сфинкса


=== _paths

возвращает bin и conf


=== start

запускает sphinx


=== stop

останавливает sphinx


=== restart

перезапускает сфинкс


=== indexer

индексирует (обязательно после реконфигурирования)


=== drop

удаляет индекс


=== R::Model::Fieldset::search

добавляет полнотекстовый индекс для таблицы


=== R::Model::Fieldset::attr

добавляет атрибуты к индексу сфинкса


=== R::Model::Fieldset::_sync_sphinx

добавляет индекс в конфиг сфинкса


=== R::Model::Rowset::search

поиск по полнотекстовому индексу




=== new

конструктор


=== quote

переиначиваем quote


=== add

переиначиваем add


=== replace

переиначиваем replace


=== add_rt_index

добавляет реальный индекс


=== add_index

генерирует ресурс c индексом


=== form_index

формирует дефолтные данные для индекса


=== conf

генерирует и перезаписывает конфигурационный файл сфинкса


=== _paths

возвращает bin и conf


=== start

запускает sphinx


=== stop

останавливает sphinx


=== restart

перезапускает сфинкс


=== indexer

индексирует (обязательно после реконфигурирования)


=== drop

удаляет индекс


=== R::Model::Fieldset::search

добавляет полнотекстовый индекс для таблицы


=== R::Model::Fieldset::attr

добавляет атрибуты к индексу сфинкса


=== R::Model::Fieldset::_sync_sphinx

добавляет индекс в конфиг сфинкса


=== R::Model::Rowset::search

поиск по полнотекстовому индексу


== R::Sprite

возвращает спрайты
имеет спрайты в 
== R::Sprite

имеет спрайты в 


=== new

конструктор


=== render

распечатывает все спрайты
спрайт 




=== new

конструктор


=== render

распечатывает все спрайты
спрайт 




=== new

конструктор


=== render

распечатывает все спрайты
спрайт 




=== new

конструктор


=== render

распечатывает все спрайты
спрайт 


== R::Tty

утилиты для работы с терминалом
== R::Tty

утилиты для работы с терминалом


=== new

конструктор


=== confirm

спрашивает пользователя через stdin


=== select

спрашивает пользователя через stdin


=== mode

устанавливает кодировку всем потокам ввода-вывода


=== raw

устанавливает кодировку raw потокам ввода-вывода




=== new

конструктор


=== confirm

спрашивает пользователя через stdin


=== select

спрашивает пользователя через stdin


=== mode

устанавливает кодировку всем потокам ввода-вывода


=== raw

устанавливает кодировку raw потокам ввода-вывода




=== new

конструктор


=== confirm

спрашивает пользователя через stdin


=== select

спрашивает пользователя через stdin


=== mode

устанавливает кодировку всем потокам ввода-вывода


=== raw

устанавливает кодировку raw потокам ввода-вывода




=== new

конструктор


=== confirm

спрашивает пользователя через stdin


=== select

спрашивает пользователя через stdin


=== mode

устанавливает кодировку всем потокам ввода-вывода


=== raw

устанавливает кодировку raw потокам ввода-вывода


== R::View

шаблонизатор
== R::View

шаблонизатор


=== new

конструктор


=== route

устанавливает роутер для классов


=== action

устанавливает экшн


=== route_on

устанавливает ON


=== compile_path

возвращает скомпиллированный путь


=== scenario_path

возвращает путь для сценария


=== compile

просматривает директорию и решает: какие файлы надо парсить, если скомпиленного файла нет или его время модификации больше скомпиленного (он старше)


=== load

загружает шаблоны


=== init_classes

инициализирует классы


=== parsefile

парсит файл и сохраняет в путь $outfile


=== endsk



=== endline

выбрасывает endline


=== endgosub

выбрасывает gosub


=== masking



=== stmt_class

объявление класса


=== __INIT__CLASS__



=== stmt_sub

подпрограмма


=== stmt_do

блок - подпрограмма без имени


=== stmt_for

начало цикла


=== parse

парсит из строки шаблон и возвращает пакет perl


=== expression

выражение в <% %>


=== name



=== my



=== init



=== __sc__



=== coding

возвращает код для переключения в режим кода


=== puting

возвращает код для переключения в режим текста


=== current_class

возвращает имя текущего класса по стеку


=== masking_quote

добавляет ; для вывода, если есть выражение


=== get_name

возвращает название блока


=== check

проверяет параметры на верхушке стека и выбрасывает ошибку, если они не совпадают


=== error

выбрасывает ошибку


=== replace_dollar

заменяет переменные в строке


=== trace

отображает операции со стеком в лог


=== :



=== push

записывает в стек


=== pop

выбрасывает из стека


=== top

просматривает вершину стека


=== etop

просматривает вершину стека, если в стеке ничего нет выдаёт {}


=== empty

стек пуст


=== get_class



=== routers

возвращает экшены


=== для



=== render

рендерит в output


=== renderis

рендерит и возвращает текст


=== eval

вычисляет выражение на языке шаблона


=== __RUN__



=== create

создаёт отображение из текста и вычисляет его


=== createlog

логирует парсинг


=== scenario

запускает сценарии


=== require

подключает скрипт, написанный на R::View




=== new

конструктор


=== route

устанавливает роутер для классов


=== action

устанавливает экшн


=== route_on

устанавливает ON


=== compile_path

возвращает скомпиллированный путь


=== scenario_path

возвращает путь для сценария


=== compile

просматривает директорию и решает: какие файлы надо парсить, если скомпиленного файла нет или его время модификации больше скомпиленного (он старше)


=== load

загружает шаблоны


=== init_classes

инициализирует классы


=== parsefile

парсит файл и сохраняет в путь $outfile


=== endsk




=== endline

выбрасывает endline


=== endgosub

выбрасывает gosub


=== masking




=== stmt_class

объявление класса


=== __INIT__CLASS__




=== stmt_sub

подпрограмма


=== stmt_do

блок - подпрограмма без имени


=== stmt_for

начало цикла


=== parse

парсит из строки шаблон и возвращает пакет perl


=== expression

выражение в <% %>


=== name




=== my




=== init






=== new

конструктор


=== route

устанавливает роутер для классов


=== action

устанавливает экшн


=== route_on

устанавливает ON


=== compile_path

возвращает скомпиллированный путь


=== scenario_path

возвращает путь для сценария


=== compile

просматривает директорию и решает: какие файлы надо парсить, если скомпиленного файла нет или его время модификации больше скомпиленного (он старше)


=== load

загружает шаблоны


=== init_classes

инициализирует классы


=== parsefile

парсит файл и сохраняет в путь $outfile


=== endsk




=== endline

выбрасывает endline


=== endgosub

выбрасывает gosub


=== masking




=== stmt_class

объявление класса


=== __INIT__CLASS__




=== stmt_sub

подпрограмма


=== stmt_do

блок - подпрограмма без имени


=== stmt_for

начало цикла


=== parse

парсит из строки шаблон и возвращает пакет perl


=== expression

выражение в <% %>


=== name




=== my




=== init






=== new

конструктор


=== route

устанавливает роутер для классов


=== action

устанавливает экшн


=== route_on

устанавливает ON


=== compile_path

возвращает скомпиллированный путь


=== scenario_path

возвращает путь для сценария


=== compile

просматривает директорию и решает: какие файлы надо парсить, если скомпиленного файла нет или его время модификации больше скомпиленного (он старше)


=== load

загружает шаблоны


=== init_classes

инициализирует классы


=== parsefile

парсит файл и сохраняет в путь $outfile


=== endsk




=== endline

выбрасывает endline


=== endgosub

выбрасывает gosub


=== masking




=== stmt_class

объявление класса


=== __INIT__CLASS__




=== stmt_sub

подпрограмма


=== stmt_do

блок - подпрограмма без имени


=== stmt_for

начало цикла


=== parse

парсит из строки шаблон и возвращает пакет perl


=== expression

выражение в <% %>


=== name




=== my




=== init




== R::View::Views


== R::View::Views



=== __sc__



=== coding

возвращает код для переключения в режим кода


=== puting

возвращает код для переключения в режим текста


=== current_class

возвращает имя текущего класса по стеку


=== masking_quote

добавляет ; для вывода, если есть выражение


=== get_name

возвращает название блока


=== check

проверяет параметры на верхушке стека и выбрасывает ошибку, если они не совпадают


=== error

выбрасывает ошибку


=== replace_dollar

заменяет переменные в строке


=== trace

отображает операции со стеком в лог


=== :



=== push

записывает в стек


=== pop

выбрасывает из стека


=== top

просматривает вершину стека


=== etop

просматривает вершину стека, если в стеке ничего нет выдаёт {}


=== empty

стек пуст


=== get_class



=== routers

возвращает экшены


=== для



=== render

рендерит в output


=== renderis

рендерит и возвращает текст


=== eval

вычисляет выражение на языке шаблона


=== __RUN__



=== create

создаёт отображение из текста и вычисляет его


=== createlog

логирует парсинг


=== scenario

запускает сценарии


=== require

подключает скрипт, написанный на R::View




=== __sc__




=== coding

возвращает код для переключения в режим кода


=== puting

возвращает код для переключения в режим текста


=== current_class

возвращает имя текущего класса по стеку


=== masking_quote

добавляет ; для вывода, если есть выражение


=== get_name

возвращает название блока


=== check

проверяет параметры на верхушке стека и выбрасывает ошибку, если они не совпадают


=== error

выбрасывает ошибку


=== replace_dollar

заменяет переменные в строке


=== trace

отображает операции со стеком в лог


=== :




=== push

записывает в стек


=== pop

выбрасывает из стека


=== top

просматривает вершину стека


=== etop

просматривает вершину стека, если в стеке ничего нет выдаёт {}


=== empty

стек пуст


=== get_class




=== routers

возвращает экшены


=== для




=== render

рендерит в output


=== renderis

рендерит и возвращает текст


=== eval

вычисляет выражение на языке шаблона


=== __RUN__




=== create

создаёт отображение из текста и вычисляет его


=== createlog

логирует парсинг


=== scenario

запускает сценарии


=== require

подключает скрипт, написанный на R::View




=== __sc__




=== coding

возвращает код для переключения в режим кода


=== puting

возвращает код для переключения в режим текста


=== current_class

возвращает имя текущего класса по стеку


=== masking_quote

добавляет ; для вывода, если есть выражение


=== get_name

возвращает название блока


=== check

проверяет параметры на верхушке стека и выбрасывает ошибку, если они не совпадают


=== error

выбрасывает ошибку


=== replace_dollar

заменяет переменные в строке


=== trace

отображает операции со стеком в лог


=== :




=== push

записывает в стек


=== pop

выбрасывает из стека


=== top

просматривает вершину стека


=== etop

просматривает вершину стека, если в стеке ничего нет выдаёт {}


=== empty

стек пуст


=== get_class




=== routers

возвращает экшены


=== для




=== render

рендерит в output


=== renderis

рендерит и возвращает текст


=== eval

вычисляет выражение на языке шаблона


=== __RUN__




=== create

создаёт отображение из текста и вычисляет его


=== createlog

логирует парсинг


=== scenario

запускает сценарии


=== require

подключает скрипт, написанный на R::View


== R::View::Filters

пакет содержит фильтры шаблонов
== R::View::Filters

пакет содержит фильтры шаблонов


=== new

конструктор




=== new

конструктор




=== new

конструктор




=== new

конструктор


== R::View::Superfilters

пакет содержит суперфильтры шаблонов
== R::View::Superfilters

пакет содержит суперфильтры шаблонов


=== new

конструктор


=== new

конструктор


=== new

конструктор


=== new

конструктор
