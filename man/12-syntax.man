= Язык шаблонизатора R::View

== Инициализация фреймворка

[init]

	use common::sense;
	use lib "lib";
	use R::App qw/$app msg msg1/;
	
	$app->man->conf;
	
	my $res;
	
[test]


== Синтаксический анализатор

Синтаксический анализатор 

	my $s = $app->syntax->new;
	
Вот так задаётся таблица операторов:
	
	$s->tr("fy", qw{ + - });
	$s->tr("yfx", qw{ ^ });
	$s->tr("xfy", qw{ * / });
	$s->tr("xfy", qw{ + - });
	
* `tr` - строка таблицы, она увеличивает приоритет оператора.
* `td`- ячейка. Не увеличивает приоритет.

Скобки:

	$s->br(qw{ ( ) });

Терминалы:
	
	$s->x("num" => qr{ \d+|\d*\.\d+ }x);

Первым параметром выступает префикс.
	
Каждый оператор, скобка или операнд имеет отображение в иной язык программирования (в нашем случае в `perl`, но может быть и в `javascript`).
Добавим отображения:
	
	
	$s->templates(
		"fy +" => "(0+({{ left }}))",
		"fy	-" => "(-({{ left }}))",
		"yfx ^" => "(({{ left }}) ** ({{ right }}))",
		"xfy *" => "(({{ left }}) * ({{ right }}))",
		"xfy /" => "(({{ left }}) / ({{ right }}))",
		"xfy +" => "(({{ left }}) + ({{ right }}))",
		"xfy -" => "(({{ left }}) - ({{ right }}))",
		"br (" => "( {{ right }} )",
		"num" => "{{ num }}",
	);
	
	
	
	$s->eval("-1");				# -1
	$s->eval("1 + -5");			# -4
	$s->eval("6+3*2");			# 12
	$s->eval("(6+3)*2");		# 18
	$s->eval("-(6+3)*2");		# -18
	$s->eval("-(6+3)*-2");	# 18
	

	