use ModelEdit;


# авторизируемся
return status 401 unless $ini->{site}{test};


if($param->{method}) {
	#$_watch{"main.ini"} = mtime("main.ini");
	Utils::replace("main.ini", \&model_edit);
	#$_watch{"main.ini"} = mtime("main.ini");
	#parse_perm();
	return;
}


$install = get_install_info("install.sql", "../rubin/install.sql");
$_info = get_info();
$info = get_ini_info();
$rules = $info->{rules};

%tab = Utils::set(keys(%$_info), keys(%$install), map { keys(%$_) } values %$info);

# tab_selfcol 
# tab_validator 
# tab_update
# tab_error 
# tab_valid 
# rules 
# tab_rules

%column_type = ("int(11)" => "int", "tinyint(4)" => "tinyint");

for my $tab (keys %tab) {
	
	$perm = $info->{tab_rules}{$tab};
	$noauth = $perm->{noauth};
	$user = $perm->{user};
	$self = $perm->{self};
	
	push @table, $table = {
		name => $tab,
		
		selfcol => join(" &rarr ", map { $_->[0].".".$_->[1] } @{$info->{tab_selfcol}{$tab}}),
		
		noauth_add => $noauth->{add},
		noauth_view => $noauth->{view},
		noauth_rm => $noauth->{rm},
		noauth_edit => $noauth->{edit},
		
		user_add => $user->{add},
		user_view => $user->{view},
		user_rm => $user->{rm},
		user_edit => $user->{edit},
		
		self_add => $self->{add},
		self_view => $self->{view},
		self_rm => $self->{rm},
		self_edit => $self->{edit},
		
		is_sql => exists($_info->{$tab}),
		is_install => exists($install->{$tab}),
		
		package => $install->{$tab}{package},
		
		order => $install->{$tab}{order} // 100000
	};
	
	%col = Utils::set(keys(%{$_info->{$tab}}), keys(%{$rules->{$tab}}), keys(%{$info->{tab_valid}{$tab}}), keys(%{$install->{$tab}{cols}}) );
	for $col (keys %col) {
	
		$sql = $_info->{$tab}{$col};
		$ins = $install->{$tab}{cols}{$col};
		
		$perm = $info->{rules}{$tab}{$col};
		$noauth = $perm->{noauth};
		$user = $perm->{user};
		$self = $perm->{self};
	
		push @{$table->{col}}, {
		
			name => $col,
			
			noauth_add => $noauth->{add},
			noauth_view => $noauth->{view},
			#noauth_rm => $noauth->{rm},
			noauth_edit => $noauth->{edit},
			
			user_add => $user->{add},
			user_view => $user->{view},
			#user_rm => $user->{rm},
			user_edit => $user->{edit},
			
			self_add => $self->{add},
			self_view => $self->{view},
			#self_rm => $self->{rm},
			self_edit => $self->{edit},

			is_sql => !!$sql,
			is_install => !!$ins,

			package => $ins->{package} // "",
			install => $ins->{install} // "",
			sql => ($sql? (($column_type{$sql->{column_type}} || $sql->{column_type} || "").
				($sql->{is_nullable} eq "YES" || $sql->{column_key} =~ /PRI/? "": " not null").
				(defined($sql->{column_default})? " default $sql->{column_default}": "").
				($sql->{column_key} =~ /PRI/? " primary key": "").
				($sql->{extra} ne ""? " $sql->{extra}": "")): ""),
			valid => $info->{tab_valid}{$tab}{$col},
			
			order => $sql->{ordinal_position} || $ins->{order} || "",
		};
	}
	
	$table->{col} = [ sort { $a->{order} <=> $b->{order} } @{$table->{col}} ];
	msg $table->{col};
}

@table = sort {  $a->{order} <=> $b->{order} } @table;

{
tables => \@table
}