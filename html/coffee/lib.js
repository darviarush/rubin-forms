// Generated by CoffeeScript 1.7.1
var $, $A, $H, CAjaxIoRepository, CAjaxRepository, CArray, CAutocompleteWidget, CButtonWidget, CCenterModalWidget, CCheckboxWidget, CColor, CCookieRepository, CCssF, CEffect, CEraseWidget, CEvent, CFormWidget, CFunction, CHelper, CIframeWidget, CImgWidget, CInit, CInputWidget, CIoLoadRepository, CIoRepository, CLinkWidget, CListWidget, CLoadWidget, CLoaderWidget, CLongPoll, CMath, CMenuWidget, CModalWidget, CModel, CNavigator, CNode, CParam, CPingWidget, CRadioWidget, CRadix, CReloadWidget, CRepository, CResetWidget, CRoot, CRouterWidget, CRows, CRows$st, CSaveWidget, CScriptWidget, CScrollWidget, CSelectWidget, CSelectableWidget, CSend, CSocket, CSortableHTML5Widget, CSortableWidget, CStatusWidget, CString, CSubmitWidget, CTemplate, CTemplateWidget, CTextareaWidget, CTipFocusWidget, CTipWidget, CTooltipWidget, CTraceback, CUploadWidget, CUrl, CValid, CView, CWidget, CWidgets, IE, cubicBezier, escapeHTML, escapeJS, escapeString, extend, extend_deep, extend_deep_uniq, extend_uniq, fromJSON, say, toJSON, unescapeHTML,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

if (!window.console) {
  window.console = {
    notFound: 1,
    log: function() {}
  };
}

IE = '\v' === 'v' || (document.documentMode != null) ? window.MSStream ? 11 : window.atob ? 10 : document.addEventListener ? 9 : document.querySelector ? 8 : window.XMLHttpRequest ? 7 : document.compatMode ? 6 : 5 : void 0;

CTraceback = function() {
  var f, i;
  f = arguments.callee;
  i = 0;
  return [
    (function() {
      var _results;
      _results = [];
      while ((f = f.caller && i++ < 10)) {
        _results.push(f.name || '<anonimous function>');
      }
      return _results;
    })()
  ].reverse().join(' → ');
};

$A = function(n, sep) {
  if (n instanceof Array) {
    return n;
  } else if (typeof n === 'object') {
    return Array.prototype.slice.call(n);
  } else {
    return String(n).split(sep || /\s+/);
  }
};

$H = function(n, sep, eq) {
  var i, m, x, _i, _j, _len, _ref;
  if (sep == null) {
    sep = /s*;\s*/;
  }
  if (eq == null) {
    eq = /\s*:\s*/;
  }
  if (n instanceof Object) {
    return n;
  } else if (n instanceof Array) {
    x = {};
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      if (i % 2 === 0) {
        x[n[i]] = n[i + 1];
      }
    }
    return x;
  } else {
    x = {};
    _ref = String(n).split(sep);
    for (_j = 0, _len = _ref.length; _j < _len; _j++) {
      i = _ref[_j];
      m = i.split(eq);
      x[m[0]] = m[1];
    }
    return x;
  }
};

say = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  console.log.apply(console, args);
  return args[args.length - 1];
};

escapeHTML = function(s) {
  return String(s).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/\'/g, '&#39;');
};

unescapeHTML = (escapeHTML.div$ = document.createElement('div')).textContent != null ? function(s) {
  var div, x;
  (div = escapeHTML.div$).innerHTML = s;
  x = div.textContent;
  div.innerHTML = '';
  return x;
} : function(s) {
  var div, x;
  (div = escapeHTML.div$).innerHTML = s;
  x = div.innerText;
  div.innerHTML = '';
  return x;
};

escapeJS = function(s) {
  return String(s).replace(/([\'\"\\])/g, '\\$1').replace(/\r/g, '\\r').replace(/\n/g, '\\n');
};

escapeString = function(s) {
  return ['"', escapeJS(s), '"'].join("");
};

fromJSON = function(s) {
  var e, r;
  try {
    return eval(r = ["(", s, ")"].join(""));
  } catch (_error) {
    e = _error;
    say('fromJSON error: ', e, r);
    throw "fromjson error";
  }
};

toJSON = window.JSON ? JSON.stringify : function(s) {
  var a, k, v;
  switch (false) {
    case !(s == null):
      return "null";
    case !(s instanceof Array):
      return [
        "[", ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = s.length; _i < _len; _i++) {
            a = s[_i];
            _results.push(toJSON(a));
          }
          return _results;
        })()).join(","), "]"
      ].join("");
    case !(s instanceof Object):
      return [
        "{", ((function() {
          var _results;
          _results = [];
          for (k in s) {
            v = s[k];
            _results.push([escapeString(k), ":", toJSON(v)].join(""));
          }
          return _results;
        })()).join(","), "}"
      ].join("");
    case typeof s !== "string":
      return escapeString(s);
    case !isNaN(s):
      return "null";
    default:
      return s;
  }
};

extend = function() {
  var arg, args, k, obj, v, _i, _len;
  obj = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  for (_i = 0, _len = args.length; _i < _len; _i++) {
    arg = args[_i];
    for (k in arg) {
      v = arg[k];
      if (v != null) {
        obj[k] = v;
      } else {
        delete obj[k];
      }
    }
  }
  return obj;
};

extend_uniq = function() {
  var arg, args, k, obj, v, _i, _len;
  obj = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  for (_i = 0, _len = args.length; _i < _len; _i++) {
    arg = args[_i];
    for (k in arg) {
      v = arg[k];
      if (v != null) {
        if (!(k in obj)) {
          obj[k] = v;
        }
      } else {
        delete obj[k];
      }
    }
  }
  return obj;
};

extend_deep = function() {
  var arg, args, k, o, obj, v, _i, _len;
  obj = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  for (_i = 0, _len = args.length; _i < _len; _i++) {
    arg = args[_i];
    for (k in arg) {
      v = arg[k];
      if (v != null) {
        if (v instanceof Object && (o = obj[k]) instanceof Object) {
          extend_deep(o, v);
        } else {
          obj[k] = v;
        }
      } else {
        delete obj[k];
      }
    }
  }
  return obj;
};

extend_deep_uniq = function() {
  var arg, args, k, o, obj, v, _i, _len;
  obj = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  for (_i = 0, _len = args.length; _i < _len; _i++) {
    arg = args[_i];
    for (k in arg) {
      v = arg[k];
      if (v != null) {
        if (v instanceof Object && (o = obj[k]) instanceof Object) {
          extend_deep(o, v);
        } else {
          if (!(k in obj)) {
            obj[k] = v;
          }
        }
      } else {
        delete obj[k];
      }
    }
  }
  return obj;
};

extend_uniq(String.prototype, CString = {
  trim: function() {
    return String(this).replace(/^\s+|\s+$/g, "");
  },
  ucFirst: function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
  },
  lcFirst: function() {
    return this.charAt(0).toLowerCase() + this.slice(1);
  },
  uc: function() {
    return this.ucFirst().toCamelCase();
  },
  lc: function() {
    return this.lcFirst().fromCamelCase();
  },
  toCamelCase: function() {
    return this.replace(/-\w/g, function(a) {
      return a.slice(1).toUpperCase();
    });
  },
  fromCamelCase: function() {
    return this.replace(/[A-Z]/g, function(a) {
      return '-' + a.toLowerCase();
    });
  }
});

extend_uniq(Array.prototype, CArray = {
  indexOf: function(e, from) {
    var a, i, _i, _len, _ref;
    _ref = (from ? this.slice(from) : this);
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      a = _ref[i];
      if (a === e) {
        return i;
      }
    }
    return -1;
  },
  map: function(fn, thisp) {
    var i, r, res, _i, _len, _ref;
    if (thisp == null) {
      thisp = this;
    }
    _ref = (res = new Array(this.length));
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      r = _ref[i];
      if (i in this) {
        res[i] = fn.call(thisp, this[i], i, this);
      }
    }
    return res;
  },
  forEach: function(fn, thisp) {
    var i, r, _i, _len;
    if (thisp == null) {
      thisp = this;
    }
    for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
      r = this[i];
      if (i in this) {
        fn.call(thisp, this[i], i, this);
      }
    }
    return void 0;
  }
});

extend_uniq(Function.prototype, CFunction = {
  code: function() {
    var a, args, name;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    a = String(this).replace(/\$(\d+)\$/g, function(a, idx) {
      var x;
      if (typeof (x = args[parseInt(idx)]) === 'function') {
        return String(x).replace(/function(\s+[\$\w]+)?\s*\([^\)]*\)\s*\{|\}$/, '');
      } else {
        return x;
      }
    });
    a = a.replace(/function(\s+[\$\w]+)?/, 'code$=function ' + name + "$inline");
    return a;
  },
  inline: function() {
    var args, code$;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    code$ = null;
    eval(this.code.apply(this, args));
    return code$;
  },
  rename: function(name) {
    var code$;
    code$ = null;
    eval(String(this).replace(/function(\s+[\$\w]+)?/, 'code$=function ' + name));
    return code$;
  },
  getName: escape.name ? function() {
    return this.name;
  } : function() {
    var _ref;
    return ((_ref = String(this).match(/function\s+(\w+)/)) != null ? _ref[1] : void 0) || "";
  },
  getMethodName: function(obj) {
    var fn, name;
    for (name in obj) {
      fn = obj[name];
      if (fn === this) {
        return name;
      }
    }
    return null;
  },
  init: function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return CRoot._init_widgets.push([this, args || [this.getName().lc()]]);
  },
  "implements": function() {
    var args, i, interFace, n, p, replace, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    replace = typeof args[args.length - 1] !== 'function' ? args.pop() : {};
    n = this.prototype;
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      interFace = args[_i];
      p = interFace.prototype;
      for (i in p) {
        n[replace[i] || i] = p[i];
      }
    }
    return this;
  },
  implements_own: function() {
    var args, i, interFace, n, p, replace, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    replace = typeof args[args.length - 1] !== 'function' ? args.pop() : {};
    n = this.prototype;
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      interFace = args[_i];
      p = interFace.prototype;
      for (i in p) {
        if (!__hasProp.call(p, i)) continue;
        n[replace[i] || i] = p[i];
      }
    }
    return this;
  },
  extend: function(param) {
    return extend(this.prototype, param);
  }
});

CNavigator = (function() {
  var Ag, Nav, Platform, d, n, r, summary, w, _summary;
  w = window;
  d = document;
  Nav = window.navigator || {};
  n = {};
  r = {};
  _summary = [];
  summary = function() {
    var i, v;
    for (i in n) {
      v = n[i];
      if (!(v && !(i in r))) {
        continue;
      }
      r[i] = 1;
      _summary.push(typeof v === 'number' ? i + v : i);
    }
    return null;
  };
  Ag = Nav.userAgent || '';
  Platform = Nav.platform || '';
  n.ieMode = d.documentMode;
  n.ie = IE;
  n.opera = w.opera ? opera.version && opera.version() || (d.addEventListener ? 7 : d.getElementsByTagName ? 6 : d.getElementById ? 5 : 4) : void 0;
  if (w.chrome && !w.chrome.webstore) {
    n['opera15+'] = true;
  }
  n.operamini = String(window.operamini) === '[object OperaMini]';
  n.FF = typeof InstallTrigger !== 'undefined';
  n.chrome = !!w.chrome;
  n.chromium = /cros i686/i.test(Platform);
  n.webkit = w.webkitURL !== null;
  n.safari = w.WheelEvent && !n.FF && !n.chrome && !IE && (/a/.__proto__ !== '//' && 6 || !d.head && 5 || d.hasFocus && 4 || d.adoptNode && 3 || 2);
  n.khtml = Nav.vendor === 'KDE';
  n.konqueror = n.khtml || d.childNodes && !d.all && !Nav.taintEnabled && !n.chrome && !n.safari;
  summary();
  n.ios = /iP(ad|hone|od)/i.test(Ag);
  n.linux = /linux/i.test(Platform) && !/android|cros/i.test(Platform);
  n.bsd = /bsd/i.test(Platform);
  n.qnx = /qnx/i.test(Platform);
  n.mac = /mac/i.test(Platform);
  n.win = /win/i.test(Platform);
  n.android = /android/i.test(Platform);
  summary();
  n.touch = (__indexOf.call(w, 'ontouchstart') >= 0) || Nav.msMaxTouchPoints;
  n.retina = w.devicePixelRatio >= 1.5;
  n.fileapi = !!w.FileReader;
  summary();
  n.summary = _summary.join(" ");
  n.agent = Ag;
  n.platform = Platform;
  return n;
})();

CRows$st = function(arr) {
  var field, fields, i, out, outrow, outrows, row, rows, st, _i, _j, _len, _len1, _ref, _ref1;
  st = [arr];
  while (st.length) {
    _ref = st.pop(), out = _ref[0], fields = _ref[1], rows = _ref[2];
    out[fields.key] = outrows = [];
    for (_i = 0, _len = rows.length; _i < _len; _i++) {
      row = rows[_i];
      outrows.push(outrow = $3$);
      _ref1 = fields.fields;
      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
        field = _ref1[i];
        if (field instanceof Object) {
          st.push([outrow, $2$]);
        } else {
          outrow[$0$] = row[$1$];
        }
      }
    }
  }
  return void 0;
};

CRows = {
  from$st: CRows$st.inline('from$st', 'field', 'i', 'field, row[i]', '{}'),
  to$st: CRows$st.inline('to$st', 'i', 'field', '{key: i, fields: field.fields}, row[field.key]', '[]'),
  from: function(data) {
    var fields, ret, toFields;
    if (typeof data === "string") {
      data = fromJSON(data);
    }
    toFields = function(fld) {
      var field, fields, _i, _len;
      fields = [];
      for (_i = 0, _len = fld.length; _i < _len; _i++) {
        field = fld[_i];
        fields.push(field instanceof Array ? {
          key: field[0],
          fields: toFields(field.slice(1))
        } : field);
      }
      return fields;
    };
    fields = toFields(data.fields);
    CRows.from$st([
      ret = [], {
        key: 0,
        fields: fields
      }, data.rows
    ]);
    return ret[0];
  },
  to: function(rows) {
    var fields, fld, ret, toFields, _ref;
    if (rows.length === 0) {
      return {
        rows: [],
        fields: []
      };
    }
    toFields = function(rows, key) {
      var f, field, fields, fld, row, val;
      fields = [key];
      fld = [];
      row = rows[0];
      for (field in row) {
        fields.push((val = row[field]) instanceof Array ? (f = toFields(val, field), fld.push(f[1]), f[0]) : (fld.push(field), field));
      }
      return [
        fields, {
          key: key,
          fields: fld
        }
      ];
    };
    _ref = toFields(rows, 0), fields = _ref[0], fld = _ref[1];
    fields.splice(0, 1);
    CRows.to$st([ret = [], fld, rows]);
    return {
      fields: fields,
      rows: ret[0]
    };
  }
};

CRadix = {
  to: function(n, radix, sep) {
    var A, a, x, y;
    if (sep == null) {
      sep = "";
    }
    x = y = "";
    A = "A".charCodeAt(0) - 10;
    a = "a".charCodeAt(0) - 36;
    while (true) {
      y = n % radix;
      x = (y < 10 ? String(y) : String.fromCharCode(y + (y < 36 ? A : y < 62 ? a : 128 - 62))) + sep + x;
      if (!(n = parseInt(n / radix))) {
        break;
      }
    }
    return x;
  },
  from: function(s, radix) {
    var A, Z, a, ch, i, len, x, z, _0, _9;
    i = x = 0;
    _9 = "9".charCodeAt(0);
    _0 = "0".charCodeAt(0);
    Z = "Z".charCodeAt(0);
    A = "A".charCodeAt(0) - 10;
    z = "z".charCodeAt(0);
    a = "a".charCodeAt(0) - 36;
    len = (s = String(s)).length;
    while (i < len) {
      ch = s.charCodeAt(i);
      x = x * radix + ch - (ch <= _9 ? _0 : ch <= Z ? A : ch <= z ? a : 128 - 62);
      i++;
    }
    return x;
  }
};

CUrl = {
  from: function(uri) {
    var m;
    if (m = uri.match(/^(?:(?:(\w+):)?\/\/([^\/:?#]+)(?::(\d+))?)?(?:([^\?#]*))?(?:\?([^#]*))?(?:\#(.*))?$/)) {
      return {
        href: uri,
        protocol: m[1] || "",
        host: m[2] || "",
        port: m[3] || "",
        pathname: m[4] || "",
        search: m[5] || "",
        hash: m[6] || "",
        param: (m[5] ? CParam.from(m[5]) : {})
      };
    } else {
      return null;
    }
  },
  to: function(a) {
    var p, s, search;
    s = a.host ? ((p = a.protocol) ? p + ":" : "") + "//" + a.host + ((p = a.port) ? ":" + p : "") : "";
    if (p = a.pathname) {
      s = (s ? s + (p[0] !== "/" ? "/" : "") + p : p);
    }
    search = CParam.from(a.search);
    extend(search, a.param);
    search = CParam.to(search);
    if (search) {
      s += "?" + search;
    }
    if (p = a.hash) {
      s += "#" + p;
    }
    return s;
  }
};

CParam = {
  get: function(url) {
    var match;
    if (url == null) {
      url = document.location;
    }
    if (match = String(url).match(/\?(.*)/)) {
      return CParam.from(match[1]);
    } else {
      return {};
    }
  },
  add: function(url, param) {
    return url + (/\?/.test(url) ? "&" : "?") + CParam.to(param);
  },
  to: function(param, sep) {
    var key, val;
    if (sep == null) {
      sep = "&";
    }
    if (param instanceof Object) {
      return ((function() {
        var _results;
        _results = [];
        for (key in param) {
          val = param[key];
          if (val != null) {
            _results.push([escape(key), escape(val instanceof Object ? toJSON(val) : String(val))].join("="));
          }
        }
        return _results;
      })()).join(sep);
    } else {
      return param;
    }
  },
  from: function(param, sep) {
    var a, i, x, _i, _len, _ref;
    if (sep == null) {
      sep = /&/;
    }
    if (!param) {
      return {};
    }
    x = {};
    _ref = param.split(sep);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      a = i.match(/([^=]+)=?(.*)/);
      x[unescape(a[1])] = (a[2] ? unescape(a[2]) : "");
    }
    return x;
  }
};

CColor = (function() {
  var rgba$;

  function CColor(r, g, b, a) {
    this.r = parseInt(r);
    this.g = parseInt(g);
    this.b = parseInt(b);
    this.a = parseFloat(a);
  }

  CColor.prototype.px = 'rgba';

  CColor.prototype.toHsl = function() {
    return this.constructor.rgbToHsl(this.r, this.g, this.b);
  };

  CColor.prototype.toHsla = function() {
    var h;
    (h = this.toHsl()).push(this.a);
    return h;
  };

  CColor.prototype.toRgb = function() {
    return [this.r, this.g, this.b];
  };

  CColor.prototype.toRgba = function() {
    return [this.r, this.g, this.b, this.a];
  };

  CColor.prototype.toNumber = function() {
    return this.r * 256 * 256 * 256 + this.g * 256 * 256 + this.b * 256 + parseInt(this.a * 255);
  };

  CColor.fromHsl = function(h, s, l) {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(CColor, __slice.call(this.hslToRgb(h, s, l)).concat([1]), function(){});
  };

  CColor.fromRgb = function(r, g, b) {
    return new CColor(r, g, b, 1);
  };

  CColor.fromRgba = function(r, g, b, a) {
    return new CColor(r, g, b, a);
  };

  CColor.fromHsla = function(h, s, l, a) {
    var rgb;
    rgb = this.hslToRgb(h, s, l);
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(CColor, __slice.call(rgb).concat([a]), function(){});
  };

  CColor.fromNumber = function(color) {
    var b, g, r;
    return new CColor(r = parseInt(color / 256 / 256 / 256), g = parseInt((color - (r = r * 256 * 256 * 256)) / 256 / 256), b = parseInt((color - r - (g = g * 256 * 256)) / 256), (color - r - g - b * 256) / 255);
  };

  CColor.fromHex = function(hex) {
    if (hex.length === 4) {
      return new CColor(hex[1] * 16, hex[2] * 16, hex[3] * 16, 1);
    } else {
      return new CColor(hex.slice(1, 3), hex.slice(3, 5), hex.slice(5), 1);
    }
  };

  CColor.prototype.rgba = rgba$ = function() {
    return "rgba(" + this.r + ", " + this.g + ", " + this.b + ", " + this.a + ")";
  };

  CColor.prototype.rgb = function() {
    return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")";
  };

  CColor.prototype.hex = function() {
    var pad, to;
    pad = CMath.pad;
    to = CRadix.to;
    return "#" + (pad(to(this.r, 16))) + (pad(to(this.g, 16))) + (pad(to(this.b, 16)));
  };

  CColor.prototype.smallhex = function() {
    var to;
    to = CRadix.to;
    return "#" + (to(parseInt(this.r / 16), 16)) + (to(parseInt(this.g / 16), 16)) + (to(parseInt(this.b / 16), 16));
  };

  CColor.prototype.hsl = function() {
    var x;
    x = this.toHsl();
    return "hsl(" + x[0] + ", " + x[1] + "%, " + x[2] + "%)";
  };

  CColor.prototype.hsla = function() {
    var x;
    x = this.toHsl();
    return "hsla(" + x[0] + ", " + x[1] + "%, " + x[2] + "%, " + this.a + ")";
  };

  CColor.prototype.name = function() {
    var n;
    if (!(n = this.constructor.names)) {
      n = this.constructor.build_names();
    }
    return n[this.hex()];
  };

  CColor.prototype.iname = function() {
    var c, color, dis, fhex, min, n, name;
    if (!(n = this.constructor.names)) {
      n = this.constructor.build_names();
    }
    if (name = n[this.hex()]) {
      return name;
    }
    min = Number.POSITIVE_INFINITY;
    fhex = this.constructor.fromHex;
    for (color in n) {
      name = n[color];
      if (!(min > (dis = this.distance(fhex(color))))) {
        continue;
      }
      min = dis;
      c = name;
    }
    return c;
  };

  CColor.prototype.distancea = function(color) {
    var sqr;
    sqr = CMath.quad;
    return Math.sqrt(sqr(this.r - color.r) + sqr(this.g - color.g) + sqr(this.b - color.b) + sqr((this.a - color.a) * 255));
  };

  CColor.prototype.distance = function(color) {
    var sqr;
    sqr = CMath.quad;
    return Math.sqrt(sqr(this.r - color.r) + sqr(this.g - color.g) + sqr(this.b - color.b));
  };

  CColor.prototype.valueOf = function() {
    return this[this.px]();
  };

  CColor.prototype.toString = CColor.prototype.valueOf;

  CColor.rgbToHsl = function(r, g, b) {
    var d, h, l, max, min, s;
    r /= 255;
    g /= 255;
    b /= 255;
    max = Math.max(r, g, b);
    min = Math.min(r, g, b);
    l = (max + min) / 2;
    if (max === min) {
      h = s = 0;
    } else {
      d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
      }
      h /= 6;
    }
    return [h, s, l];
  };

  CColor.hslToRgb = function(h, s, l) {
    var b, g, hue2rgb, p, q, r;
    if (s === 0) {
      r = g = b = l;
    } else {
      hue2rgb = function(p, q, t) {
        if (t < 0) {
          t += 1;
        } else if (t > 1) {
          t -= 1;
        }
        if (t < 1 / 6) {
          return p + (q - p) * 6 * t;
        } else if (t < 1 / 2) {
          return q;
        } else if (t < 2 / 3) {
          return p + (q - p) * (2 / 3 - t) * 6;
        } else {
          return p;
        }
      };
      q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return [r * 255, g * 255, b * 255];
  };

  CColor.build_names = function() {
    var hex, n, name, _ref;
    this.names = n = {};
    _ref = this.colors;
    for (name in _ref) {
      hex = _ref[name];
      n[hex] = name;
    }
    return n;
  };

  CColor.colors = {
    aliceblue: "#F0F8FF",
    antiquewhite: "#FAEBD7",
    aqua: "#00FFFF",
    aquamarine: "#7FFFD4",
    azure: "#F0FFFF",
    beige: "#F5F5DC",
    bisque: "#FFE4C4",
    black: "#000000",
    blanchedalmond: "#FFEBCD",
    blue: "#0000FF",
    blueviolet: "#8A2BE2",
    brown: "#A52A2A",
    burlywood: "#DEB887",
    cadetblue: "#5F9EA0",
    chartreuse: "#7FFF00",
    chocolate: "#D2691E",
    coral: "#FF7F50",
    cornflowerblue: "#6495ED",
    cornsilk: "#FFF8DC",
    crimson: "#DC143C",
    cyan: "#00FFFF",
    darkblue: "#00008B",
    darkcyan: "#008B8B",
    darkgoldenrod: "#B8860B",
    darkgray: "#A9A9A9",
    darkgreen: "#006400",
    darkkhaki: "#BDB76B",
    darkmagenta: "#8B008B",
    darkolivegreen: "#556B2F",
    darkorange: "#FF8C00",
    darkorchid: "#9932CC",
    darkred: "#8B0000",
    darksalmon: "#E9967A",
    darkseagreen: "#8FBC8F",
    darkslateblue: "#483D8B",
    darkslategray: "#2F4F4F",
    darkturquoise: "#00CED1",
    darkviolet: "#9400D3",
    deeppink: "#FF1493",
    deepskyblue: "#00BFFF",
    dimgray: "#696969",
    dodgerblue: "#1E90FF",
    firebrick: "#B22222",
    floralwhite: "#FFFAF0",
    forestgreen: "#228B22",
    fuchsia: "#FF00FF",
    gainsboro: "#DCDCDC",
    ghostwhite: "#F8F8FF",
    gold: "#FFD700",
    goldenrod: "#DAA520",
    gray: "#808080",
    green: "#008000",
    greenyellow: "#ADFF2F",
    honeydew: "#F0FFF0",
    hotpink: "#FF69B4",
    indianred: "#CD5C5C",
    indigo: "#4B0082",
    ivory: "#FFFFF0",
    khaki: "#F0E68C",
    lavender: "#E6E6FA",
    lavenderblush: "#FFF0F5",
    lawngreen: "#7CFC00",
    lemonchiffon: "#FFFACD",
    lightblue: "#ADD8E6",
    lightcoral: "#F08080",
    lightcyan: "#E0FFFF",
    lightgoldenrodyellow: "#FAFAD2",
    lightgray: "#D3D3D3",
    lightgreen: "#90EE90",
    lightpink: "#FFB6C1",
    lightsalmon: "#FFA07A",
    lightseagreen: "#20B2AA",
    lightskyblue: "#87CEFA",
    lightslategray: "#778899",
    lightsteelblue: "#B0C4DE",
    lightyellow: "#FFFFE0",
    lime: "#00FF00",
    limegreen: "#32CD32",
    linen: "#FAF0E6",
    magenta: "#FF00FF",
    maroon: "#800000",
    mediumaquamarine: "#66CDAA",
    mediumblue: "#0000CD",
    mediumorchid: "#BA55D3",
    mediumpurple: "#9370DB",
    mediumseagreen: "#3CB371",
    mediumslateblue: "#7B68EE",
    mediumspringgreen: "#00FA9A",
    mediumturquoise: "#48D1CC",
    mediumvioletred: "#C71585",
    midnightblue: "#191970",
    mintcream: "#F5FFFA",
    mistyrose: "#FFE4E1",
    moccasin: "#FFE4B5",
    navajowhite: "#FFDEAD",
    navy: "#000080",
    oldlace: "#FDF5E6",
    olive: "#808000",
    olivedrab: "#6B8E23",
    orange: "#FFA500",
    orangered: "#FF4500",
    orchid: "#DA70D6",
    palegoldenrod: "#EEE8AA",
    palegreen: "#98FB98",
    paleturquoise: "#AFEEEE",
    palevioletred: "#DB7093",
    papayawhip: "#FFEFD5",
    peachpuff: "#FFDAB9",
    peru: "#CD853F",
    pink: "#FFC0CB",
    plum: "#DDA0DD",
    powderblue: "#B0E0E6",
    purple: "#800080",
    red: "#FF0000",
    rosybrown: "#BC8F8F",
    royalblue: "#4169E1",
    saddlebrown: "#8B4513",
    salmon: "#FA8072",
    sandybrown: "#F4A460",
    seagreen: "#2E8B57",
    seashell: "#FFF5EE",
    sienna: "#A0522D",
    silver: "#C0C0C0",
    skyblue: "#87CEEB",
    slateblue: "#6A5ACD",
    slategray: "#708090",
    snow: "#FFFAFA",
    springgreen: "#00FF7F",
    steelblue: "#4682B4",
    tan: "#D2B48C",
    teal: "#008080",
    thistle: "#D8BFD8",
    tomato: "#FF6347",
    turquoise: "#40E0D0",
    violet: "#EE82EE",
    wheat: "#F5DEB3",
    white: "#FFFFFF",
    whitesmoke: "#F5F5F5",
    yellow: "#FFFF00",
    yellowgreen: "#9ACD32"
  };

  return CColor;

})();

CMath = {
  round: function(x, round) {
    var r;
    return Math.round(x * (r = Math.pow(10, round))) / r;
  },
  ceil: function(x, round) {
    var r;
    return Math.ceil(x * (r = Math.pow(10, round))) / r;
  },
  floor: function(x, round) {
    var r;
    return Math.floor(x * (r = Math.pow(10, round))) / r;
  },
  uniqid: function() {
    var _base;
    (_base = arguments.callee).i || (_base.i = 0);
    return 'uniqid' + (++arguments.callee.i);
  },
  transpose: function(matrix) {
    var A, a, i, j, _i, _j, _ref, _ref1;
    A = [];
    for (i = _i = 0, _ref = (matrix[0] || []).length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      A[i] = a = [];
      for (j = _j = 0, _ref1 = matrix.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
        a[j] = matrix[j][i];
      }
    }
    return A;
  },
  pad: function(x, n) {
    var i, _i;
    if (n == null) {
      n = 2;
    }
    if (0 < (n = n - String(x).length)) {
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        x = "0" + x;
      }
      return x;
    } else {
      return x;
    }
  },
  eq: function(a, b, p) {
    if (p == null) {
      p = Number.MIN_VALUE * 10;
    }
    return a - b < p;
  },
  equal: function(a, b) {
    var i, j, k, x, y, _i, _j, _len, _len1;
    i = j = 0;
    for (_i = 0, _len = a.length; _i < _len; _i++) {
      k = a[_i];
      if (a[k] !== b[k]) {
        x = a[k];
        y = b[k];
        if (typeof x === 'object') {
          if (x.prototype === y.prototype && CMath.equal(x, y)) {
            continue;
          }
        }
        return false;
      }
      i++;
    }
    for (_j = 0, _len1 = b.length; _j < _len1; _j++) {
      k = b[_j];
      j++;
    }
    return i === j;
  },
  'cubic-bezier': cubicBezier = function(p0, p1, p2, p3) {
    return (function(p0, p1, p2, p3) {
      return function(t) {
        var t2, t2_1, t3, t3_1, t_1;
        t_1 = 1 - t;
        t2_1 = t_1 * t_1;
        t3_1 = t2_1 * t_1;
        t2 = t * t;
        t3 = t2 * t;
        return t3_1 * p0 + 3 * t * t2_1 * p1 + 3 * t2 * t_1 * p2 + t3 * p3;
      };
    })(p0, p1, p2, p3);
  },
  ease: cubicBezier(0.25, 0.1, 0.25, 1),
  'ease-in': cubicBezier(0.42, 0, 1, 1),
  'ease-out': cubicBezier(0, 0, 0.58, 1),
  'ease-in-out': cubicBezier(0.42, 0, 0.58, 1),
  easeIn: function() {
    var args, pos, transition;
    transition = arguments[0], pos = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    return transition.apply(null, [pos].concat(__slice.call(args)));
  },
  easeOut: function() {
    var args, pos, transition;
    transition = arguments[0], pos = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    return 1 - transition.apply(null, [1 - pos].concat(__slice.call(args)));
  },
  easeInOut: function() {
    var args, pos, transition;
    transition = arguments[0], pos = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    return (pos <= 0.5 ? transition.apply(null, [2 * pos].concat(__slice.call(args))) : 2 - transition.apply(null, [2 * (1 - pos)].concat(__slice.call(args)))) / 2;
  },
  linear: function(x) {
    return x;
  },
  quad: function(x) {
    return x * x;
  },
  cubic: function(x) {
    return Math.pow(x, 3);
  },
  quart: function(x) {
    return x * x * x * x;
  },
  quint: function(x) {
    return Math.pow(x, 5);
  },
  expo: function(x) {
    return Math.pow(2, 8 * (x - 1));
  },
  circ: function(x) {
    return 1 - Math.sin(Math.acos(x));
  },
  sine: function(x) {
    return 1 - Math.cos(x * Math.PI / 2);
  },
  back: function(x, p) {
    if (p == null) {
      p = 1.618;
    }
    return Math.pow(x, 2) * ((p + 1) * x - p);
  },
  bounce: function(x) {
    var a, b, value;
    a = 0;
    b = 1;
    while (true) {
      a += b;
      b /= 2;
      if (x >= (7 - 4 * a) / 11) {
        value = b * b - Math.pow((11 - 6 * a - 11 * x) / 4, 2);
        break;
      }
    }
    return value;
  },
  elastic: function(x, p) {
    if (p == null) {
      p = 1;
    }
    return Math.pow(2, 10 * --x) * Math.cos(20 * x * Math.PI * p / 3);
  }
};

CCssF = {
  w: function(root, rem) {
    var i, j, k, offset, pull, push, r, sel_w, t, w, x1, x2, x3, _i, _j;
    if (rem == null) {
      rem = 12;
    }
    sel_w = [];
    r = ["<style>"];
    x1 = [];
    x2 = [];
    x3 = [];
    for (j = _i = 1; 1 <= rem ? _i <= rem : _i >= rem; j = 1 <= rem ? ++_i : --_i) {
      sel_w.push(w = ".w" + j, push = ".push" + j, pull = ".pull" + j, offset = ".offset" + j);
      r.push(("" + w + " { width: ") + (100 / j) + "% }");
      x1.push("" + push + " {left: " + k + "%}");
      x2.push("" + pull + " {right: " + k + "%}");
      x3.push("" + offset + " {margin-left: " + k + "%}");
      for (i = _j = 1; 1 <= j ? _j <= j : _j >= j; i = 1 <= j ? ++_j : --_j) {
        k = 100 * i / j;
        t = "" + i + "_" + j;
        sel_w.push(w = ".w" + t, push = ".push" + t, pull = ".pull" + t, offset = ".offset" + t);
        r.push("" + w + " {width: " + k + "%}");
        x1.push("" + push + " {left: " + k + "%}");
        x2.push("" + pull + " {right: " + k + "%}");
        x3.push("" + offset + " {margin-left: " + k + "%}");
      }
    }
    r.push.apply(r, x1);
    r.push.apply(r, x2);
    r.push.apply(r, x3);
    r.push(sel_w.join(",") + "{float:left}");
    r.push("</style>");
    return root.head().append(r.join("\n"));
  },
  resize: function(root) {
    return root.window();
  }
};

CInit = {
  requires: {},
  path: null,
  pack: [],
  check: function(path) {
    var x;
    x = !(name in CInit.requires);
    CInit.requires[path] = 1;
    return x;
  },
  require: function(name) {
    if (name[0] !== '/') {
      name = CInit.path + '/' + name;
    }
    if (CInit.check(name += '.js')) {
      document.writeln('\n<script src="' + name + '" type="text/javascript"></script>');
      return true;
    } else {
      return false;
    }
  },
  link: function(name, media) {
    var path;
    if (name[0] !== '/') {
      path = CInit.path.replace(/\w+$/, 'css');
      name = path + '/' + name;
    }
    if (CInit.check(name += '.css')) {
      document.writeln('\n<link rel="stylesheet" href="' + name + '" type="text/css"' + (media ? ' media="' + media + '"' : '') + '>');
      return true;
    } else {
      return false;
    }
  },
  init_from_param: function() {
    var a, param, src;
    src = (a = document.getElementById("_app_")) ? a.src : (document.getElementsByTagName('body') || document.getElementsByTagName('head'))[0].innerHTML.match(/src=['"]?([^\s'"<>]+)[^<>]+>(\s*<\/\w+>)+\s*$/i)[1].replace(/&amp(?:;|\b)/g, '&');
    CInit.path = src.replace(/\/?[^\/]+?\.js\b.*/, '');
    param = src.replace(/.*?\?/, '');
    param = CParam.get(src);
    if (IE < 9) {
      CInit.require("ie");
    }
    CInit.param = extend({}, param);
    return CInit.init(param);
  },
  init: function(param) {
    var i, _i, _j, _len, _len1, _ref, _ref1;
    if (param.name) {
      window.name = param.name;
      delete param.name;
    }
    if (param.post) {
      CInit.post = param.post;
      delete param.post;
    }
    if (param.url) {
      CInit.url = param.url;
      delete param.url;
    }
    if ('cssf' in param) {
      CCssF.w(CRoot);
      delete param.cssf;
    }
    if (param.css) {
      _ref = param.css.split(",");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        CInit.link(i);
      }
      delete param.css;
    }
    if (param.theme === "blueprint") {
      CInit.link("screen", "screen, projection");
      CInit.link("print", "print");
      if (IE < 8) {
        CInit.link("ie", "screen, projection");
      }
      delete param.theme;
    }
    if (param.theme === "app") {
      CInit.link("style", "screen, projection");
      delete param.theme;
    }
    if (param.pack) {
      _ref1 = CInit.pack = param.pack.split(",");
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        i = _ref1[_j];
        CInit.require(i);
      }
      delete param.pack;
    }
    for (i in param) {
      throw CRoot.raise("Нет параметра " + i + " в инициализаторе библиотеки");
    }
    return void 0;
  }
};

if (!(window.XMLHttpRequest && !IE)) {
  CInit.require("old");
}

CSocket = (function() {
  function CSocket() {
    if (arguments.length) {
      this.connect.apply(this, arguments);
    }
    this.reconnect = 0;
  }

  CSocket.prototype.connect = function(url, protocol) {
    var sock;
    this.reconnect++;
    this.url = url;
    sock = this.socket = new WebSocket(url, protocol);
    sock.$sock = this;
    sock.onopen = this.onopen;
    sock.onclose = this.onclose;
    sock.onmessage = this.onmessage;
    sock.onerror = this.onerror;
    return this;
  };

  CSocket.prototype.onopen = function() {
    if (this.reconnect === 1) {
      this.$sock.onConnect();
    } else {
      this.$sock.onReconnect();
    }
    return this;
  };

  CSocket.prototype.onclose = function(e) {
    if (e.wasClean) {
      this.$sock.onClose(e.code, e.reason);
    } else {
      this.$sock.onDisconnect(e.code, e.reason);
    }
    this.$sock.socket = null;
    delete this.$sock;
    return this;
  };

  CSocket.prototype.onmessage = function(e) {
    return this.$sock.onMessage(fromJSON(e.data));
  };

  CSocket.prototype.onerror = function(e) {
    this.$sock.onError(e.message);
    return delete this.$sock;
  };

  CSocket.prototype.onConnect = function() {
    return say("Соединение установлено");
  };

  CSocket.prototype.onDisconnect = function(code, reason) {
    return say('Обрыв соединения. Код: ' + code + ' причина: ' + reason);
  };

  CSocket.prototype.onReconnect = function() {
    return say("Пересоединение установлено");
  };

  CSocket.prototype.onMessage = function(data) {
    return say('Сообщение:', data);
  };

  CSocket.prototype.onClose = function(code, reason) {
    return say('Код: ' + code + ' причина: ' + reason);
  };

  CSocket.prototype.onError = function(message) {
    return say('Ошибка ' + message);
  };

  CSocket.prototype.emit = function(data) {
    this.send(toJSON(data));
    return this;
  };

  CSocket.prototype.send = function(data) {
    this.socket.send(data);
    return this;
  };

  return CSocket;

})();

CLongPoll = (function(_super) {
  __extends(CLongPoll, _super);

  function CLongPoll() {
    return CLongPoll.__super__.constructor.apply(this, arguments);
  }

  CLongPoll.prototype.id_counter = 0;

  CLongPoll.prototype.sockets = {};

  CLongPoll.prototype.connect = function(url) {
    var id, id_counter;
    this.url = url;
    url = escapeHTML(url);
    id_counter = this.constructor.prototype.id_counter++;
    id = this.constructor.className() + 'Emitter' + id_counter;
    CRoot.body().append(this.form = CRoot.wrap("<form method=POST action='" + url + "' target=" + id + " accept-charset=utf-8 style='display:none'><textarea name=d></textarea></form>")).append(this.iframe = CRoot.wrap("<iframe name=" + id + " src='about:blank'></iframe>"));
    CRoot.head().append(this.script = CRoot.wrap("<script src='" + url + "?n=" + id_counter + "&t=" + (new Date().getTime()) + "' type='text/javascript' charset=utf-8></script>"));
    this.sockets[id_counter] = this;
    return this;
  };

  CLongPoll.prototype.send = function(data) {
    this.form.first().val(data);
    this.form.element.submit();
    return this;
  };

  CLongPoll.prototype.close = function() {
    delete this.sockets[this.id_counter];
    this.script.union(this.form, this.iframe).remove();
    this.onClose(0, "Программное закрытие");
    return this;
  };

  return CLongPoll;

})(CSocket);

CSend = function(element, event) {
  var e, ret1, ret2, ret3, widget, _ref, _ref1;
  if (!(widget = element.widget)) {
    widget = CRoot.createWidget(element);
  }
  e = new CEvent(event, event.type);
  ret1 = (_ref = CSend[e.type]) != null ? _ref.call(widget, e, widget) : void 0;
  ret2 = widget.send('on' + e.type, e, widget);
  ret3 = (_ref1 = CSend[e.type + "_end"]) != null ? _ref1.call(widget, e, widget) : void 0;
  if (ret2 != null) {
    return ret2;
  } else if (ret3 != null) {
    return ret3;
  } else {
    return ret1;
  }
};

extend(CSend, {
  setHandler: function(element, type) {
    return element.setAttribute('on' + (CSend[type + '_type'] || type), "return CSend(this, event)");
  },
  removeHandler: function(element, type) {
    return element.removeAttribute('on' + (CSend[type + '_type'] || type));
  },
  mousedown: function(e) {
    var p, which;
    which = e.event.which;
    p = CEvent.prototype;
    if (which === 1) {
      p.left = true;
    }
    if (which === 2) {
      p.mid = true;
    }
    if (which === 3) {
      return p.right = true;
    }
  },
  mouseup: function(e) {
    var p, which;
    which = e.event.which;
    p = CEvent.prototype;
    if (which === 1) {
      p.left = false;
    }
    if (which === 2) {
      p.mid = false;
    }
    if (which === 3) {
      return p.right = false;
    }
  },
  click: function() {
    return CEvent.prototype.left = true;
  },
  click_end: function() {
    return CEvent.prototype.left = false;
  }
});

if (!('onmouseenter' in document)) {
  extend(CSend, {
    mouseenter_type: 'mouseover',
    mouseover: function(e, widget) {
      var to;
      to = e.relatedTarget();
      while (to && to !== widget) {
        to = to.up();
      }
      if (to !== widget) {
        e.type = 'mouseenter';
        return widget.send('on' + e.type, e, widget);
      }
    },
    mouseleave_type: 'mouseout',
    mouseout: function(e, widget) {
      var to;
      to = e.relatedTarget();
      while (to && to !== widget) {
        to = to.up();
      }
      if (to !== widget) {
        e.type = 'mouseleave';
        return widget.send('on' + e.type, e, widget);
      }
    }
  });
}

CEvent = (function() {
  var key$, keys$, val$, _i, _len;

  function CEvent(event, type) {
    this.event = event;
    this.type = type;
  }

  CEvent.prototype.left = false;

  CEvent.prototype.mid = false;

  CEvent.prototype.right = false;

  keys$ = {
    38: 'up',
    40: 'down',
    37: 'left',
    39: 'right',
    27: 'esc',
    8: 'backspace',
    9: 'tab',
    46: 'delete',
    13: 'enter'
  };

  for (val$ = _i = 0, _len = keys$.length; _i < _len; val$ = ++_i) {
    key$ = keys$[val$];
    CEvent.prototype['press' + key$.upFirst()] = (function(val$) {
      return function() {
        return this.code() === val$;
      };
    })(val$);
  }

  CEvent.prototype.stop = function() {
    return this.event.stopPropagation();
  };

  CEvent.prototype.cancel = function() {
    return this.event.preventDefault();
  };

  CEvent.prototype["break"] = function() {
    this.stop();
    return this.cancel();
  };

  CEvent.prototype.target = !(CNavigator.safari <= 3) ? function() {
    return CRoot.createWidget(this.event.target);
  } : function() {
    var targ;
    return CRoot.createWidget((targ = this.event.target).nodeType === 3 ? targ.parentNode : targ);
  };

  CEvent.prototype.relatedTarget = function() {
    var target;
    return (target = this.event.relatedTarget) && CRoot.createWidget(target);
  };

  CEvent.prototype.code = function() {
    return this.event.charCode || this.event.keyCode || this.event.which;
  };

  CEvent.prototype.key = function() {
    var code;
    return keys$[code = this.code()] || String.fromCharCode(code);
  };

  CEvent.prototype.x = function() {
    return this.event.pageX;
  };

  CEvent.prototype.y = function() {
    return this.event.pageY;
  };

  CEvent.prototype.viewX = function() {
    return this.event.clientX;
  };

  CEvent.prototype.viewY = function() {
    return this.event.clientY;
  };

  CEvent.prototype.offsetX = function() {
    CEvent.prototype.offsetX = this.event.offsetX != null ? function() {
      return this.event.offsetX;
    } : function() {
      var t;
      return this.event.clientX - (t = this.target()).viewPos().left - t.px('border-left-width');
    };
    return this.offsetX();
  };

  CEvent.prototype.offsetY = function() {
    CEvent.prototype.offsetY = this.event.offsetY != null ? function() {
      return this.event.offsetY;
    } : function() {
      var t;
      return this.event.clientY - (t = this.target()).viewPos().top - t.px('border-top-width');
    };
    return this.offsetY();
  };

  return CEvent;

})();

CModel = (function() {
  var free_compute$, _off, _on;

  function CModel(data, cmp, _name) {
    var key;
    if (data == null) {
      data = {};
    }
    if (cmp == null) {
      cmp = {};
    }
    this._name = _name;
    this._ = data;
    this._cmp = cmp || (cmp = {});
    this._on = {};
    this._at = {};
    this._compute = {};
    for (key in data) {
      this.set(key, data[key], cmp[key]);
    }
  }

  CModel.prototype.has = function(key) {
    return key in this._;
  };

  free_compute$ = function(key) {
    var c, k, _i, _len, _ref;
    c = this._compute[key];
    if (c.slave) {
      _ref = c.slave;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        this.off(k, c.fn);
      }
    }
    if (c.master) {
      this.off(key, master);
    }
    delete this._compute[key];
    return this;
  };

  CModel.prototype.set = function(key, val, cmp) {
    var fn;
    if (key in this._compute) {
      free_compute$.call(this, key);
    }
    fn = (function(key) {
      return function(val) {
        if (arguments.length) {
          return this.change(key, val);
        } else {
          return this.retrive(key);
        }
      };
    })(key);
    this._[key] = val;
    if (cmp) {
      this._cmp[key] = cmp;
    }
    this["$" + key] = fn;
    if (!(key in this && !this.hasOwnProperty(key))) {
      this[key] = fn;
    }
    return this;
  };

  CModel.prototype.compute = function(key, opt) {
    var fn, keys, master, match, slave;
    if (typeof opt === 'function') {
      opt = {
        slave: opt
      };
    }
    this.set(key, opt.val, opt.cmp);
    if (slave = opt.slave) {
      match = String(slave).match(/^function\s*[\$\w]*\s*\(([^\(\)]*)\)/);
      keys = match[1].split(/,\s*/);
      this.on(keys, fn = (function(key, slave, keys) {
        return function(v, old, key1) {
          var i, len, name, ret, _i, _len;
          ret = new Array((len = keys.length) + 2);
          ret[len] = old;
          ret[len + 1] = key1;
          for (i = _i = 0, _len = keys.length; _i < _len; i = ++_i) {
            name = keys[i];
            ret[i] = this.retrive(name);
          }
          return this.change(key, slave.apply(this, ret));
        };
      })(key, slave, keys));
    }
    if (master = opt.master) {
      this.on(key, master);
    }
    this._compute[key] = {
      master: master,
      slave: keys,
      fn: fn
    };
    return this;
  };

  CModel.prototype.del = function(key) {
    if (key in this._compute) {
      free_compute$.call(this, key);
    }
    this.un(key);
    this.off(key);
    delete this._[key];
    return delete this._cmp[key];
  };

  CModel.prototype.cmp = function(key, cmp) {
    var i;
    if (arguments.length === 1) {
      if (typeof key === 'string') {
        this._cmp[key];
      } else {
        for (i in key) {
          this._cmp[i] = key[i];
        }
        this;
      }
    } else if (cmp) {
      this._cmp[key] = cmp;
    } else {
      delete this._cmp[key];
    }
    return this;
  };

  _on = function(key, fn) {
    var _base, _i, _len, _ref;
    _ref = $A(key);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      ((_base = this.$0$)[key] || (_base[key] = [])).push(fn);
    }
    return this;
  };

  _off = function(key, fn) {
    var i, idx, ons, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
    if (arguments.length === 1) {
      _ref = $A(key);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        delete this.$0$[key];
      }
    } else if (typeof fn === 'function') {
      _ref1 = $A(key);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        key = _ref1[_j];
        if ((ons = this.$0$[key]) && -1 !== (idx = ons.indexOf(fn))) {
          if (ons.length === 1) {
            delete this.$0$[key];
          } else {
            ons.splice(idx, 1);
          }
        }
      }
    } else {
      _ref2 = $A(key);
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        key = _ref2[_k];
        if (ons = this.$0$[key]) {
          for (idx = _l = 0, _len3 = ons.length; _l < _len3; idx = ++_l) {
            i = ons[idx];
            if (!(i._belong === fn)) {
              continue;
            }
            ons.splice(idx, 1);
            break;
          }
          if (ons.length === 0) {
            delete this.$0$[key];
          }
        }
      }
    }
    return this;
  };

  CModel.prototype.on = _on.inline("on", "_on");

  CModel.prototype.off = _off.inline("off", "_on");

  CModel.prototype.at = _on.inline("at", "_at");

  CModel.prototype.un = _off.inline("un", "_at");

  CModel.prototype.change = function(key, val) {
    var cmp, old;
    if (arguments.length === 1) {
      val = !this._[key];
    }
    old = this._[key];
    if (((cmp = this._cmp[key]) ? !cmp.call(this, val, old) : val !== old)) {
      this._[key] = val;
      this.send(val, old, key);
    }
    return this;
  };

  CModel.prototype.send = function(val, old, key) {
    var fn, ons, _i, _len;
    if (ons = this._on[key]) {
      for (_i = 0, _len = ons.length; _i < _len; _i++) {
        fn = ons[_i];
        fn.call(this, val, old, key);
      }
    }
    return this;
  };

  CModel.prototype.retrive = function(key) {
    var at, fn, _i, _len;
    if (at = this._at[key]) {
      for (_i = 0, _len = at.length; _i < _len; _i++) {
        fn = at[_i];
        this.change(key, fn.call(this, key, this._[key]));
      }
    }
    return this._[key];
  };

  return CModel;

})();

CRepository = (function() {
  function CRepository(model, _) {
    var fn, key;
    this._ = _ != null ? _ : {};
    this.model = model;
    for (key in this._) {
      if (!(key in model._)) {
        model.set(key, this._[key]);
      }
      if (this.save) {
        model.on(key, fn = ((function(_this) {
          return function(val, old, key) {
            return _this.save(key, val);
          };
        })(this)));
        fn._belong = this;
      }
      if (this.load) {
        model.at(key, fn = ((function(_this) {
          return function(key) {
            return _this.load(key);
          };
        })(this)));
        fn._belong = this;
      }
    }
  }

  CRepository.prototype.sync = function() {
    var key, val;
    for (key in this._) {
      if ((val = this.load(key)) !== void 0) {
        this.model.change(key, val);
      }
    }
    return this;
  };

  return CRepository;

})();

CCookieRepository = (function(_super) {
  __extends(CCookieRepository, _super);

  function CCookieRepository(model, fields, props) {
    this.props = props != null ? props : {};
    CCookieRepository.__super__.constructor.call(this, model, fields);
  }

  CCookieRepository.prototype.load = function(key) {
    var val;
    if ((val = CRoot.cookie(key)) != null) {
      return fromJSON(val);
    } else {
      return void 0;
    }
  };

  CCookieRepository.prototype.save = function(key, val) {
    return CRoot.cookie(key, toJSON(val), this.props);
  };

  return CCookieRepository;

})(CRepository);

CAjaxRepository = (function(_super) {
  __extends(CAjaxRepository, _super);

  function CAjaxRepository(model, fields, widget) {
    var _base;
    this.widget = widget;
    CAjaxRepository.__super__.constructor.call(this, model, fields);
    (_base = this.widget).onLoad || (_base.onLoad = (function(_this) {
      return function(req) {
        var key, val, _ref;
        _this.save = (function() {});
        _ref = req.data;
        for (key in _ref) {
          val = _ref[key];
          _this.model.change(key, val);
        }
        delete _this.save;
        return _this;
      };
    })(this));
  }

  CAjaxRepository.prototype.save = function(key, val) {
    var x;
    if (this._ajax_save) {
      return this._ajax_save[key] = val;
    } else {
      this._ajax_save = x = {};
      x[key] = val;
      return setTimeout(((function(_this) {
        return function() {
          _this.widget.ping({
            save: toJSON(_this._ajax_save)
          });
          return _this._ajax_save = null;
        };
      })(this)), 0);
    }
  };

  return CAjaxRepository;

})(CRepository);

CAjaxIoRepository = (function(_super) {
  __extends(CAjaxIoRepository, _super);

  function CAjaxIoRepository() {
    return CAjaxIoRepository.__super__.constructor.apply(this, arguments);
  }

  CAjaxIoRepository.prototype.load = function(key) {
    if (this._ajax_load) {
      this._ajax_load.push(key);
    } else {
      this._ajax_load = [key];
      setTimeout(((function(_this) {
        return function() {
          _this.widget.ping({
            load: _this._ajax_load
          });
          return _this._ajax_load = null;
        };
      })(this)), 0);
    }
    return this._[key];
  };

  return CAjaxIoRepository;

})(CAjaxRepository);

CIoRepository = (function(_super) {
  __extends(CIoRepository, _super);

  function CIoRepository(model, fields, iosocket) {
    this.iosocket = iosocket;
    CIoRepository.__super__.constructor.call(this, model, fields);
    this.iosoket.on('load', (function(_this) {
      return function(x) {
        return _this.model.change(x[0], x[1]);
      };
    })(this));
  }

  CIoRepository.prototype.save = function(key, val) {
    return this.iosocket.emit('save', [key, val]);
  };

  return CIoRepository;

})(CRepository);

CIoLoadRepository = (function(_super) {
  __extends(CIoLoadRepository, _super);

  function CIoLoadRepository() {
    return CIoLoadRepository.__super__.constructor.apply(this, arguments);
  }

  CIoLoadRepository.prototype.load = function(key) {
    this.iosocket.emit('load', key);
    return this._[key];
  };

  return CIoLoadRepository;

})(CIoRepository);

CTemplate = {
  _STASH: {},
  compile: function(i_html, forms, form) {
    var CALL_FN, NO, PARSE_CONST, PARSE_VAR, RE_ELIF, RE_FORM, RE_IF, RE_TYPE, T, TAG, code, code_begin, code_begin1, code_end, code_end1, fn, fn_idx, frm, helper, html, id, ifST, len, load, m, n, name, open_braket, open_id, open_pos, open_span, open_tag, pop, pos, re, re_type, s, t, tag, tags, type, var_x, _NO_ESCAPE_HTML, _const, _tags, _type, _var;
    if (forms == null) {
      forms = {};
    }
    if (form == null) {
      form = {};
    }
    code_begin = "function(dataset, id1, start) {\nif(!dataset) dataset = []\nvar res = []\nstart = start || 0\nfor(var i=0, n=dataset.length; i<n; i++) {\n	var data = dataset[i]\n	var id = id1+'-'+(('id' in data)? data.id: start+i)\n	res.push('";
    code_end = "')\n}\nvar html = res.join('')\nreturn html\n}";
    code_begin1 = "function(data, id) { if(!data) data = {}; return ['";
    code_end1 = '\'].join("") }';
    RE_TYPE = "(\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|-?\\d+(?:\\.\\d+)?(?:E[+-]\\d+)?)";
    CALL_FN = new RegExp("^\\{%\\s*(\\w+)\\s+" + RE_TYPE + "(?:\\s*,\\s*" + RE_TYPE + ")?(?:\\s*,\\s*" + RE_TYPE + ")?(?:\\s*,\\s*" + RE_TYPE + ")?(?:\\s*,\\s*" + RE_TYPE + ")?\\s*%\\}");
    PARSE_VAR = new RegExp("^(?:\\$(\\{\\s*)?(?:(%)?(\\w+)|" + RE_TYPE + ")|(#)(\\{\\s*)?(%)?(\\w+))");
    PARSE_CONST = new RegExp("^" + RE_TYPE);
    RE_IF = new RegExp("^\\{%\\s*if\\s+(?:\\$(%)?(\\w+)|" + RE_TYPE + ")");
    RE_ELIF = new RegExp("^\\{%\\s*elif\\s+(?:\\$(%)?(\\w+)|" + RE_TYPE + ")");
    RE_FORM = new RegExp("^\\$([+*])(\\w+)?(?::(?:(noload)|(load|model)\\((?:(\\w+),\\s*)?(?:(%?\\w+)|(" + RE_TYPE + "))\\)))?");
    re_type = function(s) {
      if (s != null) {
        return s.replace(/\n/g, '\\n').replace(/\r/g, '\\r');
      }
    };
    _NO_ESCAPE_HTML = CHelper._NO_ESCAPE_HTML;
    _tags = /(?:input|meta)/i;
    tags = {
      th: /^(?:tr|table|tbody|tfoot|thead)$/,
      td: /^(?:tr|table|tbody|tfoot|thead)$/,
      tr: /^(?:table|tbody|tfoot|thead)$/,
      option: /^select$/,
      li: /^(?:ol|ul)$/
    };
    form.fields = {};
    form.forms = [];
    T = [];
    html = [];
    pos = 0;
    s = i_html;
    ifST = [];
    var_x = function(_type, _var) {
      if (_type) {
        if (_var === '_DATA') {
          return "data";
        } else if (_var === "_STASH") {
          return "CTemplate._STASH";
        } else if (_var === 'i') {
          return "i";
        } else if (_var === 'i0') {
          return "(i-1)";
        } else if (_var === 'id') {
          return "id";
        } else {
          return "CTemplate._STASH." + _var;
        }
      } else {
        return "data['" + _var + "']";
      }
    };
    helper = function(_type, _var, _const, open_braket) {
      var VAR, braket, fn_idx, fn_idxs, len, m;
      braket = 0;
      VAR = void 0;
      html.push(_const || var_x(_type, _var));
      fn_idx = html.length - 1;
      fn_idxs = [fn_idx];
      while (1) {
        if (!VAR && (m = s.match(/^:(\w+)(\()?/))) {
          html[fn_idx] = ("CHelper." + m[1] + "(") + html[fn_idx];
          html.push((m[2] ? (++braket, ", ") : (VAR = !VAR, ")")));
        } else if (VAR && (m = s.match(PARSE_CONST))) {
          fn_idxs.push(fn_idx);
          fn_idx = html.length;
          html.push(re_type(m[0]));
        } else if (VAR && (m = s.match(/^\$(%)?(\w+)/))) {
          fn_idxs.push(fn_idx);
          fn_idx = html.length;
          html.push(var_x(m[1], m[2]));
        } else if (!VAR && (m = s.match(/^,\s*/))) {
          fn_idx = fn_idxs.pop();
          html.push(m[0]);
        } else if (m = s.match(/^\)/)) {
          VAR = 1;
          --braket;
          fn_idx = fn_idxs.pop();
          html.push(")");
        } else if (m = s.match(/^\}/)) {
          if (!open_braket) {
            throw "нет `{` для `}`";
          }
          open_braket = 0;
          pos++;
          s = s.slice(1);
          break;
        } else {
          break;
        }
        pos += len = m[0].length;
        s = s.slice(len);
        VAR = !VAR;
      }
      if (open_braket) {
        throw "не закрыта `}`";
      }
      if (braket) {
        throw "не закрыты скобки (" + braket + ")";
      }
      return fn_idx;
    };
    pop = function() {
      var begin, cinit, data, id, idx, name, open_tag, tag, template, type, _form;
      tag = T.pop();
      if (tag.length > 2) {
        open_tag = tag[0], begin = tag[1], name = tag[2], type = tag[3], cinit = tag[4], idx = tag[5], _form = tag[6];
        template = i_html.slice(begin, pos);
        if (cinit) {
          html[idx] = [html[idx], "<!--", template.replace(/!/g, '!!').replace(/-->/g, '--!>'), "-->"].join("");
        }
        html.push((type ? code_end : code_end1));
        form.template = template;
        _form.forms.push(form);
        id = "id" + (name ? "+'-" + name + "'" : "");
        data = "data" + (name ? "['" + name + "']" : "");
        html.push(")(", data, ", ", id, "), '");
        form = _form;
      }
      return tag[0];
    };
    while (1) {
      if (!NO && (m = s.match(/^<(\w+)/))) {
        open_pos = pos;
        TAG = open_tag = m[1];
        open_tag = open_tag.toLowerCase();
        if (/^(?:script|style)$/.test(open_tag)) {
          NO = 1;
        }
        if (re = tags[open_tag]) {
          while (T.length && !re.test(T[T.length - 1][0])) {
            pop();
          }
        }
        html.push(m[0]);
      } else if (!NO && (m = s.match(/^>/))) {
        if (_tags.test(TAG)) {
          TAG = open_id = void 0;
          html.push(">");
        } else {
          if (t) {
            frm = t;
            t = [open_tag, pos + 1, name = t.name, type = t.is_list, /\bcinit\b/i.test(i_html.slice(open_pos, pos)), html.length, form];
            id = name != null ? form.id + "-" + name : '';
            forms[id] = form = extend(frm, {
              id: id,
              fields: {},
              forms: []
            });
            html.push(">", "', (", (type ? code_begin : code_begin1));
          } else {
            t = [open_tag];
            html.push(">");
          }
          T.push(t);
          t = open_tag = void 0;
        }
      } else if (!NO && (m = s.match(/^\/>/))) {
        TAG = open_id = void 0;
        html.push(m[0]);
      } else if (!NO && (m = s.match(/^<\/(\w+)\s*>/))) {
        TAG = open_id = void 0;
        tag = m[1];
        while (T.length && pop() !== tag) {
          null;
        }
        html.push(m[0]);
      } else if (!NO && (m = s.match(/^<\!--.*?-->/))) {
        m[0].replace(/'/g, "\\'");
      } else if (NO && (m = s.match(/^<\/(\w+)\s*>/)) && m[1] === TAG) {
        TAG = open_id = open_tag = NO = void 0;
        html.push(m[0]);
      } else if (open_tag && (m = s.match(/^\$-(\w+)/))) {
        open_id = m[1];
        html.push("', id, '-" + m[1]);
      } else if (m = s.match(/^\$@([\/\w]+)/)) {

      } else if (m = s.match(/^\$&/)) {

      } else if (m = s.match(/^{%\s*(\w+)\s*=%\}/)) {
        html.push("', (function() { CTemplate._STASH." + m[1] + " = ['");
      } else if (m = s.match(/^{%\s*end\s*%\}/)) {
        html.push("'].join(''); return '' })(), '");
      } else if (m = s.match(RE_IF)) {
        s = s.slice(len = m[0].length);
        pos += len;
        html.push("', (");
        helper(m[1], m[2], m[3]);
        if (!(m = s.match(/^\s*%\}/))) {
          throw "Нет закрывающей `%}` для if";
        }
        ifST.push(1);
        html.push("? ['");
      } else if (m = s.match(RE_ELIF)) {
        s = s.slice(len = m[0].length);
        pos += len;
        html.push("'].join(''): ");
        helper(m[1], m[2], m[3]);
        if (!(m = s.match(/^\s*%\}/))) {
          throw "Нет закрывающей `%}` для elif";
        }
        if ((n = ifST.length) === 0 || ifST[n - 1] !== 1) {
          throw "Нельзя использовать elif";
        }
        html.push("? ['");
      } else if (m = s.match(/^\{%\s*else\s*%\}/)) {
        if ((n = ifST.length) === 0 || ifST[n - 1] !== 1) {
          throw "Нельзя использовать else";
        }
        ifST[n - 1] = 2;
        html.push("'].join(''): ['");
      } else if (m = s.match(/^\{%\s*fi\s*%\}/)) {
        if ((n = ifST.length) === 0) {
          throw "Нельзя использовать fi";
        }
        html.push("'].join('')" + (ifST[n - 1] === 1 ? ": ''" : "") + "), '");
      } else if (m = s.match(CALL_FN)) {

      } else if (m = s.match(/^&#?\w+;?/)) {
        html.push(m[0]);
      } else if (m = s.match(PARSE_VAR)) {
        open_span = m[5];
        open_braket = m[1] || m[6];
        _type = m[2] || m[7];
        _var = m[3] || m[8];
        _const = m[4] != null ? re_type(m[4]) : void 0;
        if (open_span && (open_tag || /^(?:script|style)$/i.test(TAG))) {
          html.push(m[0]);
        } else {
          s = s.slice(len = m[0].length);
          pos += len;
          if (_var && !type) {
            form.fields[_var] = 1;
          }
          if (open_span) {
            html.push("<span id=', id, '-" + _var + ">");
          }
          html.push("', ");
          fn_idx = helper(_type, _var, _const, open_braket);
          if (!((m = html[fn_idx].match(/^CHelper\.(\w+)/)) && _NO_ESCAPE_HTML[m[1]])) {
            html[fn_idx] = "CHelper.html(" + html[fn_idx];
            html.push(")");
          }
          html.push(", '" + (open_span ? "</span>" : ""));
          continue;
        }
      } else if (open_tag && (m = s.match(RE_FORM))) {
        t = {
          name: m[2],
          is_list: m[1] === '*'
        };
        load = m[4];
        t.load = m[3] ? 0 : load && load === "load" ? 1 : form.load ? 2 : 0;
        html.push("', id, '" + (m[2] ? "-" + m[2] : ""));
      } else if (m = s.match(/^[\\']/)) {
        html.push("\\" + m[0]);
      } else if (m = s.match(/^\n/)) {
        html.push("\\n");
      } else if (m = s.match(/^\r/)) {
        html.push("\\r");
      } else if (s.length) {
        html.push(s[0]);
        m = [s[0]];
      } else {
        break;
      }
      s = s.slice(len = m[0].length);
      pos += len;
    }
    while (T.length) {
      pop();
    }
    if (form.is_list) {
      code_begin1 = code_begin;
      code_end1 = code_end;
    }
    html.unshift("fn=", code_begin1);
    html.push(code_end1);
    code = html.join("");
    fn = null;
    eval(code);
    return fn;
  },
  apply: function(element, cls) {
    var c, content, cview, html, id, v, w;
    id = element.id || (element.id = CMath.uniqid());
    cview = CView[element.getAttribute("cview")];
    if (v = cview[2]) {
      if (c = v["class"]) {
        element.className += " " + c;
      }
      if (element.tagName !== (c = v.tag)) {
        if (w = element.widget) {
          w.tag(c);
        }
      } else {
        (new CWidget(element)).tag(c).unwrap();
      }
    }
    html = cview[1];
    content = element.innerHTML;
    html = html.replace(/\$@/, content);
    html = CTemplate.compile(html)($H(element.getAttribute('cargs'), /\s+/, /=/), id);
    html = html.replace(/\$&/, content);
    element.removeAttribute("cview");
    element.removeAttribute("cargs");
    element.setAttribute('ctype', CWidget.prototype.className.call({
      constructor: cls || cview[0]
    }));
    return element.innerHTML = html;
  },
  _color: ['Cornsilk', 'lavender', 'Ivory', 'LavenderBlush', 'LemonChiffon', 'MistyRose', 'Seashell', 'Honeydew', 'MintCream', 'Azure', 'AliceBlue'],
  color: function(n) {
    if (n == null) {
      n = parseInt(Math.random() * CTemplate._color.length);
    }
    return CTemplate._color[n];
  }
};

CHelper = {
  _NO_ESCAPE_HTML: {
    raw: 1,
    json: 1,
    dump: 1,
    style: 1
  },
  json: toJSON,
  raw: function(x) {
    return x;
  },
  html: escapeHTML,
  nbsp: function(x) {
    if ((x != null) && x !== "") {
      return "&nbsp;";
    } else {
      return escapeHTML(x);
    }
  },
  bool: function(x, a, b) {
    if (x) {
      if (a != null) {
        return a;
      } else {
        return "+";
      }
    } else {
      if (b != null) {
        return b;
      } else {
        return "-";
      }
    }
  },
  dump: function(x) {
    return "<pre>" + escapeHTML(toJSON(x, void 0, 4)) + "</pre>";
  },
  join: function() {
    var args, sep, x;
    x = arguments[0], sep = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    if (sep == null) {
      sep = ", ";
    }
    return x.concat(args).join(sep);
  },
  at: function(x, i) {
    return x[i];
  },
  odd: function(x, a, b) {
    if (a == null) {
      a = 'odd';
    }
    if (b == null) {
      b = '';
    }
    if (x % 2) {
      return a;
    } else {
      return b;
    }
  },
  even: function(x, a, b) {
    if (a == null) {
      a = 'even';
    }
    if (b == null) {
      b = '';
    }
    if (x % 2 === 0) {
      return a;
    } else {
      return b;
    }
  },
  oddeven: function(x, a, b) {
    if (a == null) {
      a = 'odd';
    }
    if (b == null) {
      b = 'even';
    }
    if (x % 2) {
      return a;
    } else {
      return b;
    }
  },
  and: function(a, b) {
    return a && b;
  },
  or: function(a, b) {
    return a || b;
  },
  not: function(a) {
    return !a;
  },
  lt: function(a, b) {
    return a < b;
  },
  gt: function(a, b) {
    return a > b;
  },
  le: function(a, b) {
    return a <= b;
  },
  ge: function(a, b) {
    return a >= b;
  },
  eq: function(a, b) {
    return a === b;
  },
  ne: function(a, b) {
    return a !== b;
  },
  visible: function(a) {
    if (a) {
      return "";
    } else {
      return 'display:none';
    }
  },
  style: function(a) {
    if (a) {
      return "style=\"" + a + "\"";
    } else {
      return '';
    }
  }
};

CValid = {
  int: /^-?\d+$/,
  uint: /^\d+$/,
  number: /^-?\d+(\.\d+)?$/,
  unumber: /^\d+(\.\d+)?$/,
  email: /@/
};

CEffect = {
  show: {
    css: {
      overflow: 'hidden'
    },
    from: {
      width: 0,
      height: 0,
      'font-size': 0
    },
    begincss: {
      display: ''
    }
  },
  hide: {
    css: {
      overflow: 'hidden'
    },
    to: {
      width: 0,
      height: 0,
      'font-size': 0
    },
    endcss: {
      display: 'none'
    }
  },
  slideUp: {
    css: {
      overflow: 'hidden'
    },
    from: {
      height: 0
    },
    begincss: {
      display: ''
    }
  },
  slideDown: {
    css: {
      overflow: 'hidden'
    },
    to: {
      height: 0
    },
    endcss: {
      display: 'none'
    }
  },
  fadeIn: {
    from: {
      opacity: 0
    },
    begincss: {
      display: ''
    }
  },
  fadeOut: {
    to: {
      opacity: 0
    },
    endcss: {
      display: 'none'
    }
  }
};

CRoot = null;

if (!window.$) {
  $ = function(e) {
    if (typeof e === 'function') {
      return CRoot._init_functions.push(e);
    } else if (e === 'string') {
      return CRoot.find(e);
    } else if (e == null) {
      return new CWidgets;
    } else {
      return CRoot.wrap(e);
    }
  };
}

CWidget = (function() {
  var CRoot$, Number$, anim_css_set$, animate$, append_anim$, byXYAll$, cm$, cn$, code$, css_color, css_get_fn, css_has_fn, css_not_px, css_px, css_set_fn, default_fps$, default_timeout$, dir, dirprev, div$, ex$, ex_uniq$, fire_html$, fire_key$, fire_mouse$, get_rules_by_class$, goal_rule$, goal_selector$, gotoState$, his$, in$, init_his$, insert$, isCase$, is_rgba$, listens$, match, matchesSelector$, mm$, mod$, nes$, new$, new_pseudo_element$, nextElem, next_animate$, ownerDocument$, pc$, position$, pt$, pushState$, qs$, rawstyle, rawstyle_mask_re, ready$, readyRun$, replaceState$, rgba$, rmEvent$, rmEventAndHandler$, rmEvt$, rmEvtByBelong$, rmEvtByListen$, rmHandler$, s, set_styles$, sliceW$, speeds$, style$, styles$, stylesheet$, stylesheets$, swap_append$, swap_arr$, tab, testpx$, text2elem$, tn$, toCssCase, toElements$, to_style$, toggle$, type$, wdiv$, with_css_prefix, wrapDiv$, wrapMap$, _slice$, _timeout, _type$;

  CWidget.prototype.model = new CModel({}, {}, "main");

  function CWidget(element, _parent) {
    this._parent = _parent;
    if (!(element && element.tagName)) {
      throw this.raise("element не HTMLElement", element);
    }
    if (element.widget) {
      throw this.raise("element уже имеет виджет ", element.widget);
    }
    this.element = element;
    element.widget = this;
  }

  _slice$ = Array.prototype.slice;

  div$ = document.createElement("div");

  wdiv$ = new CWidget(div$);

  _type$ = function(type, names) {
    var name, _i, _len, _ref;
    _ref = names.split(/\s+/);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      CWidget.prototype[name].type$ = type;
    }
    return this;
  };

  CWidget.prototype.type$ = type$ = {
    nothing: function(names) {
      return _type$(0, names);
    },
    attr: function(names) {
      return _type$('$attr', names);
    },
    any: function(names) {
      return _type$('$any', names);
    },
    range: function(names) {
      return _type$('$range', names);
    },
    rangeAll: function(names) {
      return _type$('$rangeAll', names);
    },
    all: function(names) {
      return _type$('$all', names);
    },
    join: function(names) {
      return _type$('$join', names);
    }
  };

  CWidget.prototype.parent = function(parent) {
    var cparent, element, match;
    if (arguments.length) {
      this._parent = parent;
      return this;
    } else {
      if (!this._parent) {
        element = this.element;
        this._parent = (cparent = element.getAttribute("cparent")) ? this.byId(cparent) : element.id && (match = element.id.match(/^(.+)-\w+$/)) ? this.byId(match[1]) : null;
      }
      if (!(!this._parent || this._parent && this._parent instanceof CWidget)) {
        throw this.raise("parent не CWidget: " + this._parent);
      }
      return this._parent;
    }
  };

  CWidget.prototype.parentAll = function() {
    var p, _results;
    p = this;
    _results = [];
    while (p = p.parent()) {
      _results.push(p);
    }
    return _results;
  };

  CWidget.prototype.valueOf = function() {
    return '<' + this.className() + ' ' + (this.element && (this.element.id && "#" + this.element.id || this.element.className && '.' + this.element.className.split(' ').join(".") || this.element.tagName)) + '>';
  };

  CWidget.prototype.toString = CWidget.prototype.valueOf;

  CWidget.prototype.raise = function(message) {
    return new Error(this + ": " + message);
  };

  CWidget.prototype.warn = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return say.apply(null, [this, arguments.callee.caller.getName()].concat(__slice.call(args)));
  };

  CWidget.prototype.className = CWidget.name ? function() {
    return this.constructor.name;
  } : function() {
    return this.constructor.getName();
  };

  type$.nothing('raise warn className');

  type$.join('valueOf toString');

  type$.attr('parent');

  CWidget.prototype.createWidget = function(element, parent) {
    var cls, cview, widget;
    if (widget = element.widget) {
      return widget;
    }
    cls = this.ctype(element);
    if (cview = typeof element.getAttribute === "function" ? element.getAttribute('cview') : void 0) {
      CTemplate.apply(element, cls);
    }
    return new cls(element, parent);
  };

  CWidget.prototype.ctype = function(element) {
    var a, cls, ctype, cview, id, tag;
    if (element.nodeType !== 1) {
      return CNode;
    }
    if (ctype = element.getAttribute('ctype')) {
      return window['C' + ctype.uc() + 'Widget'] || window[ctype];
    }
    if (cview = element.getAttribute('cview')) {
      return CView[cview][0];
    }
    if (id = element.id) {
      if ((a = id.match(/(?:^|-)([a-z_]\w*)$/i)) && (a = window[a[1]]) instanceof Function && /^C\w+Widget$/.test(CWidget.prototype.className.call({
        constructor: a
      }))) {
        return a;
      }
    }
    if ((tag = element.tagName) === "INPUT" && (cls = window['C' + element.type.uc() + 'Widget'])) {
      return cls;
    } else if ((cls = window["C" + tag.toLowerCase().ucFirst() + "Widget"]) instanceof Function && CWidget.prototype.className.call({
      constructor: cls
    })) {
      return cls;
    } else {
      return CWidget;
    }
  };

  toElements$ = function(e) {
    var i, w, x, _i, _len;
    x = [];
    for (_i = 0, _len = e.length; _i < _len; _i++) {
      i = e[_i];
      if (i != null) {
        if (i.getElementsByTagName) {
          x.push(i);
        } else if ((w = this.wrap(i)).element) {
          x.push(w.element);
        } else {
          x = x.concat(w._all);
        }
      }
    }
    return new CWidgets(x);
  };

  wrapMap$ = {
    option: [1, "<select multiple=multiple>", "</select>"],
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"]
  };

  wrapMap$.optgroup = wrapMap$.option;

  wrapMap$.tbody = wrapMap$.tfoot = wrapMap$.colgroup = wrapMap$.caption = wrapMap$.thead;

  wrapMap$.th = wrapMap$.td;

  wrapDiv$ = document.createElement('div');

  text2elem$ = function(element) {
    var div, i, x;
    if ((x = element.match(/^<(\w+)/)) && (x = wrapMap$[x[1]])) {
      (div = wrapDiv$).innerHTML = [x[1], element, x[2]].join("");
      i = x[0];
      while (i--) {
        div = div.firstChild;
      }
    } else {
      (div = wrapDiv$).innerHTML = element;
    }
    return div;
  };

  CWidget.prototype.wrap = function(element, parent) {
    var div, type, widget;
    if (element instanceof CWidget) {
      return element;
    } else if (element == null) {
      return null;
    } else if (widget = element.widget) {
      return widget;
    } else if ((type = typeof element) === "string") {
      div = text2elem$(element);
      if (div.childNodes.length === 1) {
        element = div.firstChild;
        div.innerHTML = "";
        return this.createWidget(element, parent);
      } else {
        widget = new CWidgets(_slice$.call(div.childNodes));
        div.innerHTML = "";
        return widget;
      }
    } else if (element instanceof Array) {
      return toElements$.call(this, element);
    } else if (type === "number") {
      return new CNode(document.createTextNode(element), parent);
    } else if (element instanceof RegExp) {
      return this.wrap(this.document()).find(String(element).slice(1, -1));
    } else {
      return this.createWidget(element, parent);
    }
  };

  CWidget.prototype.unwrap = function() {
    var e, _ref;
    this.send('onDestroy', 'unwrap');
    if ((_ref = this.parent()) != null) {
      _ref.detach(this);
    }
    e = this.element;
    this.element = this.element.widget = null;
    return new CWidgets([e]);
  };

  CWidget.prototype.rewrap = function(cls) {
    var e, p, w;
    p = this.parent();
    e = this.unwrap()._all[0];
    w = (typeof cls === 'function' ? new cls(e, p) : (cls.unwrap(), cls.element = e, e.widget = cls, cls.parent(p)));
    if (p && p.id() + '-' + w.name() === w.id()) {
      p.attach(w);
    }
    return w;
  };

  new$ = function(tag, ctype, param) {
    var e, k;
    if (typeof ctype === 'object') {
      param = ctype;
      ctype = void 0;
    }
    param || (param = {});
    if (typeof ctype === 'string') {
      param.ctype = ctype;
      ctype = void 0;
    }
    if (ctype) {
      param.ctype = ctype.getName();
    }
    e = $0$;
    if (param) {
      for (k in param) {
        e.setAttribute(k, param[k]);
      }
    }
    return this.createWidget(e);
  };

  CWidget.prototype["new"] = new$.inline("new", "document.createElement(tag)");

  type$.nothing('createWidget ctype new');

  type$.all('rewrap unwrap');

  type$.any('wrap');

  CRoot$ = (function(_super) {
    __extends(CRoot$, _super);

    function CRoot$() {
      return CRoot$.__super__.constructor.apply(this, arguments);
    }

    CRoot$.prototype._ready_functions = [];

    CRoot$.prototype._init_widgets = [];

    CRoot$.prototype.initialize = function() {
      CInit.init_from_param();
      this.defineHandlers().setListens();
      return $(document).setHandler('mousedown', 'mouseup');
    };

    CRoot$.prototype.onready_dom = function() {
      var id, init, ready, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      if (init = CInit.param.init) {
        _ref = init.split(/,/);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          id = _ref[_i];
          this.byId(id);
        }
      }
      if (init = CInit.param.form) {
        _ref1 = init.split(/,/);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          id = _ref1[_j];
          new window[id.uc()]();
        }
      }
      this.initWidgets();
      _ref2 = this._ready_functions;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        ready = _ref2[_k];
        ready.call(this);
      }
      return this;
    };

    CRoot$.prototype.initWidgets = function() {
      var cls, doc, e, id, x, _i, _len, _ref, _results;
      doc = this.document();
      _ref = this._init_widgets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        cls = x[0].getName();
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = x[1];
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            id = _ref1[_j];
            if (!(e = doc.getElementById(id))) {
              continue;
            }
            e.setAttribute('ctype', cls);
            _results1.push(this.createWidget(e));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return CRoot$;

  })(CWidget);

  CRoot = new CRoot$(document.documentElement || document.firstChild);

  CWidget.prototype.document = (ownerDocument$ = div$.ownerDocument) ? function() {
    return this.element.ownerDocument;
  } : function() {
    return this.element.ownerDocument || document;
  };

  CWidget.prototype.window = function() {
    return this.document().defaultView;
  };

  CWidget.prototype.htm = document.documentElement ? function() {
    return this.wrap(this.document().documentElement);
  } : function() {
    return this.wrap(this.document().firstChild);
  };

  CWidget.prototype.root = ownerDocument$ ? function() {
    var e, htm;
    if ((htm = this.htm()).element.contains(this.element)) {
      return htm;
    } else {
      e = this.element;
      while (e.parentNode) {
        e = e.parentNode;
      }
      return this.wrap(e);
    }
  } : function() {
    var e;
    if (this.element.ownerDocument) {
      return this.htm();
    } else {
      e = this.element;
      while (e.parentNode) {
        e = e.parentNode;
      }
      return this.wrap(e);
    }
  };

  CWidget.prototype.body = function() {
    var htm;
    return this.wrap(this.document().body) || (htm = this.htm()).byTag('body') || this["new"]("body").appendTo(htm);
  };

  CWidget.prototype.head = function() {
    var htm;
    return this.wrap(this.document().head) || (htm = this.htm()).byTag('head') || this["new"]("head").appendTo(htm);
  };

  CWidget.prototype.viewport = CNavigator.chrome ? CWidget.prototype.body : CWidget.prototype.htm;

  type$.any('document window htm body head');

  if (his$ = history.pushState) {
    pushState$ = function(w, data, title, url) {
      return w.history.pushState(null, title, url);
    };
    replaceState$ = function(w, data, title, url) {
      return w.history.replaceState(null, title, url);
    };
    gotoState$ = function(w, n) {
      return w.history.go(n);
    };
  } else {
    pushState$ = function(w, data, title, url) {
      return w.location.hash = "#" + url;
    };
    replaceState$ = pushState$;
    gotoState$ = function(w, n) {
      return w.location.hash = "#" + w.history$[w.history_pos$ += n][0];
    };
  }

  init_his$ = function(w) {
    w.history$ = [[w.location.href, w.document.title, null]];
    w.history_pos$ = 0;
    return w.history_before$ = w.history.length;
  };

  CWidget.prototype.navigate = function() {
    var args, data, n, t, title, url, w;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (!(w = this.window()).history$) {
      init_his$(w);
    }
    if (arguments.length) {
      if (args[0] instanceof Array) {
        return w.history$[w.history_pos$ + args[0][0]];
      }
      if (typeof args[0] === 'number') {
        n = args.shift();
      }
      url = args[0], title = args[1], data = args[2];
      if (title == null) {
        title = w.document.title;
      }
      w.document.title = title;
      if (n == null) {
        pushState$(w, null, title, url);
        args[0] = w.location.href;
        (w.history$ = w.history$.slice(w.history_pos$++))[w.history_pos$] = args;
      } else if (n === 0) {
        replaceState$(w, null, title, url);
        args[0] = w.location.href;
        w.history$[w.history_pos$] = args;
      } else if ((t = w.history$[w.history_pos$ += n]) != null) {
        w.document.title = t[1];
        gotoState$(w, n);
      } else {
        throw this.raise("Переход по истории на несуществующий элемент");
      }
      return this;
    } else {
      return w.history$[w.history_pos$];
    }
  };

  CWidget.prototype.history = function(n) {
    var h, i, j, len, w;
    if (!(w = this.window()).history$) {
      init_his$(w);
    }
    if (arguments.length === 0) {
      return w.history$[w.history_pos$];
    } else if (typeof n === 'number') {
      return w.history$[w.history_pos$ + n];
    } else if (n === true) {
      return w.history_pos$;
    } else if (n === false) {
      return w.history$.length;
    } else {
      i = j = w.history_pos$;
      h = w.history$;
      len = h.length;
      while (i >= 0 || j < len) {
        if (--i >= 0 && h[i][0] === n) {
          return i;
        }
        if (++j < len && h[j][0] === n) {
          return j;
        }
      }
      return null;
    }
  };

  CWidget.prototype.history_change = function(data) {
    var n, w;
    if (!(w = this.window()).history$) {
      init_his$(w);
    }
    if (w.history.length + 1 === w.history$.length + w.history_before$) {
      w.history$.push([w.location.href, w.document.title, data]);
    } else if (w.history.length === w.history$.length + w.history_before$) {
      if (null === (n = this.history(w.location.href))) {
        throw this.raise("Невозможно определить позицию в истории - нет текущего url `" + w.location.href + "`");
      }
      w.history_pos$ = n;
    } else {
      w.history_pos$ = w.history$.length + w.history_before$ - w.history.length;
    }
    return this;
  };

  CWidget.prototype.cookie = function(name, value, props) {
    var cookie, d, exp, val, _ref;
    if (arguments.length > 1) {
      if (!props) {
        props = {};
      }
      if (__indexOf.call(props, 'path') < 0) {
        props.path = '/';
      }
      if (value == null) {
        props.expires = -1;
      }
      if (typeof (exp = props.expires) === "number" && exp) {
        d = new Date();
        d.setTime(d.getTime() + exp * 1000);
        exp = props.expires = d;
      }
      if (exp && exp.toUTCString) {
        props.expires = exp.toUTCString();
      }
      cookie = name + "=" + encodeURIComponent(value);
      for (name in props) {
        val = props[name];
        cookie += "; " + name + (val === true ? '' : "=" + val);
      }
      this.document().cookie = cookie;
      return this;
    } else {
      return (_ref = this.document().cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"))) != null ? _ref[1] : void 0;
    }
  };

  CWidget.prototype.cookdef = function(name, def) {
    var i, x, y;
    if (typeof name === 'string') {
      if ((x = cookie(name)) != null) {
        return x;
      } else {
        return def;
      }
    } else {
      y = {};
      for (i in name) {
        y[i] = ((x = cookie(i)) != null ? x : name[i]);
      }
      return y;
    }
  };

  CWidget.prototype.send = function() {
    var args, q, type, w, _i, _len;
    type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (type == null) {
      return;
    }
    if (typeof type === 'function') {
      return type.apply(this, args);
    }
    if (this._sendQueue && (q = this._sendQueue[type])) {
      for (_i = 0, _len = q.length; _i < _len; _i++) {
        w = q[_i];
        w.apply(this, args);
      }
    }
    return typeof this[type] === "function" ? this[type].apply(this, args) : void 0;
  };

  CWidget.prototype.on = function(type, listen, phase) {
    var q, _base, _i, _len, _name, _ref;
    this._sendQueue || (this._sendQueue = {});
    _ref = $A(type);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      type = _ref[_i];
      if (/^[a-z0-9]+$/.test(type)) {
        this.setHandler(type);
      }
      q = (_base = this._sendQueue)[_name = 'on' + type] || (_base[_name] = []);
      if (phase) {
        q.unshift(listen);
      } else {
        q.push(listen);
      }
    }
    return this;
  };

  CWidget.prototype.one = function(type, listen, phase) {
    var _i, _len, _ref;
    _ref = $A(type);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      type = _ref[_i];
      this.on(type, (function(type, listen, phase) {
        return function() {
          this.off(type, arguments.callee, phase);
          return listen.apply(this, arguments);
        };
      })(type, listen, phase), phase);
    }
    return this;
  };

  rmEventAndHandler$ = function(type) {
    var t;
    delete this._sendQueue[t = 'on' + type];
    if (!t in this && /^[a-z]+$/.test(type)) {
      return this.removeHandler(type);
    }
  };

  rmEvent$ = function(type) {
    return delete this._sendQueue['on' + type];
  };

  rmHandler$ = rmEventAndHandler$;

  rmEvt$ = function(type, listen, phase) {
    var fn, i, ons, _i, _j, _len, _len1, _ref;
    phase || (phase = -1);
    _ref = $A(type);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      type = _ref[_i];
      if (!(ons = this._sendQueue['on' + type])) {
        continue;
      }
      for ((phase > 0 ? (i = _j = 0, _len1 = ons.length) : i = _j = ons.length - 1); phase > 0 ? _j < _len1 : _j >= 0; i = _j += phase) {
        fn = ons[i];
        if (!($0$ === listen)) {
          continue;
        }
        ons.splice(i, 1);
        break;
      }
      if (ons.length === 0) {
        rmHandler$.call(this, type);
      }
    }
    return this;
  };

  code$ = null;

  eval(rmEvt$.code('rmEvtByListen$', 'fn'));

  rmEvtByListen$ = code$;

  eval(rmEvt$.code('rmEvtByListen$', 'fn._belong'));

  rmEvtByBelong$ = code$;

  CWidget.prototype.off = function(type, listen) {
    var _i, _len, _ref;
    if (listen == null) {
      _ref = $A(type);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        type = _ref[_i];
        rmHandler$.call(this, type);
      }
    } else if (typeof listen !== 'function') {
      rmEvtByBelong$.apply(this, arguments);
    } else {
      rmEvtByListen$.apply(this, arguments);
    }
    return this;
  };

  CWidget.prototype.clean = function() {
    var event, events, type, w, ws, _i, _len, _ref, _ref1;
    if (!this._sendQueue) {
      return;
    }
    _ref = this._sendQueue;
    for (type in _ref) {
      events = _ref[type];
      type = type.replace(/^on/, '');
      ws = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = events.length; _i < _len; _i++) {
          event = events[_i];
          if (!document.contains((w = event._belong).element)) {
            _results.push([type, w]);
          }
        }
        return _results;
      })();
      for (_i = 0, _len = ws.length; _i < _len; _i++) {
        _ref1 = ws[_i], type = _ref1[0], w = _ref1[1];
        this.off(type, w);
      }
    }
    return this;
  };

  CWidget.prototype.defineHandlers = function() {
    var a, h, handlers, key, listens, match, name, names, selfHandlers, type, who, x, _i, _len, _ref;
    handlers = {};
    listens = {};
    selfHandlers = [];
    for (key in this) {
      if (!(match = key.match(/^(?:(.+)_)?on([a-z0-9]+)(?:_([a-z0-9]+))?$/i))) {
        continue;
      }
      a = match[0], names = match[1], type = match[2], who = match[3];
      if (names && who) {
        throw this.raise("Устанавливать listens на элементы нельзя");
      }
      if (who) {
        listens[key] = [who, type];
      } else if (!names) {
        if (type !== 'e' && /^[a-z]+$/.test(type)) {
          selfHandlers.push(type);
        }
      } else {
        h = handlers;
        _ref = names = names.split(/__/);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          if (!(x = h[name])) {
            h[name] = x = {};
          }
          h = x;
        }
        if (!(h = x["@"])) {
          h = x["@"] = {};
        }
        h[type] = key;
      }
    }
    extend(this.constructor, {
      handlers: handlers,
      listens: listens,
      selfHandlers: selfHandlers
    });
    return this;
  };

  CWidget.prototype.setHandlers = function() {
    if (this.constructor.selfHandlers.length) {
      this.setHandler.apply(this, this.constructor.selfHandlers);
    }
    return this;
  };

  CWidget.prototype.setHandler = function() {
    var type, _i, _len;
    if (arguments.length === 0) {
      throw this.raise("укажите хоть один аргумент для setHandler");
    }
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      type = arguments[_i];
      CSend.setHandler(this.element, type);
    }
    return this;
  };

  CWidget.prototype.removeHandler = function() {
    var type, _i, _len;
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      type = arguments[_i];
      CSend.removeHandler(this.element, type);
    }
    return this;
  };

  CWidget.prototype.setHandlersOnElements = function(list) {
    var a, h, i, listener, main_type, name, p, path, type, widget, _i, _len;
    path = [];
    p = this;
    while (p && p.element.id && (h = p.constructor.handlers)) {
      for (i = _i = 0, _len = path.length; _i < _len; i = ++_i) {
        name = path[i];
        if (!(h = h[name])) {
          break;
        }
      }
      if (i === path.length) {
        for (name in h) {
          if (!(a = h[name]["@"])) {
            continue;
          }
          widget = name === 'frame' ? list || this.child() : this.byName(name);
          for (type in a) {
            main_type = a[type];
            listener = (function(p, main_type) {
              return function() {
                var args;
                args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return p[main_type].apply(p, __slice.call(args).concat([this]));
              };
            })(p, main_type);
            listener._belong = p;
            widget.on(type, listener);
          }
        }
      }
      path.unshift(/^\d+$/.test(name = this.name()) ? 'frame' : name);
      p = p.parent();
    }
    return this;
  };

  readyRun$ = 0;

  CWidget.prototype.ready$ = ready$ = function(e) {
    var w;
    if (readyRun$ < 2) {
      readyRun$ = 2;
      (w = $(window)).send('onReadyDom');
      w.off('load ReadyDom', ready$);
    }
    return this;
  };

  listens$ = {
    onready_dom: function(listener) {
      if (readyRun$ === 2) {

      } else {
        $(window).on('ReadyDom', listener);
        if (readyRun$ === 0) {
          readyRun$ = 1;
          if (document.addEventListener) {
            document.addEventListener("DOMContentLoaded", ready$, false);
          } else {
            this.wrap("<script defer>\nCWidget.prototype.ready$()\n</script>").appendTo(this.body());
          }
          $(window).on('load', ready$);
        }
      }
      return this;
    }
  };

  CWidget.prototype.setListens = function() {
    var fn, key, listener, self, type, who, _ref, _ref1;
    self = this;
    _ref = this.constructor.listens;
    for (key in _ref) {
      _ref1 = _ref[key], who = _ref1[0], type = _ref1[1];
      listener = (function(self, key) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return self[key].apply(self, args);
        };
      })(self, key);
      listener._belong = this;
      if (fn = listens$[key]) {
        fn.call(this, listener);
      } else if (typeof this[who] !== 'function') {
        this[who].on(type, listener);
      } else {
        this.wrap(this[who]()).on(type, listener);
      }
    }
    return this;
  };

  CWidget.prototype._default_assign = 'text';

  CWidget.prototype._default_update = void 0;

  CWidget.prototype.assign = function(key, type, update) {
    var attr, fn, model, _ref;
    model = this.model;
    _ref = $A(type), type = _ref[0], attr = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
    if (!model.has(key)) {
      model.set(key, this[type].apply(this, attr));
    }
    if (update) {
      this.on(update, (function(key, type, attr) {
        return function() {
          return this.model.change(key, this[type].apply(this, attr));
        };
      })(key, type, attr));
    }
    model.on(key, fn = (function(_this) {
      return function(type, attr) {
        return function(val) {
          return _this[type].apply(_this, __slice.call(attr).concat([val]));
        };
      };
    })(this)(type, attr));
    return fn._belong = this;
  };

  CWidget.prototype.setModel = function() {
    var ass, attr, _i, _len, _ref;
    if (attr = this.attr('model')) {
      _ref = $A(attr, /;\s*/);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ass = _ref[_i];
        ass = $A(ass, /:/);
        this.assign(ass[0], ass[1] || this._default_assign, ass[2] || this._default_update);
      }
    }
    return this;
  };

  CWidget.prototype.setModelOnElements = function(elem) {
    var e, _i, _len;
    if (elem == null) {
      elem = this._elements;
    }
    for (_i = 0, _len = elem.length; _i < _len; _i++) {
      e = elem[_i];
      this.byName(e).setModel();
    }
    return this;
  };

  CWidget.prototype.observe = function(methods, before, after, phase) {
    var After, Before, fn, method, onAfter, onBefore, _i, _len, _ref;
    _ref = $A(methods);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      method = _ref[_i];
      After = method.ucFirst();
      onBefore = "on" + (Before = "Before" + After);
      onAfter = "on" + After;
      if (!('_observe' in this[method])) {
        this[method] = fn = (function(method, onBefore, onAfter) {
          return function() {
            var args, ret;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            this.send.apply(this, [onBefore].concat(__slice.call(args)));
            ret = this.constructor.prototype[method].apply(this, args);
            this.send.apply(this, [onAfter, ret].concat(__slice.call(args)));
            return ret;
          };
        })(method, onBefore, onAfter);
        fn._observe = 1;
      }
      if (before) {
        this.on(Before, before, phase);
      }
      if (after) {
        this.on(After, after, phase);
      }
    }
    return this;
  };

  CWidget.prototype.shut = function(methods, observe) {
    var After, Before, method, onAfter, onBefore, _i, _len, _ref;
    rmHandler$ = rmEvent$;
    _ref = $A(methods);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      method = _ref[_i];
      if (!this[method]._observe) {
        continue;
      }
      After = method.ucFirst();
      onBefore = "on" + (Before = "Before" + After);
      onAfter = "on" + After;
      this.off(Before, observe);
      this.off(After, observe);
      if (!(onBefore in this._sendQueue && onAfter in this._sendQueue)) {
        delete this[method];
      }
    }
    rmHandler$ = rmEventAndHandler$;
    return this;
  };

  CWidget.prototype.listen = function(type, fn, phase) {
    this.element.addEventListener(type, fn, phase || false);
    return this;
  };

  CWidget.prototype.drop = function(type, fn, phase) {
    this.element.removeEventListener(type, fn, phase || false);
    return this;
  };

  fire_mouse$ = {
    bubbles: true,
    cancelable: true,
    view: null,
    detail: 0,
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    ctrlKey: false,
    altKey: false,
    shiftKey: false,
    metaKey: false,
    button: 0,
    relatedTarget: null
  };

  fire_key$ = {
    bubbles: true,
    cancelable: true,
    view: null,
    ctrlKey: false,
    altKey: false,
    shiftKey: false,
    metaKey: false,
    keyCode: 0,
    charCode: 0
  };

  fire_html$ = {
    bubbles: false,
    cancelable: true
  };

  CWidget.prototype.fire = function(type, e) {
    var err, evt;
    if (e == null) {
      e = {};
    }
    if (/^mouse(over|out|down|up|move)|(dbl)?click$/.test(type)) {
      evt = document.createEvent("MouseEvents");
      extend_uniq(e, {
        cancelable: type !== "mousemove",
        relatedTarget: this.htm().element,
        view: this.window()
      }, fire_mouse$);
      evt.initMouseEvent(type, e.bubbles, e.cancelable, e.view, e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);
    } else if (/^key(up|down|press)$/.test(type)) {
      extend_uniq(e, {
        view: this.window()
      }, fire_key$);
      try {
        evt = document.createEvent("KeyEvents");
        evt.initKeyEvent(type, e.bubbles, e.cancelable, e.view, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, e.keyCode, e.charCode);
      } catch (_error) {
        err = _error;
        evt = document.createEvent("Events");
        evt.initEvent(type, e.bubbles, e.cancelable);
        delete e.bubbles;
        delete e.cancelable;
        extend(evt, e);
      }
      if (CNavigator.ie || CNavigator.opera) {
        evt.keyCode = e.charCode > 0 ? e.charCode : e.keyCode;
        evt.charCode = void 0;
      }
    } else {
      extend_uniq(e, fire_html$);
      evt = document.createEvent("HTMLEvents");
      evt.initEvent(type, e.bubbles, e.cancelable);
    }
    this.element.dispatchEvent(evt);
    return this;
  };

  extend(CWidget.prototype.fire, {
    fire_mouse$: fire_mouse$,
    fire_key$: fire_key$,
    fire_html$: fire_html$
  });

  CWidget.prototype.attach = function(name) {
    var w, x;
    this["$" + name] = w = this.byName(name);
    if (!(x = this[name]) || x instanceof CWidget) {
      this[name] = w;
    }
    return this._elements.push(name);
  };

  CWidget.prototype.detach = function(name) {
    var e, idx, x;
    if (typeof name !== 'string') {
      x = name;
      name = name.name();
    }
    if ((x != null ? x : x = this[name]) instanceof CWidget) {
      delete this[name];
    }
    if (x != null) {
      x.parent(null);
    }
    if (-1 !== (idx = (e = this._elements).indexOf(name))) {
      e.splice(idx, 1);
    }
    delete this["$" + name];
    return this;
  };

  CWidget.prototype.getElements = function() {
    var element, id, match, regexp, _i, _len, _ref, _results;
    id = this.element.id;
    regexp = new RegExp('^' + id + '-(\\w+)$');
    _ref = this.root().find("[id^=" + id + "-]")._all;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      if (match = element.id.match(regexp)) {
        _results.push(match[1]);
      }
    }
    return _results;
  };

  CWidget.prototype.attachElements = function() {
    var elem, name, _i, _len;
    if (!this._elements) {
      this._elements = [];
    }
    elem = arguments.length ? Array.prototype.slice.call(arguments) : this.getElements();
    for (_i = 0, _len = elem.length; _i < _len; _i++) {
      name = elem[_i];
      this.attach(name);
    }
    return this;
  };

  type$.all('defineHandlers setHandler setHandlers setHandlersOnElements setListens setModel setModelOnElements observe fire listen drop attach detach attachElements on off');

  CWidget.prototype.byName = function(name) {
    var id, p, root, widget;
    widget = this.byId(id = this.element.id + '-' + name, this);
    if (!widget) {
      if ((root = this.root()) === this.htm()) {
        throw this.raise("byName к неизвестному name=" + name);
      }
      if (!(widget = root.first("[id=" + id + "]", this))) {
        throw this.raise("byName('" + name + "') - " + this + " не вставлен в документ. Его id недоступны");
      }
    }
    if (this !== (p = widget.parent())) {
      throw this.raise("У элемента `" + id + "`" + widget + " указан неверный parent `" + p + '`');
    }
    return widget;
  };

  if (!(qs$ = document.querySelector && IE !== 8)) {
    CInit.require("lib/nwmatcher-1.2.5");
  }

  byXYAll$ = function(x, y) {
    var c, e, i, k, self, widget, z, _i, _len;
    k = -1000;
    self = widget = this.$0$(x, y);
    c = [];
    e = [];
    while (widget) {
      e.push(z = widget.element);
      c.push([z.style.zIndex, z.style.position]);
      widget.css({
        'z-index': k--,
        position: 'relative'
      });
      widget = this.$0$(x, y);
      if (self === widget) {
        break;
      }
    }
    for (i = _i = 0, _len = c.length; _i < _len; i = ++_i) {
      z = c[i];
      e[i].widget.css({
        'z-index': z[0],
        position: z[1]
      });
    }
    return new CWidgets(e);
  };

  CWidget.prototype.byXY = function(x, y) {
    var e, v, vl, vt, vx, vy;
    vl = this.viewLeft();
    vt = this.viewTop();
    return this.wrap(!((vl <= x && x <= this.viewRight())) || !((vt <= y && y <= this.viewBottom())) ? (v = this.viewport(), vx = v.vscroll(), vy = v.hscroll(), x -= vl, y -= vt, this.window().scrollTo(x, y), x += vx - v.vscroll(), y += vy - v.hscroll(), e = this.document().elementFromPoint(x, y), v.vscroll(vx), v.hscroll(vy), e) : this.document().elementFromPoint(x - vl, y - vt));
  };

  CWidget.prototype.byViewXY = function(x, y) {
    return this.byXY(x + this.viewLeft(), y + this.viewTop());
  };

  CWidget.prototype.byXYAll = byXYAll$.inline('byXYAll', 'byXY');

  CWidget.prototype.byViewXYAll = byXYAll$.inline('byViewXYAll', 'byViewXY');

  CWidget.prototype.byId = function(id) {
    var d, e, root;
    if (e = (d = this.document()).getElementById(id)) {
      return this.createWidget(e);
    } else if (d.contains(this.element)) {
      return null;
    } else if (id === (root = this.root()).element.id) {
      return root;
    } else {
      return root.first("[id=" + id + "]");
    }
  };

  CWidget.prototype.byTag = (tn$ = document.getElementsByTagName && IE !== 5) ? function(name) {
    return this.wrap(this.element.getElementsByTagName(name)[0]);
  } : function(name) {
    return this.wrap(NW.Dom.byTag(name, this.element)[0]);
  };

  CWidget.prototype.byTagAll = tn$ ? function(name) {
    return new CWidgets(this.element.getElementsByTagName(name));
  } : function(name) {
    return new CWidgets(NW.Dom.byTag(name, this.element));
  };

  CWidget.prototype.byClass = (cn$ = document.getElementsByClassName) ? function(classes) {
    return this.wrap(this.element.getElementsByClassName(classes)[0]);
  } : function(classes) {
    return this.wrap(NW.Dom.byClass(classes, this.element)[0]);
  };

  CWidget.prototype.byClassAll = cn$ ? function(classes) {
    return new CWidgets(this.element.getElementsByClassName(classes));
  } : function(classes) {
    return new CWidgets(NW.Dom.byClass(classes, this.element));
  };

  CWidget.prototype.first = qs$ ? (function(query) {
    if (query) {
      return this.wrap(this.element.querySelector(query));
    } else {
      return this.child(0);
    }
  }) : function(query) {
    if (query) {
      return this.wrap(NW.Dom.first(query, this.element));
    } else {
      return this.child(0);
    }
  };

  CWidget.prototype.find = qs$ ? function(query) {
    return new CWidgets(this.element.querySelectorAll(query));
  } : function(query) {
    return new CWidgets(NW.Dom.select(query, this.element));
  };

  CWidget.prototype.last = function(query) {
    if (query) {
      return this.find(query).item(-1);
    } else {
      return this.child(-1);
    }
  };

  matchesSelector$ = div$.matchesSelector || div$.webkitMatchesSelector || div$.mozMatchesSelector || div$.msMatchesSelector || div$.oMatchesSelector;

  CWidget.prototype.match = matchesSelector$ ? function(query) {
    return matchesSelector$.call(this.element, query);
  } : function(query) {
    return NW.Dom.match(this.element, query);
  };

  type$.range('byId byName byTag byClass first last');

  type$.rangeAll('byTagAll byClassAll find');

  CWidget.prototype.all = function() {
    return [this.element];
  };

  CWidget.prototype.length = 1;

  CWidget.prototype.empty = function() {
    return false;
  };

  CWidget.prototype.item = function(n) {
    if (n === 0 || n === -1) {
      return this;
    }
  };

  CWidget.prototype.items = function() {
    return [this];
  };

  CWidget.prototype.each = function(fn) {
    return fn.call(this, 0, this);
  };

  CWidget.prototype.invoke = function() {
    var args, name;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (typeof this[name] === "function") {
      this[name].apply(this, args);
    }
    return this;
  };

  CWidget.prototype.map = function() {
    var args, name;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return [(typeof name === 'function' ? name.apply(this, args) : typeof this[name] === "function" ? this[name].apply(this, args) : void 0)];
  };

  CWidget.prototype.reduce = function() {
    var a, any, args, b, ls, name, op, _i, _len, _ref;
    op = arguments[0], name = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    if (typeof op !== 'function') {
      a = null;
      eval("a=function(a, b) { return a " + op + " b }");
    }
    if (ls = (_ref = this.exists(name)).map.apply(_ref, [name].concat(__slice.call(args)))) {
      a = ls[0], any = 2 <= ls.length ? __slice.call(ls, 1) : [];
      for (_i = 0, _len = any.length; _i < _len; _i++) {
        b = any[_i];
        a = op(a, b);
      }
      return a;
    }
  };

  CWidget.prototype.result = function() {
    var args, name;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return typeof this[name] === "function" ? this[name].apply(this, args) : void 0;
  };

  CWidget.prototype.grep = function() {
    var args, name;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if ((typeof name === 'function' ? name.apply(this, args) : typeof this[name] === "function" ? this[name].apply(this, args) : void 0)) {
      return this;
    } else {
      return new CWidgets([]);
    }
  };

  CWidget.prototype.exists = function(name) {
    if (name in this) {
      return this;
    } else {
      return new CWidgets([]);
    }
  };

  CWidget.prototype.filter = function(query) {
    if (this.match(query)) {
      return this;
    } else {
      return new CWidgets([]);
    }
  };

  CWidget.prototype.union = function() {
    var i, u, x, _i, _len;
    u = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    x = [];
    x.splice.apply(x, [x.length, 0].concat(__slice.call(this.all())));
    for (_i = 0, _len = u.length; _i < _len; _i++) {
      i = u[_i];
      x.splice.apply(x, [x.length, 0].concat(__slice.call(i.all())));
    }
    return new CWidgets(x);
  };

  CWidget.prototype.queryIndex = function(query, k) {
    if (k == null) {
      k = 0;
    }
    if ((k === 0 || k === -1) && this.match(query)) {
      return this;
    } else {
      return null;
    }
  };

  sliceW$ = function(from, all) {
    var i, k;
    i = k = 0;
    if (from instanceof Array) {
      i = from[1] || 0;
      if ((k = from[2]) == null) {
        k = (from.length === 1 ? 1 : 0);
      }
      from = from[0];
    }
    if (from instanceof CWidget) {
      from = from.element;
    }
    if (typeof from === 'object') {
      from = all.indexOf(from, i);
      if (from === -1) {
        from = null;
      }
    } else if (typeof from === 'string') {
      from = this.queryIndex(from, i);
    }
    if (from != null) {
      from += k;
    }
    return from;
  };

  CWidget.prototype.slice = function(from, to) {
    var all;
    all = this._all || [this.element];
    return new CWidgets(_slice$.call(all, sliceW$.call(this, from, all), sliceW$.call(this, to, all)));
  };

  type$.nothing('all empty length item items invoke map reduce result grep exists filter union slice queryIndex');

  CWidget.prototype.clone = function(id, parent, cls) {
    var e, element, es, regexp, replace, tmp, _i, _j, _len, _len1, _ref;
    element = this.element.cloneNode(true);
    element.widget = null;
    tmp = wdiv$.element;
    wdiv$.element = element;
    _ref = (es = wdiv$.byTagAll("*").all());
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      e = _ref[_i];
      if (e.widget) {
        e.widget = null;
      }
    }
    wdiv$.element = tmp;
    if (id) {
      element.id = id;
      regexp = new RegExp('^' + this.id() + '-');
      replace = id + "-";
      for (_j = 0, _len1 = es.length; _j < _len1; _j++) {
        e = es[_j];
        if (id && e.id) {
          e.id = e.id.replace(regexp, replace);
        }
      }
    }
    return new (cls ? (typeof cls === 'string' ? window[cls] : cls) : this.constructor)(element, parent);
  };

  CWidget.prototype.clonehtml = function(id, parent, cls) {
    var html;
    id || (id = CMath.uniqid());
    html = this.outer().replace(new RegExp('\\b([Ii][Dd]=[\'"]?)' + this.id() + '([\\s>\'"-])', 'g'), '$1' + id + '$2');
    if (parent || cls) {
      return html = html.replace(new RegExp('\\b([Ii][Dd]=[\'"]?' + id + '[\\s>\'"])'), '$1' + (parent ? ' cparent=' + parent.id() : '') + (cls ? ' ctype=' + (cls instanceof Function ? cls.getName() : cls) : ''));
    }
  };

  type$.all('clone');

  CWidget.prototype.id = function(id) {
    if (arguments.length) {
      if (id === null) {
        this.attr("id", null);
      } else {
        this.element.id = id;
      }
      return this;
    } else {
      return this.element.id;
    }
  };

  CWidget.prototype.name = function(name) {
    var match;
    if (arguments.length) {
      this.id(this.element.id.replace(/-\w+$/, '') + '-' + name);
      return this;
    } else {
      return (match = this.element.id.match(/-(\w+)$/)) && match[1];
    }
  };

  CWidget.prototype.number = function(n) {
    var match;
    if (arguments.length) {
      this.id(this.element.id.replace(/\d+$/, '') + n);
      return this;
    } else {
      return (match = this.element.id.match(/(\d+)$/)) && match[1];
    }
  };

  CWidget.prototype.tag = function(name) {
    if (arguments.length) {
      return this.outer(this.outer().replace(/^<\w+/, '<' + name));
    } else {
      return this.element.tagName;
    }
  };

  CWidget.prototype.text = div$.innerText != null ? function(val) {
    if (arguments.length) {
      this.element.innerText = val;
      return this;
    } else {
      return this.element.innerText;
    }
  } : function(val) {
    if (arguments.length) {
      this.element.textContent = val;
      return this;
    } else {
      return this.element.textContent;
    }
  };

  CWidget.prototype.html = function(val) {
    if (arguments.length) {
      this.element.innerHTML = val;
      return this;
    } else {
      return this.element.innerHTML;
    }
  };

  CWidget.prototype.htmlscript = function(val) {
    var script, win, _i, _len, _ref;
    win = this.window();
    this.element.innerHTML = val;
    _ref = this.find("script").all();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      script = _ref[_i];
      win["eval"](script.innerHTML);
    }
    return this;
  };

  CWidget.prototype.val = CWidget.prototype.text;

  CWidget.prototype.val$f = function() {
    return parseFloat(this.val());
  };

  CWidget.prototype.val$i = function(base) {
    if (base == null) {
      base = 10;
    }
    return parseInt(this.val(), base);
  };

  CWidget.prototype.inc = function(i) {
    if (i == null) {
      i = 1;
    }
    this.val(this.val$f() + i);
    return this;
  };

  CWidget.prototype.dec = function(i) {
    if (i == null) {
      i = 1;
    }
    return this.inc(-i);
  };

  CWidget.prototype.content = function(content) {
    if (arguments.length) {
      this.down().free();
      return this.append(content);
    } else {
      return new CWidgets(this.element.childNodes);
    }
  };

  CWidget.prototype.normalize = function() {
    this.element.normalize();
    return this;
  };

  CWidget.prototype.update = function(val, request) {
    if (false !== this.send('onBeforeUpdate', val)) {
      if (/^\{/.test(val)) {
        val = toJSON(val);
        this.htmlscript(CTemplate.compile(val.template)(val.data, this.id()));
      } else if ((request != null ? request.request : void 0) && /^text\/html\b/i.test(request.request.getResponseHeader("Content-Type"))) {
        this.htmlscript(val);
      } else {
        this.val(val);
      }
      this.send('onUpdate', val);
    }
    return this;
  };

  CWidget.prototype.outer = function(val) {
    var div, e, focus, p, type, _ref;
    if (arguments.length) {
      focus = this.hasFocus();
      if ((type = typeof val) === "string" || type === "number") {
        val = text2elem$(val);
        if (val.childNodes.length !== 1) {
          throw this.raise("html содержит несколько нод");
        }
        val = val.firstChild;
      }
      if (val instanceof CWidget) {
        val = val.element || ((function() {
          if (val._all.length !== 1) {
            throw this.raise("невозможно заменить одну ноду на несколько");
          } else {
            return val._all[0];
          }
        }).call(this));
      }
      e = this.element;
      if (p = e.parentNode) {
        p.insertBefore(val, e);
        p.removeChild(e);
      }
      if ((_ref = val.widget) != null) {
        _ref.element = null;
      }
      e.widget = null;
      val.widget = this;
      this.element = val;
      if (focus) {
        this.focus();
      }
      return this;
    } else {
      (div = document.createElement('div')).appendChild(this.element.cloneNode(true));
      return div.innerHTML;
    }
  };

  append_anim$ = function(method, val, timeout, listen) {
    var counter, i, i1, i2, items, its, k, left, s1, s2, save, top, x, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
    its = [];
    if (typeof timeout === 'function') {
      listen = timeout;
      timeout = 'norm';
    }
    _ref = items = val.items();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      x = i.css(['float', 'position', 'display', 'margin']);
      i.before(i1 = this.wrap("<div></div>").css({
        visibility: 'hidden',
        display: 'none'
      }));
      its.push([x, i1, i.pos()]);
    }
    this[method](val);
    for (k = _j = 0, _len1 = items.length; _j < _len1; k = ++_j) {
      i = items[k];
      its[k][3] = i.pos();
    }
    counter = items.length;
    _results = [];
    for (k = _k = 0, _len2 = items.length; _k < _len2; k = ++_k) {
      i = items[k];
      _ref1 = its[k], x = _ref1[0], i1 = _ref1[1], s1 = _ref1[2], s2 = _ref1[3];
      i.before(i2 = this.wrap("<div></div>").css({
        visibility: 'hidden',
        width: 0,
        height: 0
      }));
      save = i.saveCss(['position', 'margin', 'left', 'top']);
      _ref2 = i.css({
        position: 'absolute',
        margin: 0,
        left: 0,
        top: 0
      }).pos(), left = _ref2.left, top = _ref2.top;
      i.css({
        left: s1.left - left,
        top: s1.top - top
      }).animate({
        left: s2.left - left,
        top: s2.top - top
      }, timeout, (function(_this) {
        return function(i1, i2, i, save, listen) {
          return function() {
            i.css(save);
            i1.union(i2).free();
            if (listen && --counter === 0) {
              return _this.send(listen);
            }
          };
        };
      })(this)(i1, i2, i, save, listen));
      i1.css(x).css({
        width: s1.width,
        height: s1.height
      }).css(x).animate({
        width: 0,
        height: 0
      }, timeout);
      _results.push(i2.animate({
        width: s2.width,
        height: s2.height
      }, timeout));
    }
    return _results;
  };

  insert$ = function(val, timeout, listen) {
    var a, e, p, v, _i, _j, _len, _len1;
    val = this.wrap(val);
    if (timeout != null) {
      append_anim$.call(this, $0$, val, timeout, listen);
    } else {
      p = (e = this.element).parentNode;
      a = val.all();
      if (p) {
        $1$;
        for (_i = 0, _len = a.length; _i < _len; _i++) {
          v = a[_i];
          p.insertBefore(v, e);
        }
      } else {
        for (_j = 0, _len1 = a.length; _j < _len1; _j++) {
          v = a[_j];
          if (p = v.parentNode) {
            p.removeChild(v);
          }
        }
      }
    }
    return this;
  };

  CWidget.prototype.before = insert$.inline("before", "'before'", "");

  CWidget.prototype.after = insert$.inline("after", "'after'", "e=e.nextSibling");

  CWidget.prototype.insertBefore = function() {
    var args, val, _ref;
    val = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    (_ref = this.wrap(val)).before.apply(_ref, [this].concat(__slice.call(args)));
    return this;
  };

  CWidget.prototype.insertAfter = function() {
    var args, val, _ref;
    val = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    (_ref = this.wrap(val)).after.apply(_ref, [this].concat(__slice.call(args)));
    return this;
  };

  CWidget.prototype.append = function(val, timeout, listen) {
    var e, v, _i, _len, _ref;
    val = this.wrap(val);
    if (timeout != null) {
      append_anim$.call(this, 'append', val, timeout, listen);
    } else {
      e = this.element;
      _ref = val.all();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        e.appendChild(v);
      }
    }
    return this;
  };

  CWidget.prototype.appendTo = function() {
    var args, val, _ref;
    val = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    (_ref = this.wrap(val)).append.apply(_ref, [this].concat(__slice.call(args)));
    return this;
  };

  CWidget.prototype.prepend = function(val, timeout, listen) {
    var e, f, v, _i, _len, _ref;
    val = this.wrap(val);
    if (timeout != null) {
      append_anim$.call(this, 'prepend', val, timeout, listen);
    } else {
      f = (e = this.element).firstChild;
      _ref = val.all();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        e.insertBefore(v, f);
      }
    }
    return this;
  };

  CWidget.prototype.prependTo = function() {
    var args, val, _ref;
    val = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    (_ref = this.wrap(val)).prepend.apply(_ref, [this].concat(__slice.call(args)));
    return this;
  };

  CWidget.prototype.wrapIn = function(val) {
    var r;
    this.before(val = this.wrap(val));
    while (r = val.child(0)) {
      val = r;
    }
    return val.content(this);
  };

  CWidget.prototype.wrapInAll = CWidget.prototype.wrapIn.inline('wrapInAll');

  swap_arr$ = ['prevnode', 'nextnode', 'up'];

  swap_append$ = {
    prevnode: 'after',
    nextnode: 'before',
    up: 'append'
  };

  CWidget.prototype.swap = function(val, timeout, listen) {
    var ch, counter, em, er, ex, fn, i, j, k, m, p, _i, _j, _len, _len1, _ref;
    if (this.nextnode() === (val = this.wrap(val))) {
      this.before(val, timeout, listen);
    } else if (this.prevnode() === val) {
      this.after(val, timeout, listen);
    } else {
      counter = 0;
      fn = timeout != null ? (function(listen) {
        return function() {
          if (listen && --counter === 0) {
            return this.send(listen);
          }
        };
      })(listen) : void 0;
      ex = [this, val];
      em = [val, this];
      er = (function() {
        var _i, _j, _len, _len1, _results;
        _results = [];
        for (j = _i = 0, _len = ex.length; _i < _len; j = ++_i) {
          k = ex[j];
          p = null;
          for (_j = 0, _len1 = swap_arr$.length; _j < _len1; _j++) {
            i = swap_arr$[_j];
            if (p = k[i]()) {
              break;
            }
          }
          _results.push([k, em[j], i, p]);
        }
        return _results;
      })();
      for (_i = 0, _len = ex.length; _i < _len; _i++) {
        k = ex[_i];
        if (!(k.up())) {
          continue;
        }
        counter++;
        k.free(timeout, fn);
      }
      for (_j = 0, _len1 = er.length; _j < _len1; _j++) {
        _ref = er[_j], k = _ref[0], m = _ref[1], i = _ref[2], p = _ref[3];
        if (!(p)) {
          continue;
        }
        if (m.contains(p)) {
          counter++;
          ch = m.down();
          m.append(k.down(), timeout, fn);
          k.content(ch);
        }
        counter++;
        p[swap_append$[i]](m, timeout, fn);
      }
    }
    return this;
  };

  nes$ = 'nextElementSibling' in div$;

  nextElem = function(e, x) {
    e = e[x];
    while (e && e.nodeType !== 1) {
      e = e[x];
    }
    return e;
  };

  dir = function() {
    var e, r;
    e = this.element;
    r = [];
    while (e = $0$) {
      r.push(e);
    }
    return new CWidgets(r);
  };

  dirprev = function() {
    var e, r, x;
    return new CWidgets((e = (r = this.element).parentNode) ? (e = e.firstChild, x = [], (function() {
      var _results;
      _results = [];
      while (e !== r) {
        $0$;
        _results.push(e = e.nextSibling);
      }
      return _results;
    })(), x) : []);
  };

  CWidget.prototype.floor = function() {
    return this.wrap(this.element.offsetParent);
  };

  CWidget.prototype.upper = function() {
    return this.wrap(nextElem(this.element, "parentNode"));
  };

  CWidget.prototype.next = nes$ ? function() {
    return this.wrap(this.element.nextElementSibling);
  } : function() {
    return this.wrap(nextElem(this.element, 'nextSibling'));
  };

  CWidget.prototype.prev = nes$ ? function() {
    return this.wrap(this.element.previousElementSibling);
  } : function() {
    return this.wrap(nextElem(this.element, 'previousSibling'));
  };

  CWidget.prototype.up = function() {
    return this.wrap(this.element.parentNode);
  };

  CWidget.prototype.prevnode = function() {
    return this.wrap(this.element.previousSibling);
  };

  CWidget.prototype.nextnode = function() {
    return this.wrap(this.element.nextSibling);
  };

  code$ = null;

  CWidget.prototype.floorAll = dir.inline('floorAll', 'e.offsetParent');

  CWidget.prototype.upperAll = eval(dir.code('upperAll', 'nextElem(e, "parentNode")'));

  code$;

  CWidget.prototype.nextAll = nes$ ? dir.inline('nextAll', 'e.nextElementSibling') : (eval(dir.code('nextAll', 'nextElem(e, "nextSibling")')), code$);

  CWidget.prototype.prevAll = dirprev.inline('prevAll', 'if(e.nodeType==1) x.push(e)');

  CWidget.prototype.upAll = dir.inline('upAll', 'e.parentNode');

  CWidget.prototype.nextnodeAll = dir.inline('nextnodeAll', 'e.nextSibling');

  CWidget.prototype.prevnodeAll = dirprev.inline('prevnodeAll', 'x.push(e)');

  CWidget.prototype.child = nes$ ? function(i) {
    if (arguments.length) {
      return this.wrap(this.element.children[i < 0 ? this.element.children.length + i : i]);
    } else {
      return new CWidgets(this.element.children);
    }
  } : function(i) {
    var e, k, p, r;
    if (arguments.length) {
      e = this.element;
      e = i < 0 ? (i = -i, k = 1, p = 'previousSibling', e.lastChild) : (k = 0, p = 'nextSibling', e.firstChild);
      while (e) {
        if (e.nodeType === 1 && k++ === i) {
          return this.wrap(e);
        } else {
          e = e[p];
        }
      }
      return null;
    } else {
      e = this.element.firstChild;
      return new CWidgets([
        (function() {
          var _results;
          _results = [];
          while (r = e) {
            if (!(r.nodeType === 1)) {
              continue;
            }
            e = e.nextSibling;
            _results.push(r);
          }
          return _results;
        })()
      ]);
    }
  };

  CWidget.prototype.down = function(i) {
    if (arguments.length) {
      return this.wrap(this.element.childNodes[i < 0 ? this.element.childNodes.length + i : i]);
    } else {
      return new CWidgets(this.element.childNodes);
    }
  };

  CWidget.prototype.remove = function() {
    var e;
    this.send('onDestroy', 'remove');
    e = this.element;
    this.unwrap();
    e.parentNode.removeChild(e);
    return new CWidgets([]);
  };

  CWidget.prototype.free = function(timeout, listen) {
    var _ref;
    if (timeout != null) {
      this.hide(timeout, (function(listen) {
        return function() {
          this.free();
          return this.send(listen);
        };
      })(listen));
    } else {
      if ((_ref = this.element.parentNode) != null) {
        _ref.removeChild(this.element);
      }
    }
    return this;
  };

  CWidget.prototype.focus = function() {
    this.element.focus();
    return this;
  };

  CWidget.prototype.hasFocus = function() {
    return this.document().activeElement === this.element;
  };

  CWidget.prototype.contains = function(w) {
    var a, e, _i, _len;
    a = w.all();
    if (!a.length) {
      return false;
    }
    for (_i = 0, _len = a.length; _i < _len; _i++) {
      e = a[_i];
      if (!this.element.contains(e)) {
        return false;
      }
    }
    return true;
  };

  type$.range('floor upper prev next up prevnode nextnode child down wrapIn');

  type$.rangeAll('floorAll upperAll nextAll prevAll upAll nextnodeAll prevnodeAll');

  type$.all('inc dec content update insertAfter insertBefore appendTo prependTo swap remove free');

  type$.attr('tag number val');

  type$.join('outer html text');

  type$.nothing('wrapInAll');

  CWidget.prototype.tab = function(i, j, html) {
    var cell, cells, col, f, isTab, k, len, max, n, o, row, rows, set, tbody, td, td_wrap, tds, to_i, to_j, tr, tr_wrap, trs, x, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _n, _ref, _ref1, _ref2, _ref3;
    if (this.tag() === "TABLE") {
      tbody = this.byTag("tbody") || this.wrap("<tbody></tbody>").appendTo(this);
      return tbody.tab.apply(tbody, arguments);
    }
    if (0 === (len = arguments.length)) {
      max = 0;
      _ref = (rows = this.child()).items();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tr = _ref[_i];
        if (max < (len = tr.child().length)) {
          max = len;
        }
      }
      return [rows.length, max];
    }
    o = {
      i: 0,
      j: 0,
      set: null
    };
    if (len === 1) {
      if ('number' === typeof i) {
        o.i = i;
        o.row = 0;
      } else if (i instanceof Array) {
        o.set = i;
      } else {
        o = i;
      }
    } else if (len === 2) {
      o.i = i;
      if ('number' === typeof j) {
        o.j = j;
        o.col = o.row = 0;
      } else if (j instanceof Array) {
        o.col = 0;
        o.set = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = j.length; _j < _len1; _j++) {
            k = j[_j];
            _results.push([k]);
          }
          return _results;
        })();
      } else {
        extend(o, j);
      }
    } else {
      o.i = i;
      o.j = j;
      if (i == null) {
        o.i = 0;
        this.child().child(j).content("");
        o.set = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = html.length; _j < _len1; _j++) {
            k = html[_j];
            _results.push([k]);
          }
          return _results;
        })();
      } else if (html instanceof Array) {
        o.set = html;
      } else if (html instanceof Object) {
        extend(o, html);
      } else {
        o.set = [[html]];
      }
    }
    if (o.cells) {
      o.set = o.cells;
      cells = 1;
    }
    row = o.row;
    col = o.col;
    if (len === 1 && row > 0 && col > 0 && (o.set == null)) {
      cell = o.cell || "";
      extend(o, {
        ret: 1,
        i: 0,
        j: 0,
        set: (function() {
          var _j, _results;
          _results = [];
          for (i = _j = 0; 0 <= row ? _j < row : _j > row; i = 0 <= row ? ++_j : --_j) {
            _results.push((function() {
              var _k, _results1;
              _results1 = [];
              for (j = _k = 0; 0 <= col ? _k < col : _k > col; j = 0 <= col ? ++_k : --_k) {
                _results1.push(cell);
              }
              return _results1;
            })());
          }
          return _results;
        })()
      });
    }
    if (o.set != null) {
      if (len === 1) {
        this.content("");
      } else if (len === 2) {
        this.child(i).child().content("");
      }
      i = o.i || 0;
      j = o.j || 0;
      set = o.set;
      to_i = i + set.length;
      trs = this.child();
      isTab = /^(TBODY|THEAD|TFOOT)$/.test(this.tag());
      tr_wrap = this._TR_wrap || (isTab ? '<tr></tr>' : '<div></div>');
      td_wrap = this._TD_wrap || (isTab ? '<td></td>' : '<span></span>');
      if ((len = trs.length) < to_i) {
        for (f = _j = len; len <= to_i ? _j < to_i : _j > to_i; f = len <= to_i ? ++_j : --_j) {
          this.append(tr_wrap);
        }
        trs = this.child();
      }
      _ref1 = trs.slice(i, to_i).items();
      for (k = _k = 0, _len1 = _ref1.length; _k < _len1; k = ++_k) {
        tr = _ref1[k];
        tds = tr.child();
        to_j = j + set[k].length;
        if ((len = tds.length) < to_j) {
          for (f = _l = len; len <= to_j ? _l < to_j : _l > to_j; f = len <= to_j ? ++_l : --_l) {
            tr.append(td_wrap);
          }
          tds = tr.child();
        }
        _ref2 = tds.slice(j, to_j).items();
        for (n = _m = 0, _len2 = _ref2.length; _m < _len2; n = ++_m) {
          td = _ref2[n];
          if (cells) {
            td.before(set[k][n]).free();
          } else {
            td.content(set[k][n]);
          }
        }
      }
      if (!o.ret) {
        return this;
      }
    }
    if (row === 0 && col === 0) {
      return (_ref3 = this.child(i)) != null ? _ref3.child(j) : void 0;
    } else if (row === 0) {
      row = this.child().items();
      return new CWidgets((function() {
        var _len3, _n, _results;
        _results = [];
        for (k = _n = 0, _len3 = row.length; _n < _len3; k = ++_n) {
          x = row[k];
          if (x = x.child(j)) {
            _results.push(x.element);
          }
        }
        return _results;
      })());
    } else if (col === 0) {
      return this.child(i).child();
    } else {
      rows = this.child().slice(i, row).items();
      for (k = _n = 0, _len3 = rows.length; _n < _len3; k = ++_n) {
        x = rows[k];
        rows[k] = x.child().slice(j, col).items();
      }
      return rows;
    }
  };

  tab = function() {
    var i, j, k, n, x, _i, _j, _len, _len1, _results;
    if ((x = this.tab.apply(this, arguments)) instanceof Array) {
      if (x[0] instanceof Array) {
        _results = [];
        for (_i = 0, _len = x.length; _i < _len; _i++) {
          i = x[_i];
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (n = _j = 0, _len1 = i.length; _j < _len1; n = ++_j) {
              j = i[n];
              _results1.push(i[n] = (j ? j.$0$() : $1$));
            }
            return _results1;
          })());
        }
        return _results;
      } else {
        for (k = _j = 0, _len1 = x.length; _j < _len1; k = ++_j) {
          i = x[k];
          x[k] = i ? i.$0$() : $1$;
        }
        return x;
      }
    } else {
      if (x) {
        return x.$0$();
      } else {
        return $1$;
      }
    }
  };

  CWidget.prototype.tab$ = tab.inline('tab$', 'html', '""');

  CWidget.prototype.tab$i = tab.inline('tab$i', 'val$i', '0');

  CWidget.prototype.tab$f = tab.inline('tab$f', 'val$f', '0');

  styles$ = false;

  style$ = null;

  stylesheets$ = 0;

  stylesheet$ = null;

  set_styles$ = function() {
    var i, j, r, rule, s, sheet, stylesheets, t, _i, _len, _ref;
    stylesheets$ = 0;
    styles$ = [];
    style$ = {};
    j = 0;
    stylesheets = Array.prototype.slice.call(this.document().styleSheets);
    stylesheets$ = stylesheets.length;
    while (stylesheets.length) {
      sheet = stylesheets.pop();
      _ref = sheet.cssRules;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        rule = _ref[i];
        if (s = rule.styleSheet) {
          stylesheets.push(s);
        } else {
          rule.idx$ = j++;
          rule.indexInSheet$ = i;
          styles$.push(rule);
          if (r = style$[t = rule.selectorText]) {
            r.push(rule);
          } else {
            style$[t.toLowerCase()] = [rule];
          }
        }
      }
    }
    return this;
  };

  rawstyle = function() {
    var rule, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = styles$.length; _i < _len; _i++) {
      rule = styles$[_i];
      if (this.match(rule.selectorText)) {
        _results.push(rule);
      }
    }
    return _results;
  };

  rawstyle_mask_re = function(mask) {
    var rule, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = styles$.length; _i < _len; _i++) {
      rule = styles$[_i];
      if (rule.selectorText.search(mask) !== -1) {
        _results.push(rule);
      }
    }
    return _results;
  };

  CWidget.prototype.rawstyle = function(selector, val, before) {
    var idx, k, len, s, sheet, v;
    if (!(styles$ && stylesheets$ === this.document().styleSheets.length)) {
      set_styles$.call(this);
    }
    if ((len = arguments.length) === 0) {
      return rawstyle.call(this);
    } else if (len > 1) {
      if (typeof val === 'object') {
        val = ((function() {
          var _results;
          _results = [];
          for (k in val) {
            v = val[k];
            _results.push(k + ": " + v);
          }
          return _results;
        })()).join(";");
      }
      val = selector + " {" + val + "}";
      idx = null;
      sheet = before ? (before.cssRules ? before : (idx = before.indexInSheet$, before.parentStyleSheet)) : !stylesheet$ ? (this.wrap("<style></style>").appendTo(this.head()), stylesheets$++, stylesheet$ = (s = this.document().styleSheets)[s.length - 1]) : stylesheet$;
      sheet.insertRule(val, idx != null ? idx : (len = sheet.cssRules.length) ? len - 1 : 0);
      return set_styles$.call(this);
    } else {
      if (selector === 0) {
        return set_styles$.call(this);
      } else if (typeof selector === 'string') {
        return style$[selector.toLowerCase()] || [];
      } else if (selector instanceof RegExp) {
        return rawstyle_mask_re.call(this, selector);
      } else {
        selector.parentStyleSheet.deleteRule(selector.indexInSheet$);
        return set_styles$.call(this);
      }
    }
  };

  new_pseudo_element$ = function(w, pseudoElement) {
    var fn, o;
    fn = function() {};
    fn.prototype = w.constructor.prototype;
    o = new fn;
    extend(o, w);
    o._pseudoElement = pseudoElement;
    return o;
  };

  ex_uniq$ = function(a) {
    var i, k, r, t, x, z, _i, _len;
    x = {};
    z = 0;
    for (_i = 0, _len = a.length; _i < _len; _i++) {
      i = a[_i];
      if (!((t = i.selectorText) in x)) {
        x[t] = z++;
      }
    }
    r = [];
    for (k in x) {
      r[x[k]] = k;
    }
    return r;
  };

  goal_selector$ = function() {
    var id;
    if (!(id = this.id())) {
      this.id(id = CMath.uniqid());
    }
    return "#" + id;
  };

  goal_rule$ = function(pseudoElement) {
    var rules, selector;
    rules = this.rawstyle(selector = goal_selector$.call(this) + (pseudoElement || ''));
    if (!rules.length) {
      this.rawstyle(selector, {});
      rules = this.rawstyle(selector);
    }
    return rules;
  };

  CWidget.prototype.pseudo = function(pseudoElement) {
    var rules;
    rules = goal_rule$.call(this, pseudoElement);
    return new_pseudo_element$(this, rules[0]);
  };

  CWidget.prototype.style = function(selector, name, val, important) {
    var ex_style$, len, rule, rules, _i, _len;
    if (0 === (len = arguments.length)) {
      return ex_uniq$(this.rawstyle());
    }
    if (len === 1) {
      name = selector;
      selector = goal_selector$.call(this);
    }
    rules = this.rawstyle(selector);
    if (!rules.length) {
      if (len === 2 && !(typeof name === 'object') || name instanceof Array) {
        return null;
      }
      if (name === null) {
        return this;
      }
      this.rawstyle(selector, {});
      rules = this.rawstyle(selector);
    }
    ex_style$ = new_pseudo_element$(this, rules[0]);
    if (name === null) {
      for (_i = 0, _len = rules.length; _i < _len; _i++) {
        rule = rules[_i];
        this.rawstyle(rule);
      }
    } else if (name instanceof Array) {
      return ex_style$.css(name);
    } else if (name instanceof Object) {
      ex_style$.css(name, val);
    } else if (len === 2) {
      return ex_style$.getCss(name);
    } else {
      ex_style$.setCss(name, val, important);
    }
    return this;
  };

  CWidget.prototype.rule = function(selector, styles) {
    var ex_style$, i, m, name, r, res, s, _i, _j, _k, _len, _len1, _len2, _ref;
    s = this.rawstyle(selector);
    if (arguments.length === 2) {
      this.rawstyle(selector, styles, s[0]);
      for (_i = 0, _len = s.length; _i < _len; _i++) {
        r = s[_i];
        this.rawstyle(r);
      }
      return this;
    } else {
      res = {};
      for (_j = 0, _len1 = s.length; _j < _len1; _j++) {
        r = s[_j];
        ex_style$ = new_pseudo_element$(this, r);
        r = r.cssText.replace(/\/\*.*?\*\//g, ' ').replace(/^[^\{\}]+\{(.*)\}$/, "$1");
        _ref = r.split(/;/);
        for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
          i = _ref[_k];
          if (!(m = i.match(/^\s*([^:]+?)\s*:/))) {
            continue;
          }
          name = m[1].replace(/^(?:webkit|moz|khtml|ms|O|Apple|icab|epub|wap|Xv|Prince|ro)-/i, '');
          res[name] = ex_style$.getCss(name);
        }
      }
      return res;
    }
  };

  isCase$ = typeof div$.style['background-color'] === 'string';

  with_css_prefix = {
    float: "cssFloat"
  };

  css_px = {};

  css_color = {};

  css_not_px = {};

  css_set_fn = {
    vscroll: function(key, val) {
      return this.vscroll(val);
    },
    hscroll: function(key, val) {
      return this.hscroll(val);
    }
  };

  css_get_fn = {
    vscroll: function() {
      return this.vscroll() + "px";
    },
    hscroll: function() {
      return this.hscroll() + "px";
    }
  };

  css_has_fn = {};

  div$.style.color = 'rgba(1,1,1,.5)';

  is_rgba$ = !!div$.style.color;

  for (style$ in div$.style) {
    to_style$ = isCase$ ? style$.lc() : style$;
    div$.style[style$] = '1px';
    if (div$.style[style$] === '1px') {
      css_px[to_style$] = 1;
    } else {
      div$.style[style$] = '#AAAAAA';
      if (div$.style[style$]) {
        css_color[to_style$] = 1;
      } else {
        css_not_px[to_style$] = 1;
      }
    }
    if ((match = style$.match(/^([wW]ebkit|Moz|Khtml|ms|O|Apple|[iI]cab|[Ee]pub|Wap|Xv|Prince|[Rr]o)([A-Z].*)/)) && typeof div$.style[(s = match[2]).lcFirst()] !== 'string') {
      with_css_prefix[s.lc()] = style$;
    }
  }

  toCssCase = isCase$ ? function(s) {
    return with_css_prefix[s] || s;
  } : function(s) {
    return with_css_prefix[s] || s.toCamelCase();
  };

  CWidget.prototype.hasCss = function(key, val) {
    var fn;
    if (fn = css_has_fn[key]) {
      return fn.call(this, key, val);
    } else if (arguments.length === 1) {
      return 'string' === typeof this.getCss(key);
    } else {
      div$.style[key = toCssCase(key)] = '';
      div$.style[key] = val;
      return !!div$.style[key];
    }
  };

  CWidget.prototype.setCss = function(key, val, important) {
    var fn, old, style;
    if ((fn = css_set_fn[key]) && false !== fn.call(this, key, val, important)) {
      return this;
    }
    key = toCssCase(old = key);
    if (typeof val === 'number') {
      if (key in css_px) {
        val += 'px';
      } else if (key in css_color) {
        val = CColor.fromNumber(val);
      } else if (key in css_not_px) {
        val;
      } else if (wdiv$.hasCss(old, '1px')) {
        val += 'px';
        css_px[key] = 1;
      } else if (wdiv$.hasCss(old, '#AAAAAA')) {
        val = CColor.fromNumber(val);
        css_color[key] = 1;
      } else {
        css_not_px[key] = 1;
      }
    }
    style = (this._pseudoElement || this.element).style;
    if (important) {
      style.setProperty(key.lc(), val, "!important");
    } else {
      style[key] = val;
    }
    return this;
  };

  CWidget.prototype.getCssStyle = function(key, pseudoClass) {
    var p;
    if (p = this._pseudoElement) {
      return p.style;
    } else if (this.document().contains(this)) {
      return getComputedStyle(this.element, pseudoClass);
    } else {
      return this.element.style;
    }
  };

  CWidget.prototype.getCssValue = function(key, pseudoClass) {
    return this.getCssStyle(key, pseudoClass).getPropertyCSSValue(toCssCase(key));
  };

  CWidget.prototype.getCss = function(key, pseudoClass) {
    var fn, ret;
    if ((fn = css_get_fn[key]) && false !== (ret = fn.call(this, key, pseudoClass))) {
      return ret;
    }
    return this.getCssStyle(key, pseudoClass)[toCssCase(key)];
  };

  CWidget.prototype.saveCss = function() {
    var ret;
    if (this._pseudoElement != null) {
      return this.css.apply(this, arguments);
    } else {
      this._pseudoElement = this.element;
      ret = this.css.apply(this, arguments);
      delete this._pseudoElement;
      return ret;
    }
  };

  CWidget.prototype.css = function(name, val, important) {
    var k, r, _i, _j, _len, _len1, _ref;
    if (arguments.length === 0) {
      r = {};
      _ref = this.element.style;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        r[k = toCssCase(k)] = this.getCss(k);
      }
      return r;
    } else if (name instanceof Array) {
      r = {};
      for (_j = 0, _len1 = name.length; _j < _len1; _j++) {
        k = name[_j];
        r[k] = this.getCss(k);
      }
      return r;
    } else if (name instanceof Object) {
      for (k in name) {
        this.setCss(k, name[k], val);
      }
      return this;
    } else if (arguments.length >= 2 && val !== null) {
      this.setCss(name, val, important);
      return this;
    } else {
      return this.getCss(name);
    }
  };

  extend(CWidget.prototype.css, {
    with_css_prefix: with_css_prefix,
    toCssCase: toCssCase,
    css_not_px: css_not_px,
    css_px: css_px,
    css_color: css_color,
    css_set_fn: css_set_fn,
    css_get_fn: css_get_fn,
    css_has_fn: css_has_fn
  });

  rgba$ = function(color) {
    var a, c, m, r;
    if (color === '' || color === 'transparent') {
      return [0, 0, 0, 0];
    } else if ((c = CColor.colors[color.toLowerCase()]) || /^#[\dA-F]+$/i.test(c = color)) {
      return [parseInt(c.slice(1, 3), 16), parseInt(c.slice(3, 5), 16), parseInt(c.slice(5), 16), 1];
    } else if (m = color.match(/rgba?\(([^\)]+)\)/)) {
      r = m[1].split(/,\s+/);
      return [parseInt(r[0]), parseInt(r[1]), parseInt(r[2]), r[3] != null ? -(-r[3]) : 1];
    } else if (m = color.match(/hsla?\(([^\)]+)\)/)) {
      r = m[1].split(/%?,\s+/);
      a = (r[3] != null ? -(-r[3]) : 1);
      r = CColor.hslToRgb(parseInt(r[0]), parseInt(r[1]), parseInt(r[2]));
      r[3] = a;
      return r;
    }
  };

  CWidget.prototype.rgba = function(color) {
    var _ref;
    if (typeof color === 'number') {
      return CColor.fromNumber(color);
    }
    if (/^[\w-]+$/.test(color)) {
      color = this.getCss(color);
    }
    return (function() {
      if ((_ref = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(CColor, rgba$(color), function(){})) != null) {
        return _ref;
      } else {
        throw this.raise("Неизвестный науке цвет: " + color);
      }
    }).call(this);
  };

  testpx$ = CRoot.append("<div>&nbsp;</div>").last().css({
    position: 'absolute',
    top: -10000,
    width: '10000pt',
    height: '10px'
  });

  pt$ = testpx$.element.clientWidth / 10000;

  testpx$.css('width', '10000ex');

  ex$ = testpx$.element.clientWidth / 10000 / parseFloat(testpx$.css('font-size'));

  testpx$.free();

  mm$ = 72 * 2.54 / 100 * pt$;

  cm$ = 72 * 2.54 * pt$;

  pc$ = 12 * pt$;

  in$ = 72 * pt$;

  Number$ = /^(-?(?:\d+|\d*\.\d+)(?:[Ee][+-]?\d+)?)([a-z%]*)$/;

  CWidget.prototype.px = function(val, percent_val) {
    var color, from, i, key, _i, _len, _ref;
    if (typeof val === 'number') {
      return val;
    }
    if (val === "") {
      return 0;
    }
    if (from = val.match(Number$)) {
      val = parseFloat(from[1]);
      if (!(from = from[2])) {
        return val;
      }
    } else {
      val = this.getCss(key = val);
      if (val === '') {
        return 0;
      }
      if (val === 'auto' && key in {
        left: 1,
        top: 1,
        width: 1,
        height: 1
      }) {
        return this[key]();
      }
      if (val === 'inherit') {
        _ref = this.upperAll().union(this.wrap(this.window()));
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if ('inherit' !== (val = i.getCss(key))) {
            break;
          }
        }
      }
      if (Number$.test(val)) {
        return (/%$/.test(val) ? this.getCssValue(key).getFloatValue('px') : this.px(val));
      }
      if ((color = rgba$(val)) != null) {
        return ((function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(CColor, color, function(){})).toNumber();
      }
      throw this.raise("Неизвестная единица `" + val + "` для @px " + key);
    }
    switch (from) {
      case 'px':
        return val;
      case 'vw':
        return val * this.viewWidth() / 100;
      case 'vh':
        return val * this.viewHeight() / 100;
      case 'vmin':
        return Math.max(val * this.viewHeight(), val * this.viewWidth()) / 100;
      case 'pw':
        return val * this.width() / 100;
      case 'ph':
        return val * this.height() / 100;
      case 'em':
        return val * this.px('font-size');
      case 'rem':
        return val * this.htm().px('font-size');
      case 'ex':
        return val * ex$ * this.px('font-size');
      case 'pt':
        return val * pt$;
      case 'mm':
        return val * mm$;
      case 'cm':
        return val * cm$;
      case 'pc':
        return val * pc$;
      case 'in':
        return val * in$;
      case '%':
        return val * percent_val / 100;
      default:
        throw this.raise("Неизвестная единица измерения `" + from + "`");
    }
  };

  CWidget.prototype.vw = function(key) {
    return this.px(key) / this.viewWidth() * 100;
  };

  CWidget.prototype.vh = function(key) {
    return this.px(key) / this.viewHeight() * 100;
  };

  CWidget.prototype.vmin = function(key) {
    var px;
    return Math.min((px = this.px(key)) / this.viewHeight(), px / this.viewWidth()) * 100;
  };

  CWidget.prototype.pw = function(key) {
    return this.px(key) / this.width() * 100;
  };

  CWidget.prototype.ph = function(key) {
    return this.px(key) / this.height() * 100;
  };

  CWidget.prototype.em = function(key) {
    return this.px(key) / this.px('font-size');
  };

  CWidget.prototype.rem = function(key) {
    return this.px(key) / this.htm().px('font-size');
  };

  CWidget.prototype.ex = function(key) {
    return this.px(key) / ex$ / this.px('font-size');
  };

  CWidget.prototype.pt = function(key) {
    return this.px(key) / pt$;
  };

  CWidget.prototype.mm = function(key) {
    return this.px(key) / mm$;
  };

  CWidget.prototype.cm = function(key) {
    return this.px(key) / cm$;
  };

  CWidget.prototype.pc = function(key) {
    return this.px(key) / pc$;
  };

  CWidget.prototype["in"] = function(key) {
    return this.px(key) / in$;
  };

  CWidget.prototype.pxvector = function(val, percent_val, ci) {
    var v, _i, _len, _ref, _results;
    if (ci == null) {
      ci = 'px';
    }
    if (/^[a-z]/i.test(val)) {
      val = this.getCss(val);
    }
    _ref = val.split(/\s+/);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      _results.push(this[ci](v, percent_val));
    }
    return _results;
  };

  CWidget.prototype.fly = function(flag) {
    var from;
    if (flag) {
      from = this["new"]("div").css({
        width: 'auto',
        height: 'auto',
        margin: 0,
        padding: 0
      });
    }
    return this.on('scroll', flag === 1 ? (function(from) {
      return function() {};
    })(from) : void 0);
  };

  toggle$ = function(args, s) {
    var i;
    return args[(i = args.indexOf(s)) !== -1 ? (i + 1) % args.length : 0];
  };

  CWidget.prototype.toggle = function(name, args) {
    args = $A(args);
    if (!arguments.length) {
      name = 'display';
      args = ['none', ''];
    } else if (args.length === 1) {
      args.push('');
    }
    return this.setCss(name, toggle$(args, this.getCss(name)));
  };

  type$.all('setCss');

  CWidget.prototype.attr = function(name, val) {
    var a, e, i, k, _i, _len;
    e = this.element;
    if (arguments.length === 2) {
      if (val != null) {
        e.setAttribute(name, val);
      } else {
        e.removeAttribute(name);
      }
      return this;
    } else if (name instanceof Array) {
      a = {};
      for (_i = 0, _len = name.length; _i < _len; _i++) {
        i = name[_i];
        a[i] = e.getAttribute(i);
      }
      return a;
    } else if (name instanceof Object) {
      for (k in name) {
        this.attr(k, name[k]);
      }
      return this;
    } else {
      return e.getAttribute(name);
    }
  };

  CWidget.prototype.prop = function(name, val) {
    var a, e, i, k, _i, _len;
    e = this.element;
    if (arguments.length === 2) {
      e[name] = val;
      return this;
    } else if (name instanceof Array) {
      a = {};
      for (_i = 0, _len = name.length; _i < _len; _i++) {
        i = name[_i];
        a[i] = e[i];
      }
      return a;
    } else if (name instanceof Object) {
      for (k in name) {
        e[k] = name[k];
      }
      return this;
    } else {
      return e[name];
    }
  };

  CWidget.prototype.toggleAttr = function() {
    var args, name;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (!arguments.length) {
      name = 'disabled';
      args = [null, 'disabled'];
    } else if (args.length === 1) {
      args.push(null);
    }
    return this.attr(name, toggle$(args, this.attr(name)));
  };

  CWidget.prototype.toggleProp = function() {
    var args, name;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (!arguments.length) {
      name = 'checked';
      args = [true, false];
    } else if (args.length === 1) {
      args.push(null);
    }
    return this.prop(name, toggle$(args, this.prop(name)));
  };

  get_rules_by_class$ = function(names) {
    var to, _i, _len, _ref;
    to = {};
    _ref = this.style();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      if (new RegExp('(?:^|[\\s\\.#,])(?:' + names.join("|") + ')(?:[\\s:\\.#,]|$)').test(s)) {
        extend(to, this.rule(s));
      }
    }
    return to;
  };

  CWidget.prototype.hasClass = function(name) {
    return new RegExp('(^|\\s)' + name + '(\\s|$)').test(this.element.className);
  };

  CWidget.prototype.addClass = function(names, timeout, listen) {
    var name, to, _i, _len;
    names = $A(names);
    if (timeout != null) {
      this.addClass(names = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = names.length; _i < _len; _i++) {
          name = names[_i];
          if (!this.hasClass(name)) {
            _results.push(name);
          }
        }
        return _results;
      }).call(this));
      to = get_rules_by_class$.call(this, names);
      this.removeClass(names);
      this.morph({
        save: 1,
        to: to,
        end1: listen,
        timeout: timeout,
        end: (function(names) {
          return function() {
            return this.addClass(names);
          };
        })(names)
      });
    } else {
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        this.element.className += (this.element.className === '' ? name : !new RegExp('(^|\\s)' + name + '(\\s|$)').test(this.element.className) ? ' ' + name : '');
      }
    }
    return this;
  };

  CWidget.prototype.removeClass = function(names, timeout, listen) {
    var cls, from, name, _i, _len;
    names = $A(names);
    if (timeout != null) {
      from = get_rules_by_class$.call(this, names);
      this.removeClass(names);
      this.morph({
        save: 1,
        from: from,
        timeout: timeout,
        end: listen
      });
    } else {
      cls = this.element.className;
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        cls = cls.replace(new RegExp('(^|\\s+)' + name + '(\\s+|$)'), function(a, b, c) {
          if (b && c) {
            return ' ';
          } else {
            return '';
          }
        });
      }
      if (cls) {
        this.element.className = cls;
      } else {
        this.attr("class", null);
      }
    }
    return this;
  };

  CWidget.prototype.toggleClass = function(names, timeout, listen) {
    var from, i, idx, name, new_name, to, _i, _len;
    names = $A(names);
    if (names.length === 1) {
      names.push(null);
    }
    idx = 1;
    for (i = _i = 0, _len = names.length; _i < _len; i = ++_i) {
      name = names[i];
      if (!(this.hasClass(name))) {
        continue;
      }
      idx = i;
      break;
    }
    name = names[idx];
    new_name = toggle$(names, name);
    if (timeout != null) {
      if (name) {
        from = get_rules_by_class$.call(this, [name]);
        this.removeClass(name);
      } else {
        from = {};
      }
      if (new_name) {
        this.addClass(new_name);
        to = get_rules_by_class$.call(this, [new_name]);
        this.removeClass(new_name);
      } else {
        to = {};
      }
      this.morph({
        save: 1,
        from: from,
        to: to,
        timeout: timeout,
        end1: listen,
        end: (new_name ? (function(new_name) {
          return function() {
            return this.addClass(new_name);
          };
        })(new_name) : void 0)
      });
    } else {
      if (name) {
        this.removeClass(name);
      }
      if (new_name) {
        this.addClass(new_name);
      }
    }
    return this;
  };

  CWidget.prototype.show = function(timeout, listen) {
    if (timeout != null) {
      this.morph({
        effect: 'show',
        timeout: timeout,
        end: listen
      });
    } else {
      this.element.style.display = '';
    }
    return this;
  };

  CWidget.prototype.hide = function(timeout, listen) {
    if (timeout != null) {
      this.morph({
        effect: 'hide',
        timeout: timeout,
        end: listen
      });
    } else {
      this.element.style.display = 'none';
    }
    return this;
  };

  CWidget.prototype.vid = function(timeout, listen) {
    if (timeout != null) {
      this.morph({
        save: 1,
        from: {
          opacity: 0
        },
        begincss: {
          visibility: ''
        },
        timeout: timeout,
        end: listen
      });
    } else {
      this.element.style.visibility = '';
    }
    return this;
  };

  CWidget.prototype.novid = function(timeout, listen) {
    if (timeout != null) {
      this.morph({
        save: 1,
        to: {
          opacity: 0
        },
        endcss: {
          visibility: 'hidden'
        },
        timeout: timeout,
        end: listen
      });
    } else {
      this.element.style.visibility = 'hidden';
    }
    return this;
  };

  CWidget.prototype.toggleVid = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (this.element.style.visibility === 'hidden') {
      return this.vid.apply(this, args);
    } else {
      return this.novid.apply(this, args);
    }
  };

  CWidget.prototype.visible = function() {
    return !!this.element.offsetWidth;
  };

  CWidget.prototype.setAbsolute = function() {
    this.saveAbsoluteCss = s = this.css(['position', 'display', 'visibility']);
    if (s.display === 'none') {
      this.css({
        position: 'absolute',
        visibility: 'hidden',
        display: 'block'
      });
    }
    return this;
  };

  CWidget.prototype.unsetAbsolute = function() {
    this.css(this.saveAbsoluteCss);
    delete this.saveAbsoluteCss;
    return this;
  };

  CWidget.prototype.absolute = function() {
    var i, it, k, r, x, _i, _len;
    x = [];
    it = (function() {
      var _i, _len, _ref, _results;
      _ref = this.upperAll().union(this).items();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (!(!i.visible())) {
          continue;
        }
        x.push(i.css('display'));
        _results.push(i.css('display', ''));
      }
      return _results;
    }).call(this);
    r = this.pos();
    for (k = _i = 0, _len = it.length; _i < _len; k = ++_i) {
      i = it[k];
      i.css('display', x[k]);
    }
    return r;

    /*
    		if (pos=@pos()).width then return pos
    		if @up().visible() then @setAbsolute(); r=@pos(); @unsetAbsolute(); return r
    		@addClass cls='c-actual-absolute-size'
    		clone = @body().clone().css(position: 'absolute', visibility: 'hidden', left: 0, top: 0).appendTo @root()
    		clone.upperAll().show()
    		r=clone.first("."+cls).pos()
    		clone.free()
    		@removeClass cls
    		r
     */
  };

  type$.all('toggle toggleAttr toggleProp removeClass addClass hide show vid novid toggleVid');

  CWidget.prototype.vscroll = function(v) {
    if (arguments.length === 0) {
      return this.element.scrollLeft;
    } else {
      switch (v) {
        case 'bar':
          return this.element.offsetWidth - this.element.clientWidth - this.px('border-left-width') - this.px('border-right-width');
        case 'size':
          return this.element.scrollWidth;
        case 'inner':
          return this.element.scrollWidth - this.px('padding-left') - this.px('padding-right');
        case 'end':
          return this.element.scrollWidth - this.element.scrollLeft === this.width();
        case 'begin':
          return this.element.scrollLeft === 0;
        default:
          this.element.scrollLeft = this.px(v, this.element.scrollWidth);
          return this;
      }
    }
  };

  CWidget.prototype.hscroll = function(v) {
    if (arguments.length === 0) {
      return this.element.scrollTop;
    } else {
      switch (v) {
        case 'bar':
          return this.element.offsetHeight - this.element.clientHeight - this.px('border-top-width') - this.px('border-bottom-width');
        case 'size':
          return this.element.scrollHeight;
        case 'inner':
          return this.element.scrollHeight - this.px('padding-top') - this.px('padding-bottom');
        case 'end':
          return this.element.scrollHeight - this.element.scrollTop === this.height();
        case 'begin':
          return this.element.scrollTop === 0;
        default:
          this.element.scrollTop = this.px(v, this.element.scrollHeight);
          return this;
      }
    }
  };

  if (!div$.getBoundingClientRect) {
    CInit.require('old');
  }

  CWidget.prototype.viewPos = function() {
    return this.element.getBoundingClientRect();
  };

  CWidget.prototype.pos = function() {
    var r, win, x, y;
    win = this.window();
    r = this.element.getBoundingClientRect();
    return {
      left: r.left + (x = win.pageXOffset),
      right: r.right + x,
      top: r.top + (y = win.pageYOffset),
      bottom: r.bottom + y,
      width: r.width,
      height: r.height
    };
  };

  CWidget.prototype.left = function(left) {
    if (arguments.length) {
      return this.css("left", left);
    } else {
      return this.pos().left;
    }
  };

  CWidget.prototype.top = function(top) {
    if (arguments.length) {
      return this.css("top", top);
    } else {
      return this.pos().top;
    }
  };

  CWidget.prototype.bottom = function(bottom, usePos) {
    if (arguments.length) {
      if (usePos) {
        return this.css("top", bottom - this.offsetHeight());
      } else {
        return this.offsetHeight(bottom - this.top());
      }
    } else {
      return this.pos().bottom;
    }
  };

  CWidget.prototype.right = function(right, usePos) {
    if (arguments.length) {
      if (usePos) {
        return this.css("left", right - this.offsetWidth());
      } else {
        return this.offsetWidth(right - this.left());
      }
    } else {
      return this.pos().right;
    }
  };

  CWidget.prototype.clientWidth = function(width) {
    if (arguments.length) {
      return this.css("width", width - this.vscroll('bar'));
    } else {
      return this.element.clientWidth;
    }
  };

  CWidget.prototype.clientHeight = function(height) {
    if (arguments.length) {
      return this.css("height", height - this.hscroll('bar'));
    } else {
      return this.element.clientHeight;
    }
  };

  CWidget.prototype.width = function(width) {
    if (arguments.length) {
      return this.css("width", width);
    } else {
      return this.element.clientWidth + this.vscroll('bar');
    }
  };

  CWidget.prototype.height = function(height) {
    if (arguments.length) {
      return this.css("height", height);
    } else {
      return this.element.clientHeight + this.hscroll('bar');
    }
  };

  CWidget.prototype.offsetLeft = function() {
    return this.element.offsetLeft;
  };

  CWidget.prototype.offsetTop = function() {
    return this.element.offsetTop;
  };

  CWidget.prototype.offsetWidth = function(width) {
    if (arguments.length) {
      return this.css("width", width - this.px('border-left-width') - this.px('border-right-width'));
    } else {
      return this.element.offsetWidth;
    }
  };

  CWidget.prototype.offsetHeight = function(height) {
    if (arguments.length) {
      return this.css("height", height - this.px('border-top-width') - this.px('border-bottom-width'));
    } else {
      return this.element.offsetHeight;
    }
  };

  CWidget.prototype.innerWidth = function(width) {
    if (arguments.length) {
      return this.css("width", width + this.px('padding-right') + this.px('padding-left'));
    } else {
      return this.width() - this.px('padding-right') - this.px('padding-left');
    }
  };

  CWidget.prototype.innerHeight = function(height) {
    if (arguments.length) {
      return this.css("height", height + this.px('padding-top') + this.px('padding-bottom'));
    } else {
      return this.height() - this.px('padding-top') - this.px('padding-bottom');
    }
  };

  CWidget.prototype.outerWidth = function(width) {
    if (arguments.length) {
      return this.css("width", width - this.px('margin-right') - this.px('margin-left') - this.px('border-left-width') - this.px('border-right-width'));
    } else {
      return this.offsetWidth() + this.px('margin-right') + this.px('margin-left');
    }
  };

  CWidget.prototype.outerHeight = function(height) {
    if (arguments.length) {
      return this.css("height", height - this.px('margin-top') - this.px('margin-bottom') - this.px('border-top-width') - this.px('border-bottom-width'));
    } else {
      return this.offsetHeight() + this.px('margin-top') + this.px('margin-bottom');
    }
  };

  CWidget.prototype.viewTop = function() {
    return this.window().pageYOffset;
  };

  CWidget.prototype.viewLeft = function() {
    return this.window().pageXOffset;
  };

  CWidget.prototype.viewRight = function() {
    return this.viewLeft() + this.viewWidth();
  };

  CWidget.prototype.viewBottom = function() {
    return this.viewTop() + this.viewHeight();
  };

  CWidget.prototype.viewWidth = function() {
    return this.window().innerWidth;
  };

  CWidget.prototype.viewHeight = function() {
    return this.window().innerHeight;
  };

  CWidget.prototype.pageWidth = function() {
    var root;
    return Math.max((root = this.root().element).scrollWidth, this.body().element.scrollWidth, root.clientWidth);
  };

  CWidget.prototype.pageHeight = function() {
    var root;
    return Math.max((root = this.root().element).scrollHeight, this.body().element.scrollHeight, root.clientHeight);
  };

  CWidget.prototype.relativing = function(w) {
    var m, r;
    r = this.positioning.apply(this, arguments);
    m = this.absolute();
    return {
      left: r.left - m.left,
      top: r.top - m.top
    };
  };

  CWidget.prototype.relative = function(w) {
    var r;
    if (!w.contains(this)) {
      w.prepend(this);
    }
    this.css({
      position: 'absolute',
      'margin-left': 0,
      'margin-top': 0
    });
    r = this.relativing.apply(this, arguments);
    return this.css({
      'margin-left': r.left,
      'margin-top': r.top
    });
  };

  CWidget.prototype.position = function() {
    this.css('position', 'absolute');
    return this.css(this.positioning.apply(this, arguments));
  };

  extend(CWidget.prototype.position, position$ = {
    invert: {
      top: 'bottom',
      bottom: 'top',
      left: 'right',
      right: 'left'
    },
    rotate: {
      left: 'top',
      top: 'right',
      right: 'bottom',
      bottom: 'left'
    },
    rotate_back: {
      left: 'bottom',
      bottom: 'right',
      right: 'top',
      top: 'left'
    },
    scalex: {
      left: 0,
      right: 1,
      center: 0.5
    },
    scaley: {
      top: 0,
      bottom: 1,
      mid: 0.5
    },
    scalexy: {
      left: 'top',
      right: 'bottom',
      center: 'mid',
      top: 'left',
      bottom: 'right',
      mid: 'center'
    },
    scale: {
      before: 0,
      after: 1,
      center: 0.5,
      mid: 0.5
    },
    normalize: function(pos, scale) {
      var p;
      p = position$;
      if (pos in p.scalex && scale in p.scalex || pos in p.scaley && scale in p.scaley) {
        return p.scalexy[scale];
      } else {
        return scale;
      }
    },
    wh: function(pos, width, height) {
      if (pos === 'top' || pos === 'bottom') {
        return [width, height];
      } else {
        return [height, width];
      }
    }
  });

  CWidget.prototype.positioning = function(widget, scalex, scaley, scalexself, scaleyself, addx, addy) {
    var a, bottom, height, i, left, right, scaleyparam, top, width, x, _i, _len, _ref, _ref1, _ref2;
    if (scalex == null) {
      scalex = 0.5;
    }
    if (scaley == null) {
      scaley = 0.5;
    }
    if (scalexself == null) {
      scalexself = 1;
    }
    if (scaleyself == null) {
      scaleyself = 1;
    }
    if (addx == null) {
      addx = 0;
    }
    if (addy == null) {
      addy = 0;
    }
    scaleyparam = position$.scaley;
    if (typeof scalex === 'string') {
      if (/\s/.test(scalex)) {
        a = scalex.split(/\s+/);
        if (a[0] == null) {
          a[0] = scalex;
        }
        if (a[1] == null) {
          a[1] = scaley;
        }
        if (a[2] == null) {
          a[2] = scalexself;
        }
        if (a[3] == null) {
          a[3] = scaleyself;
        }
        if (a[4] == null) {
          a[4] = addx;
        }
        if (a[5] == null) {
          a[5] = addy;
        }
        for (i = _i = 0, _len = a.length; _i < _len; i = ++_i) {
          x = a[i];
          if (/^[^a-z]/.test(x)) {
            a[i] = parseFloat(x);
          }
        }
        scalex = a[0];
        scaley = a[1];
        scalexself = a[2];
        scaleyself = a[3];
        addx = a[4];
        addy = a[5];
      }
      if (scalex in scaleyparam) {
        _ref = [scaley, scalex, scaleyself, scalexself, addy, addx], scalex = _ref[0], scaley = _ref[1], scalexself = _ref[2], scaleyself = _ref[3], addx = _ref[4], addy = _ref[5];
      }
      if (typeof scalex === 'string') {
        scalex = position$.scalex[scalex];
      }
    }
    if (typeof scaley === 'string') {
      scaley = scaleyparam[scaley];
    }
    if (typeof scalexself === 'string') {
      scalexself = position$.scale[scalexself];
    }
    if (typeof scaleyself === 'string') {
      scaleyself = position$.scale[scaleyself];
    }
    _ref1 = widget.absolute(), left = _ref1.left, right = _ref1.right, top = _ref1.top, bottom = _ref1.bottom;
    _ref2 = this.absolute(), width = _ref2.width, height = _ref2.height;
    scalexself *= scalex * 2 - 1;
    scaleyself *= scaley * 2 - 1;
    return {
      left: left + (right - left) * scalex + width * (scalexself - scalex) + ((0.5 - 1e-10 <= scalex && scalex <= 0.5 + 1e-10) ? 0 : scalex < 0.5 ? -addx : addx),
      top: top + (bottom - top) * scaley + height * (scaleyself - scaley) + ((0.5 - 1e-10 <= scaley && scaley <= 0.5 + 1e-10) ? 0 : scaley < 0.5 ? -addy : addy)
    };
  };

  _timeout = function(set, clear) {
    return (function(set, clear) {
      return function() {
        var args, fn, name, ret, time, _base;
        time = arguments[0], name = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        if (!this._timers) {
          this._timers = {};
        }
        if (typeof (_base = this._timers)[name] === "function") {
          _base[name]();
        }
        fn = (function(_this) {
          return function(name, args) {
            return function() {
              return _this.send.apply(_this, [name].concat(__slice.call(args)));
            };
          };
        })(this)(name, args);
        ret = set(fn, time);
        this._timers[name] = (function(ret, clear) {
          return function() {
            return clear(ret);
          };
        })(ret, clear);
        return this;
      };
    })(set, clear);
  };

  CWidget.prototype.timeout = _timeout(setTimeout, clearTimeout);

  CWidget.prototype.interval = _timeout(setInterval, clearInterval);

  CWidget.prototype.clear = function(name) {
    var i, t, _i, _len;
    t = this._timers || {};
    if (name) {
      if (typeof t[name] === "function") {
        t[name]();
      }
      delete t[name];
    } else {
      for (_i = 0, _len = t.length; _i < _len; _i++) {
        i = t[_i];
        t[i]();
      }
      this._timers = {};
    }
    return this;
  };

  speeds$ = {
    slow: 200,
    fast: 600,
    norm: 400
  };

  animate$ = function() {
    var anim, ci, k, start, _ref;
    anim = this._animqueue[0];
    if (anim.this_param) {
      this._animqueue[0] = anim = anim.call(this);
      next_animate$.call(this);
    }
    if (!anim.start) {
      anim.start = start = {};
      _ref = anim.stubs;
      for (k in _ref) {
        ci = _ref[k];
        start[k] = this[ci](k);
      }
    }
    if (anim.i >= anim.timeout) {
      anim.call(this, anim.start, 1);
      this._animprev = anim;
      this._animqueue.splice(0, 1);
      next_animate$.call(this);
      return this.send(anim.listen);
    } else {
      anim.call(this, anim.start, anim.i / anim.timeout, anim.progress);
      return anim.i += anim.step;
    }
  };

  next_animate$ = function() {
    this.clear(animate$);
    if (this._animqueue.length) {
      this.interval(this._animqueue[0].step || 0, animate$);
    }
    return this;
  };

  anim_css_set$ = function(key, val) {};

  mod$ = {
    "in": 'easeIn',
    out: 'easeOut',
    io: 'easeInOut'
  };

  speeds$ = {
    slow: 200,
    fast: 600,
    norm: 400
  };

  default_timeout$ = 400;

  default_fps$ = 1000 / 13;

  CWidget.prototype.animation = function(param, timeout, fps, listen, progress) {
    var F, Px, To, a, abs, c, ci, code, color, f, fn, formula, i, k, key, m, mod, px, r, step, stubs, t, to, to1, v, v1, x, _i, _j, _len, _len1;
    if (typeof timeout === 'function') {
      listen = timeout;
      progress = fps;
      timeout = fps = null;
    }
    if (typeof fps === 'function') {
      progress = listen;
      listen = fps;
      fps = null;
    }
    timeout = speeds$[timeout] || timeout || default_timeout$;
    if (!fps) {
      fps = default_fps$;
    }
    stubs = {};
    fn = [];
    for (key in param) {
      v = param[key];
      k = escapeString(key);
      if (!(s = String(v).match(/^([+-]=)?\s*(?:(-?(?:\d*\.)?\d+(?:[Ee][+-]\d+)?(?:[a-z%]+)?(?:\s+-?(?:\d*\.)?\d+(?:[Ee][+-]\d+)?(?:[a-z%]+)?){0,3})|([a-zA-Z#]\w*(?:\([^\(\)]+\))?))(?:\s+(?:(in|out|io)\s+)?(\w+))?$/))) {
        anim_css_set$.call(this, key, v);
        continue;
      }
      a = s[0], step = s[1], to = s[2], color = s[3], mod = s[4], formula = s[5];
      px = void 0;
      if (to) {
        to1 = to.split(/\s+/);
        if (to1.length === 1 && (v1 = this.getCss(key).split(/\s+/)).length > 1) {
          to1 = [x = to1[0], x, x, x];
        }
        if (to1.length > 1) {
          to = [];
          ci = [];
          for (i = _i = 0, _len = to1.length; _i < _len; i = ++_i) {
            t = to1[i];
            m = t.match(/^(.*?)([a-z%]+)$/);
            to[i] = m[1];
            ci[i] = m[2];
          }
          px = 'pxvector';
        } else {
          if (ci = to.match(/[a-z%]+$/)) {
            px = ci = ci[0];
            to = to.slice(0, to.length - ci.length);
            if (px === '%') {
              px = "pv";
            }
          } else if (this.hasCss(key, '1px')) {
            ci = px = 'px';
          } else if (this.hasCss(key, '1')) {
            ci = '';
            px = 'px';
          } else {
            anim_css_set$.call(this, key, v);
            continue;
          }
        }
      } else {
        to = color;
        color = void 0;
        if (v === 'toggle') {
          to = this._animprev.start[key];
          px = this._animprev.stubs[key];
          if (px === 'rgba' || px === 'hsla') {
            color = 1;
          }
        } else if (this.hasCss(key, '#fff')) {
          color = 1;
          if (px = to.match(/^([a-z]+)\(/i)) {
            px = px[1];
            if (px.length === 3) {
              px += 'a';
            }
          } else {
            px = 'rgba';
          }
        } else {
          anim_css_set$.call(this, key, v);
          continue;
        }
      }
      formula = mod ? 'CMath.' + mod$[mod] + '(CMath.' + formula + ', k)' : formula ? 'CMath.' + formula + '(k)' : 'k';
      if (color) {
        to = wdiv$.setCss(key, to)[px](key);
        Px = px.ucFirst();
        To = 'to' + Px;
        if (step) {
          abs = Math.abs;
          c = this.rgba(key)[To]();
          x = to[To]();
          to = (step === '+=' ? new CColor(c[0] + x[0], c[1] + x[1], c[2] + x[2], c[3] + x[3]) : new CColor(abs(c[0] - x[0]), abs(c[1] - x[1]), abs(c[2] - x[2]), abs(c[3] - x[3])));
        }
        F = formula === 'k' ? 'k' : (formula = "(f=" + formula + ")", 'f');
        formula = 'CColor.from' + Px + '((x=start[' + k + '].' + To + '())[0]+((c=[' + to[To]() + '])[0]-x[0])*' + formula + ', x[1]+(c[1]-x[1])*' + F + ', x[2]+(c[2]-x[2])*' + F + ', x[3]+(c[3]-x[3])*' + F + ')';
      } else if (px === 'pxvector') {
        f = [];
        for (i = _j = 0, _len1 = to.length; _j < _len1; i = ++_j) {
          t = to[i];
          if (step) {
            r = this.pxvector(key);
            to[i] = r[i] - (step === '+=' ? -t : t);
          }
          f.push((i === 0 ? '(x=start[' + k + '])' : 'x') + '[' + i + ']+(' + t + '-x)*' + formula + "+'" + ci[i] + "'");
        }
        formula = ["[", f.join(", "), "].join(' ')"].join("");
      } else {
        if (step) {
          to = this[px](key) - (step === '+=' ? -to : to);
        }
        formula = '(x=start[' + k + '])+(' + to + '-x)*' + formula + (ci ? "+'" + ci + "'" : '');
      }
      fn.push('this.setCss(' + k + ', ' + formula + ')');
      stubs[key] = px;
    }
    fn.splice(0, 0, 'fn=function anim$(start, k){\nvar x,c,f' + (progress ? ', e = arguments.callee' : ''));
    if (typeof progress === 'function') {
      fn.push('e.progress.call(this, k, e)');
    } else if (progress) {
      fn.push('this.send(e.progress, k, e)');
    }
    fn.push('}');
    code = fn.join('\n');
    eval(code);
    return extend(fn, {
      stubs: stubs,
      i: 0,
      fps: fps,
      step: 1000 / fps,
      timeout: timeout,
      listen: listen,
      progress: progress
    });
  };

  CWidget.prototype.animate = function(param, timeout, fps, listen, progress) {
    var anim, idx, key, len, _ref, _ref1;
    if ((len = arguments.length) === 0) {
      next_animate$.call(this);
    } else if (param === 'toggle') {
      param = {};
      for (key in (anim = this._animprev).start) {
        param[key] = 'toggle';
      }
      this.animate(param, anim.timeout, anim.fps, timeout);
    } else if (param === 'clear') {
      if (len === 1) {
        this._animqueue = [];
        this.clear(animate$);
      } else if (-1 !== (idx = this._animqueue.indexOf(timeout))) {
        this._animqueue.splice(idx, 1);
      }
    } else if (param === 'stop') {
      this.clear(animate$);
    } else if (param === 'end') {
      if ((_ref = this._animqueue) != null ? _ref.length : void 0) {
        this._animqueue[0].i = this._animqueue[0].timeout;
        animate$.call(this);
        this._animqueue = [];
        this.clear(animate$);
      }
    } else if (param === 'active') {
      return this._timers[animate$];
    } else if (param === 'empty') {
      return !((_ref1 = this._animqueue) != null ? _ref1.length : void 0);
    } else {
      anim = typeof param === 'function' ? param : this.animation(param, timeout, fps, listen, progress);
      if (!this._animqueue) {
        this._animqueue = [anim];
      } else {
        this._animqueue.push(anim);
      }
      next_animate$.call(this);
      animate$.call(this);
    }
    return this;
  };

  CWidget.prototype.morph = function(param) {
    var anim, q, _i, _len, _ref;
    if (typeof param === "string") {
      if (param in CEffect) {
        param = CEffect[param];
      } else {
        throw this.raise("Нет эффекта " + param);
      }
    }
    if (typeof param.timeout === 'object') {
      extend(param, param.timeout);
      if (typeof param.timeout === 'object') {
        delete param.timeout;
      }
    }
    if ('effect' in param) {
      extend_deep_uniq(param, CEffect[param.effect] || (function() {
        throw this.raise("Нет эффекта " + param.effect);
      }).call(this));
    }
    anim = (function(param) {
      return function() {
        var easy, from, i, listen, save, to, x, _ref;
        from = param.from || {};
        to = param.to || {};
        save = !('save' in param) || param.save === 1 ? ((_ref = (x = Object.keys(from))).push.apply(_ref, Object.keys(to)), x) : param.save === 0 ? [] : param.save;
        if (param.css != null) {
          save.push.apply(save, Object.keys(param.css));
        }
        save = save.length ? this.saveCss(save) : {};
        if (param.css != null) {
          this.css(param.css);
        }
        this.send(param.begin);
        for (i in from) {
          if (!(i in to)) {
            to[i] = this.getCss(i);
          }
        }
        for (i in to) {
          if (!(i in from)) {
            from[i] = this.getCss(i);
          }
        }
        if (param.begincss != null) {
          this.css(param.begincss);
        }
        this.css(from);
        if (easy = param.easy) {
          for (i in to) {
            if (!/\s[a-z]\w*$/i.test(to[i])) {
              to[i] = to[i] + ' ' + easy;
            }
          }
        }
        listen = (function(param, save) {
          return function() {
            this.saveCss(save);
            if (param.endcss != null) {
              this.css(param.endcss);
            }
            this.send(param.end, param);
            return this.send(param.end1, param);
          };
        })(param, save);
        anim = this.animation(to, param.timeout, param.fps, listen, param.progress);
        anim.param = param;
        anim.to = to;
        anim.from = from;
        return anim;
      };
    })(param);
    anim.this_param = 1;
    anim = this.animate(anim);
    if (param.queue) {
      _ref = param.queue;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        q = _ref[_i];
        this.morph(q);
      }
    }
    return anim;
  };

  type$.all('timeout interval clear animate morph');

  CWidget.prototype.shape = function(shape) {
    if (!(this._shape || (this._shape = this.up().filter('[cshape]').item(0)))) {
      this.wrapIn(this._shape = this["new"](this.tag(), {
        shape: "shape"
      }).insertBefore(this));
    }
    this._shape.prepend(shape);
    return this;
  };

  CWidget.prototype.modal = function(msg) {
    this._modal || (this._modal = this.wrap("<div cview=modal cargs='class=c-modal'></div>").appendTo(this.body()));
    if (arguments.length) {
      this._modal.html(msg).open();
      return this;
    } else {
      return this._modal;
    }
  };

  CWidget.prototype.tooltip = function(msg) {
    var t, tag, _ref, _ref1, _ref2;
    if (arguments.length) {
      if (msg === null) {
        if ((_ref = this._tooltip) != null) {
          _ref.free();
        }
        this._tooltip = null;
        return this;
      }
      if (msg instanceof CTooltipWidget) {
        if ((_ref1 = this._tooltip) != null) {
          _ref1.free();
        }
        this._tooltip = msg;
        return this;
      }
      if (typeof msg === 'string') {
        msg = {
          text: msg
        };
      } else if (msg instanceof CWidget) {
        msg = {
          html: msg
        };
      }
      if (!this._tooltip || msg.ctype && this._tooltip.config.ctype !== msg.ctype) {
        if ((_ref2 = this._tooltip) != null) {
          _ref2.free();
        }
        t = this._tooltip = this.wrap("<div ctype=" + (msg.ctype || (msg.ctype = "tip")) + " style='display:none'></div>", this);
        if (msg.append) {
          this[msg.append](t);
        } else if (/^TBODY|TFOOT|THEAD$/.test(tag = this.tag())) {
          this.up().before(t);
        } else if (tag === 'TR') {
          this.up().up().before(t);
        } else if (this instanceof CNode || /^INPUT|TEXTAREA|SELECT|META|OL|UL|TABLE|BR|HR|IMG$/.test(tag)) {
          this.before(t);
        } else {
          this.prepend(t);
        }
      }
      this._tooltip.conf(msg);
      return this;
    } else {
      return this._tooltip;
    }
  };

  CWidget.prototype.arrow_border = function(pos, color, height, width, scale) {
    var arrow;
    if (scale == null) {
      scale = 0.5;
    }
    arrow = this.wrap("<div></div>");
    arrow.css({
      border: 'solid transparent',
      width: 0,
      height: 0,
      'pointer-events': 'none'
    });
    if (CNavigator.FF) {
      arrow.css('border-style', 'inset solid inset solid');
    } else if (CNavigator.chrome) {
      arrow.css('transform', 'rotate(360deg)');
    }
    arrow.css('border-' + this.position.rotate[pos] + '-width', width * (1 - scale));
    arrow.css('border-' + this.position.rotate_back[pos] + '-width', width * scale);
    arrow.css('border-' + pos + '-width', 0);
    arrow.css('border-' + this.position.invert[pos], height + 'px solid ' + color);
    return arrow;
  };

  CWidget.prototype.arrow = function(pos, scale, height, width, scale_corner) {
    var arrow, backgroundColor, border, borderWidth, h, l, main, w, _ref;
    if (pos == null) {
      pos = 'right';
    }
    if (scale == null) {
      scale = 0.5;
    }
    if (height == null) {
      height = 10;
    }
    if (width == null) {
      width = 20;
    }
    if (scale_corner == null) {
      scale_corner = 0.5;
    }
    borderWidth = this.px('border-' + pos + '-width');
    backgroundColor = this.rgba('background-color');
    height += borderWidth;
    _ref = this.position.wh(pos, width, height), w = _ref[0], h = _ref[1];
    arrow = this._arrow = this.wrap("<div></div>").appendTo(this.body()).css({
      'overflow': 'hidden',
      width: w,
      height: h
    });
    if (borderWidth) {
      arrow.append(border = this.arrow_border(pos, this.css('border-' + pos + '-color'), height, width, scale_corner)).append(main = this.arrow_border(pos, backgroundColor, height, width, scale_corner));
      l = borderWidth / Math.sin(Math.atan(scale_corner * width / height));
      main.css({
        position: 'absolute',
        'margin-top': -main.offsetHeight() + (pos === 'top' ? l : pos === 'bottom' ? -l : 0),
        'margin-left': pos === 'left' ? l : pos === 'right' ? -l : 0
      });
    } else {
      arrow.append(border = this.arrow_border(pos, backgroundColor, height, width, scale_corner));
    }
    arrow.relative(this, pos, scale, 'after', 'before', -borderWidth);
    return this;
  };

  CWidget.prototype.line = function(pos, scale, len, className, addx, addy) {
    var h, line, w, _ref;
    if (pos == null) {
      pos = 'right';
    }
    if (scale == null) {
      scale = 0;
    }
    if (len == null) {
      len = 30;
    }
    if (className == null) {
      className = '';
    }
    if (addx == null) {
      addx = 0;
    }
    if (addy == null) {
      addy = 0;
    }
    _ref = this.position.wh(pos, '1px', len), w = _ref[0], h = _ref[1];
    line = this.wrap("<div></div>").appendTo(this.body()).css({
      width: w,
      height: h
    });
    if (className) {
      line.addClass(className);
    } else {
      line.css('background', 'red');
    }
    line.position(this, pos, scale, 'after', 'before', addx, addy);
    return line;
  };

  CWidget.prototype.edit = function(opt) {
    var edt, self;
    if (opt == null) {
      opt = {};
    }
    self = this;
    edt = (function(self) {
      return function() {
        if (false === self.send('onBeforeEdit', this)) {
          return;
        }
        self.val(self.dataType(this.val()));
        self._edit = null;
        return self.send("onEdit");
      };
    })(self);
    this._edit = this.wrap(opt.line ? "<input>" : "<textarea></textarea>").val(this.val()).css(this.css('display font text-align vertical-align border width height padding vertical-align'.split(' '))).css('position', 'absolute').css(opt.css || {}).on('keydown', function(e) {
      if (e.code() === 13) {
        this.send('onblur');
      }
      return this;
    }).on('blur', edt).prependTo(this).focus().relative(this, 'left top before before');
    return this;
  };

  type$.all('edit arrow arrow_border');

  CWidget.prototype.setValid = function(valid, err) {
    if (err !== void 0) {
      this.attr('cerr', err);
    }
    return this.attr('cvalid', valid);
  };

  CWidget.prototype.valid = function() {
    var fn, regexp;
    if (regexp = this.attr("cvalid")) {
      fn = CValid[regexp] || new RegExp(regexp);
      if ((typeof fn === 'function' ? fn.call(this) : fn.test(this.val()))) {
        return true;
      } else {
        return this.send('onInvalid');
      }
    } else {
      return true;
    }
  };

  CWidget.prototype.onInvalid = function() {
    this.tooltip(escapeHTML(this.attr("cerr") || "Ошибка - невалидное значение")).tooltip().open();
    return false;
  };

  CWidget.prototype.dataType = function(val) {
    return val;
  };

  CWidget.prototype.param = function() {
    var x;
    x = {};
    x[this.name() || 'val'] = this.val();
    return x;
  };

  CWidget.prototype.load = function() {
    var args, param;
    param = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return this.loader()._load('load', param || {}, this, args);
  };

  CWidget.prototype.submit = function() {
    var args, param;
    param = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (this.valid()) {
      return this.loader()._load('submit', extend(this.param(), param || {}), this, args);
    } else {
      return this;
    }
  };

  CWidget.prototype.reload = function() {
    var args, param;
    param = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (this.valid()) {
      return this.loader()._load('reload', extend(this.param(), param || {}), this, args);
    } else {
      return this;
    }
  };

  CWidget.prototype.save = function() {
    var args, param;
    param = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (this.valid()) {
      return this.loader()._load('save', extend(this.param(), param || {}), this, args);
    } else {
      return this;
    }
  };

  CWidget.prototype.ping = function() {
    var args, param;
    param = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return this.loader()._load('ping', param, this, args);
  };

  CWidget.prototype.erase = function() {
    var args, param;
    param = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return this.loader()._load('erase', extend(this.param(), param || {}), this, args);
  };

  CWidget.prototype.loader = function() {
    var cloader, parent;
    return this._loader || (this._loader = (function() {
      if (cloader = this.element.getAttribute("cloader")) {
        return this.byId(cloader);
      } else {
        parent = this;
        while (!parent._loader && (parent = parent.parent())) {
          null;
        }
        if (parent) {
          return parent._loader;
        } else {
          return this.tooltip({
            html: '<div cview=loading></div>',
            ctype: 'tooltip'
          }).tooltip().last();
        }
      }
    }).call(this));
  };

  CWidget.prototype.loading = function() {
    return !!this.loader().request;
  };

  CWidget.prototype.cconf = function(conf) {
    extend_deep(this.constructor.prototype.config, conf);
    this.send('onConf', 1);
    return this;
  };

  CWidget.prototype.conf = function(conf) {
    var A_config;
    if (!this.hasOwnProperty('config')) {
      A_config = function() {};
      A_config.prototype = this.config;
      this.config = new A_config;
    }
    extend_deep(this.config, conf);
    this.send('onConf');
    return this;
  };

  return CWidget;

})();

CWidgets = (function(_super) {
  var name, prop, _ref, _slice$, _widget$;

  __extends(CWidgets, _super);

  _ref = CWidget.prototype;
  for (name in _ref) {
    prop = _ref[name];
    if (prop instanceof Function && prop.type$ !== 0) {
      CWidgets.prototype[name] = (function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return this.$0$.apply(this, ["$1$"].concat(__slice.call(args)));
      }).inline(name, [prop.type$ || '$result'], name);
    }
  }

  _slice$ = Array.prototype.slice;

  function CWidgets(a) {
    this.length = a.length;
    this._all = a instanceof Array ? a : _slice$.call(a);
  }

  CWidgets.prototype.all = function() {
    return this._all;
  };

  CWidgets.prototype.empty = function() {
    return !this.length;
  };

  CWidgets.prototype.item = function(i) {
    return this.wrap(this._all[i < 0 ? this._all.length + i : i]);
  };

  CWidgets.prototype.items = function() {
    var e, _i, _len, _ref1, _results;
    _ref1 = this._all;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      e = _ref1[_i];
      _results.push(e.widget || this.createWidget(e));
    }
    return _results;
  };

  CWidgets.prototype.each = function(fn) {
    var e, idx, w, _i, _len, _ref1, _results;
    _ref1 = this._all;
    _results = [];
    for (idx = _i = 0, _len = _ref1.length; _i < _len; idx = ++_i) {
      e = _ref1[idx];
      _results.push(fn.call((w = e.widget || this.createWidget(e)), idx, w));
    }
    return _results;
  };

  CWidgets.prototype.$result = function() {
    var args, e, name, _ref1;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (this._all.length) {
      return (_ref1 = (e = this._all[0]).widget || this.createWidget(e))[name].apply(_ref1, args);
    }
  };

  CWidgets.prototype.$any = function() {
    var args, e, name, _ref1;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return (_ref1 = (this._all.length ? (e = this._all[0]).widget || this.createWidget(e) : CRoot))[name].apply(_ref1, args);
  };

  CWidgets.prototype.$range = function() {
    var widgets;
    widgets = this.$rangeAll.apply(this, arguments);
    if (widgets.length === 0) {
      return null;
    } else if (widgets.length === 1) {
      return widgets.item(0);
    } else {
      return widgets;
    }
  };

  CWidgets.prototype.$rangeAll = function() {
    var all, args, e, name, ret, _i, _len, _ref1, _ref2;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    all = [];
    _ref1 = this._all;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      e = _ref1[_i];
      if (ret = (_ref2 = e.widget || this.createWidget(e))[name].apply(_ref2, args)) {
        if (ret instanceof CWidgets) {
          all.push.apply(all, ret._all);
        } else {
          all.push(ret.element);
        }
      }
    }
    return new CWidgets(all);
  };

  CWidgets.prototype.$join = function() {
    var args, e, name;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (args.length) {
      return this.$all.apply(this, arguments);
    } else {
      return ((function() {
        var _i, _len, _ref1, _ref2, _results;
        _ref1 = this._all;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          e = _ref1[_i];
          _results.push((_ref2 = e.widget || this.createWidget(e))[name].apply(_ref2, args));
        }
        return _results;
      }).call(this)).join("");
    }
  };

  CWidgets.prototype.$all = function() {
    var args, i, name, _i, _len, _ref1;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref1 = this.items();
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      i = _ref1[_i];
      i[name].apply(i, args);
    }
    return this;
  };

  CWidgets.prototype.$attr = function(name) {
    return (arguments.length <= 2 || arguments[0] instanceof Array ? this.$result : this.$all).apply(this, arguments);
  };

  CWidgets.prototype.invoke = function() {
    var args, e, name, _base, _i, _len, _ref1, _results;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref1 = this._all;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      e = _ref1[_i];
      if (typeof (_base = e.widget || this.createWidget(e))[name] === "function") {
        _base[name].apply(_base, args);
      }
      _results.push(this);
    }
    return _results;
  };

  CWidgets.prototype.map = function() {
    var args, e, name, _base, _i, _j, _len, _len1, _ref1, _ref2, _results, _results1;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (typeof name === 'function') {
      _ref1 = this._all;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        e = _ref1[_i];
        _results.push(name.apply(e.widget || this.createWidget(e), args));
      }
      return _results;
    } else {
      _ref2 = this._all;
      _results1 = [];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        e = _ref2[_j];
        _results1.push(typeof (_base = e.widget || this.createWidget(e))[name] === "function" ? _base[name].apply(_base, args) : void 0);
      }
      return _results1;
    }
  };

  CWidgets.prototype.grep = function() {
    var args, e, name;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return new CWidgets(typeof name === 'function' ? (function() {
      var _i, _len, _ref1, _results;
      _ref1 = this._all;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        e = _ref1[_i];
        if (name.apply(e.widget || this.createWidget(e), args)) {
          _results.push(e);
        }
      }
      return _results;
    }).call(this) : (function() {
      var _base, _i, _len, _ref1, _results;
      _ref1 = this._all;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        e = _ref1[_i];
        if (typeof (_base = e.widget || this.createWidget(e))[name] === "function" ? _base[name].apply(_base, args) : void 0) {
          _results.push(e);
        }
      }
      return _results;
    }).call(this));
  };

  CWidgets.prototype.exists = function(name) {
    var e;
    return new CWidgets((function() {
      var _i, _len, _ref1, _results;
      _ref1 = this._all;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        e = _ref1[_i];
        if (name in CRoot.ctype(e).prototype) {
          _results.push(e);
        }
      }
      return _results;
    }).call(this));
  };

  _widget$ = new CWidget(document.createElement('div'));

  CWidgets.prototype.queryIndex = function(query, k) {
    var a, e, i, j, _i, _len;
    if (k == null) {
      k = 0;
    }
    if (k < 0) {
      i = -k - 1;
      a = _slice$.call(this._all).reverse();
    } else {
      i = k;
      a = this._all;
    }
    for (j = _i = 0, _len = a.length; _i < _len; j = ++_i) {
      e = a[j];
      if (!e.tagName) {
        continue;
      }
      _widget$.element = e;
      if (_widget$.match(query) && i-- === 0) {
        return (k < 0 ? a.length - j - 1 : j);
      }
    }
    return null;
  };

  CWidgets.prototype.filter = function(query) {
    var e;
    return new CWidgets((function() {
      var _i, _len, _ref1, _results;
      _ref1 = this._all;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        e = _ref1[_i];
        if (_widget$.element = e) {
          _results.push(e);
        }
      }
      return _results;
    }).call(this), _widget$.match(query));
  };

  CWidgets.prototype.unwrap = function() {
    var e, w, _i, _len, _ref1;
    _ref1 = this._all;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      e = _ref1[_i];
      if (w = e.widget) {
        w.unwrap();
      }
    }
    return this;
  };

  return CWidgets;

})(CWidget);

CNode = (function(_super) {
  var Empty$, Send$;

  __extends(CNode, _super);

  function CNode(element, _parent) {
    this.element = element;
    this._parent = _parent;
    if (this.element.widget) {
      throw this.raise("element уже имеет виджет ", this.element.widget);
    }
    this.element.widget = this;
  }

  CNode.prototype.text = function(text) {
    if (arguments.length) {
      return this.element.data = text;
    } else {
      return this.element.data;
    }
  };

  CNode.prototype.html = CNode.prototype.text;

  CNode.prototype.val = CNode.prototype.text;

  CNode.prototype.outer = CNode.prototype.text;

  CNode.prototype.parent = function(parent) {
    if (arguments.length) {
      this._parent = parent;
      return this;
    } else {
      return this._parent;
    }
  };

  CNode.prototype.tag = function(tag) {
    if (arguments.length) {
      throw this.raise("Для CNode.tag изменение ноды по имени не определено");
    } else {
      return this.element.nodeName;
    }
  };

  Send$ = function(event) {
    return CSend(this, event);
  };

  Empty$ = function() {};

  CNode.prototype.setHandler = function() {
    var handler, handlers, _i, _len;
    handlers = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = handlers.length; _i < _len; _i++) {
      handler = handlers[_i];
      this.element['on' + handler] = Send$;
    }
    return this;
  };

  CNode.prototype.removeHandler = function() {
    var handler, handlers, _i, _len;
    handlers = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = handlers.length; _i < _len; _i++) {
      handler = handlers[_i];
      this.element['on' + handler] = Empty$;
    }
    return this;
  };

  return CNode;

})(CWidget);

CButtonWidget = (function(_super) {
  __extends(CButtonWidget, _super);

  function CButtonWidget() {
    CButtonWidget.__super__.constructor.apply(this, arguments);
    this.setHandler("click");
  }

  CButtonWidget.prototype.val = function() {};

  CButtonWidget.prototype.onclick = function(e) {
    var act;
    if (act = this.attr('act')) {
      this[act]();
    }
    e.stop();
    return false;
  };

  return CButtonWidget;

})(CWidget);

CSubmitWidget = (function(_super) {
  __extends(CSubmitWidget, _super);

  function CSubmitWidget() {
    return CSubmitWidget.__super__.constructor.apply(this, arguments);
  }

  CSubmitWidget.prototype.onclick = function(e) {
    this.parent().submit();
    e.stop();
    return false;
  };

  return CSubmitWidget;

})(CButtonWidget);

CLoadWidget = (function(_super) {
  __extends(CLoadWidget, _super);

  function CLoadWidget() {
    return CLoadWidget.__super__.constructor.apply(this, arguments);
  }

  CLoadWidget.prototype.onclick = function(e) {
    this.parent().load();
    e.stop();
    return false;
  };

  return CLoadWidget;

})(CButtonWidget);

CReloadWidget = (function(_super) {
  __extends(CReloadWidget, _super);

  function CReloadWidget() {
    return CReloadWidget.__super__.constructor.apply(this, arguments);
  }

  CReloadWidget.prototype.onclick = function(e) {
    this.parent().reload();
    e.stop();
    return false;
  };

  return CReloadWidget;

})(CButtonWidget);

CUploadWidget = (function(_super) {
  __extends(CUploadWidget, _super);

  function CUploadWidget() {
    return CUploadWidget.__super__.constructor.apply(this, arguments);
  }

  CUploadWidget.prototype.onclick = function(e) {
    this.parent().upload();
    e.stop();
    return false;
  };

  return CUploadWidget;

})(CButtonWidget);

CSaveWidget = (function(_super) {
  __extends(CSaveWidget, _super);

  function CSaveWidget() {
    return CSaveWidget.__super__.constructor.apply(this, arguments);
  }

  CSaveWidget.prototype.onclick = function(e) {
    this.parent().save();
    e.stop();
    return false;
  };

  return CSaveWidget;

})(CButtonWidget);

CEraseWidget = (function(_super) {
  __extends(CEraseWidget, _super);

  function CEraseWidget() {
    return CEraseWidget.__super__.constructor.apply(this, arguments);
  }

  CEraseWidget.prototype.onclick = function(e) {
    this.parent().erase();
    e.stop();
    return false;
  };

  return CEraseWidget;

})(CButtonWidget);

CPingWidget = (function(_super) {
  __extends(CPingWidget, _super);

  function CPingWidget() {
    return CPingWidget.__super__.constructor.apply(this, arguments);
  }

  CPingWidget.prototype.onclick = function(e) {
    this.parent().ping();
    e.stop();
    return false;
  };

  return CPingWidget;

})(CButtonWidget);

CResetWidget = (function(_super) {
  __extends(CResetWidget, _super);

  function CResetWidget() {
    return CResetWidget.__super__.constructor.apply(this, arguments);
  }

  CResetWidget.prototype.onclick = function(e) {
    this.parent().reset();
    e.stop();
    return false;
  };

  return CResetWidget;

})(CButtonWidget);

CInputWidget = (function(_super) {
  __extends(CInputWidget, _super);

  CInputWidget.prototype._default_update = 'keyup';

  function CInputWidget() {
    var valid;
    CInputWidget.__super__.constructor.apply(this, arguments);
    if (valid = this.attr("cvalid")) {
      this.on('keyup', function() {
        if (this.valid()) {
          this.clear('onInvalid');
          this.tooltip(null);
        } else {
          this.timeout(1500, 'onInvalid');
        }
        return this;
      });
    }
  }

  CInputWidget.prototype.val = function(val) {
    if (arguments.length) {
      this.element.value = val;
      return this;
    } else {
      return this.element.value;
    }
  };

  CInputWidget.prototype.html = CInputWidget.prototype.val;

  CInputWidget.prototype.text = CInputWidget.prototype.val;

  return CInputWidget;

})(CWidget);

CTextareaWidget = (function(_super) {
  __extends(CTextareaWidget, _super);

  function CTextareaWidget() {
    return CTextareaWidget.__super__.constructor.apply(this, arguments);
  }

  return CTextareaWidget;

})(CInputWidget);

CSelectWidget = (function(_super) {
  __extends(CSelectWidget, _super);

  function CSelectWidget() {
    return CSelectWidget.__super__.constructor.apply(this, arguments);
  }

  CSelectWidget.prototype._default_update = 'change';

  return CSelectWidget;

})(CInputWidget);

CRadioWidget = (function(_super) {
  __extends(CRadioWidget, _super);

  function CRadioWidget() {
    return CRadioWidget.__super__.constructor.apply(this, arguments);
  }

  CRadioWidget.prototype._default_update = 'change';

  return CRadioWidget;

})(CInputWidget);

CCheckboxWidget = (function(_super) {
  __extends(CCheckboxWidget, _super);

  function CCheckboxWidget() {
    return CCheckboxWidget.__super__.constructor.apply(this, arguments);
  }

  return CCheckboxWidget;

})(CRadioWidget);

CImgWidget = (function(_super) {
  __extends(CImgWidget, _super);

  function CImgWidget() {
    return CImgWidget.__super__.constructor.apply(this, arguments);
  }

  CImgWidget.prototype._default_update = void 0;

  CImgWidget.prototype._default_assign = 'src';

  CImgWidget.prototype.val = function(val) {
    return void 0;
  };

  CImgWidget.prototype.src = function(val) {
    if (arguments.length) {
      this.element.src = val;
      return this;
    } else {
      return this.element.src;
    }
  };

  return CImgWidget;

})(CInputWidget);

CScriptWidget = (function(_super) {
  __extends(CScriptWidget, _super);

  function CScriptWidget() {
    return CScriptWidget.__super__.constructor.apply(this, arguments);
  }

  return CScriptWidget;

})(CImgWidget);

CLinkWidget = (function(_super) {
  __extends(CLinkWidget, _super);

  function CLinkWidget() {
    return CLinkWidget.__super__.constructor.apply(this, arguments);
  }

  return CLinkWidget;

})(CImgWidget);

CIframeWidget = (function(_super) {
  var iframe;

  __extends(CIframeWidget, _super);

  function CIframeWidget() {
    return CIframeWidget.__super__.constructor.apply(this, arguments);
  }

  CIframeWidget.prototype.contentWindow = (iframe = document.createElement('iframe')).contentWindow ? function() {
    return this.element.contentWindow;
  } : function() {
    var name;
    if (!(name = this.element.name)) {
      this.attr(name, name = CMath.uniqid());
    }
    return window.frames[name];
  };

  CIframeWidget.prototype.contentDocument = iframe.contentDocument ? function() {
    return this.element.contentDocument;
  } : iframe.document ? function() {
    return this.element.document;
  } : function() {
    return this.contentWindow().document;
  };

  CIframeWidget.prototype.content = document.documentElement ? function() {
    return new CWidget(this.contentDocument().documentElement);
  } : function() {
    return new CWidget(this.contentDocument().firstChild);
  };

  CIframeWidget.prototype.html = function(html) {
    var root;
    root = this.content();
    if (arguments.length === 1) {
      return root.html(html);
    } else {
      return root.html();
    }
  };

  CIframeWidget.prototype.text = function(text) {
    var root;
    root = this.content();
    if (arguments.length === 1) {
      return root.text(html);
    } else {
      return root.text();
    }
  };

  CIframeWidget.prototype.hideAsTransport = function() {
    this.left(0);
    this.top(0);
    this.width(1);
    this.height(1);
    this.css('visibility', "hidden");
    this.css("position", "absolute");
    return this;
  };

  CIframeWidget.prototype.src = function(url, param, method, enctype) {
    var form, i, name, val, _i, _len, _ref;
    if (arguments.length === 0) {
      return this.document().location.href;
    }
    if (!method || (method = method.toUpperCase()) === "GET") {
      if (param) {
        url = CParam.add(url, param);
      }
      return this.document().location.replace(url);
    } else if (method === "POST") {
      form = this.wrap("<form method=POST target='" + this.frame.attr('name') + "'></form>").attr('action', url).hide().appendTo(this.body());
      if (enctype) {
        form.attr('enctype', enctype);
      }
      if (!param) {
        null;
      } else if (typeof param === 'string') {
        _ref = param.split(/&/);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          name = decodeURIComponent(i.replace(/=.*/, ''));
          val = decodeURIComponent(i.replace(/^[^=]*=/, ''));
          form.wrap("<input type=hidden />").attr('name', name).val(val).appendTo(form);
        }
      } else {
        for (i in param) {
          form.wrap("<input type=hidden />").attr('name', i).val(param[i]).appendTo(form);
        }
      }
      form.element.submit();
      return form.remove();
    } else {
      throw this.raise("Неизвестный науке метод " + method);
    }
  };

  return CIframeWidget;

})(CImgWidget);

CFormWidget = (function(_super) {
  __extends(CFormWidget, _super);

  CFormWidget.prototype._default_assign = 'val';

  CFormWidget.prototype._method = 'POST';

  function CFormWidget() {
    var cn, counter;
    if (arguments.length === 0) {
      CFormWidget.__super__.constructor.call(this, document.getElementById((cn = this.className()).lc()) || document.getElementById(cn));
    } else {
      CFormWidget.__super__.constructor.apply(this, arguments);
    }
    counter = this.constructor.prototype.hasOwnProperty('_counter') ? ++this.constructor.prototype._counter : this.constructor.prototype._counter = 0;
    this.send("onBeforeCreate", counter);
    if (0 === counter) {
      this.defineHandlers();
    }
    this.setHandlers();
    this.setListens();
    this.setModel();
    this.initialize();
    this.send("onCreate", counter);
  }

  CFormWidget.prototype.initialize = function() {
    this.attachElements();
    this.setHandlersOnElements();
    return this.setModelOnElements();
  };

  CFormWidget.prototype.dataType = function(data) {
    var rows;
    if (typeof data === 'string') {
      data = fromJSON(data);
    }
    if (data.rows && data.fields) {
      rows = CRows.from(data);
      extend(rows, data);
      delete rows.rows;
      delete rows.fields;
      return rows;
    } else {
      return data;
    }
  };

  CFormWidget.prototype.param = function() {
    var name, param, x, _i, _len, _ref;
    param = {};
    _ref = this._elements;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      if (!(x = this[name]).attr('nodata')) {
        param[name] = x.val();
      }
    }
    return param;
  };

  CFormWidget.prototype.update = function(val) {
    if (val instanceof Array) {
      val = val[0];
    }
    if (false !== this.send('onBeforeUpdate', val)) {
      this.val(val);
      this.send('onUpdate', val);
    }
    return this;
  };

  CFormWidget.prototype.val = function(val) {
    var name, _i, _len, _ref;
    if (arguments.length === 0) {
      return this.param();
    } else {
      this.data = val;
      _ref = this._elements;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        this["$" + name].val(val[name]);
      }
      this.setValid();
      return this;
    }
  };

  CFormWidget.prototype.valid = function() {
    var e, err, i, _i, _len, _ref;
    err = [];
    _ref = this._elements;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (!(e = this["$" + i]).valid()) {
        err.push(e);
      }
    }
    if (err.length === 0) {
      return true;
    } else {
      this.send('onInvalid', err);
      return false;
    }
  };

  CFormWidget.prototype.setValid = function(valid) {
    var id, name, v, _ref;
    if (valid == null) {
      valid = (_ref = this.data) != null ? _ref._valid : void 0;
    }
    if (valid) {
      id = this.id();
      for (name in valid) {
        v = valid[name];
        this["$" + name].setValid(v);
      }
    }
    return this;
  };

  return CFormWidget;

})(CWidget);

CTemplateWidget = (function(_super) {
  __extends(CTemplateWidget, _super);

  function CTemplateWidget() {
    return CTemplateWidget.__super__.constructor.apply(this, arguments);
  }

  CTemplateWidget.prototype.getTemplate = function() {
    var html, n, name, p, t;
    if (this.hasClass('c-template')) {
      this.removeClass('c-template');
      html = this.html();
      this.html("");
    } else if (this.attr('cinit') != null) {
      html = this.down(0).html().replace(/!(!)|!/g, "$1");
    } else {
      p = this;
      n = [];
      while (p) {
        if ((t = p._templates) || (p.attr('cinit') != null) && (t = p.initTemplate()._templates)) {
          html = t[n.length ? "-" + n.join("-") : ""].template;
          break;
        }
        if (!/^\d+$/.test(name = p.name())) {
          n.unshift(name);
        }
        p = p.parent();
      }
    }
    return html;
  };

  CTemplateWidget.prototype.initTemplate = function() {
    var html;
    html = this.getTemplate();
    this._template = CTemplate.compile(html, this._templates = {});
    return this;
  };

  CTemplateWidget.prototype.clone = function() {
    return CTemplateWidget.__super__.clone.apply(this, arguments).addClass("c-novid");
  };

  CTemplateWidget.prototype.val = function(data) {
    if (arguments.length) {
      if (!this._template) {
        this.initTemplate();
      }
      this.element.innerHTML = this._template(this.data = this.dataType(data), this.element.id);
      this.removeClass("c-novid");
      this.initialize();
      return this.setValid();
    } else {
      return this.param();
    }
  };

  return CTemplateWidget;

})(CFormWidget);

CListWidget = (function(_super) {
  var tag_up$;

  __extends(CListWidget, _super);

  function CListWidget() {
    return CListWidget.__super__.constructor.apply(this, arguments);
  }

  CListWidget.prototype._tag_frame_add = "ctype=form";

  tag_up$ = {
    TABLE: 'tr',
    TBODY: 'tr',
    THEAD: 'tr',
    TFOOT: 'tr',
    TR: 'td',
    SELECT: 'option',
    UL: 'li',
    LO: 'li',
    P: 'span'
  };

  CListWidget.prototype.initTemplate = function() {
    var html, tag, ts;
    if (this.hasClass('c-ls') || (ts = this.hasClass('c-ts'))) {
      this.removeClass((ts ? 'c-ts' : 'c-ls'));
      if (ts) {
        html = this.html();
        this.html("");
      } else {
        html = this.getTemplate();
      }
      tag = tag_up$[this.tag()] || 'div';
      html = ["<", tag, " id=$+", (this._tag_frame_add ? " " + this._tag_frame_add : ""), ">", html, "</", tag, ">"].join("");
    } else {
      html = this.getTemplate();
    }
    return this._template = CTemplate.compile(html, this._templates = {}, {
      is_list: 1
    });
  };

  CListWidget.prototype.attachElements = function() {
    this._elements = [];
    return this;
  };

  CListWidget.prototype.setValid = function() {};

  CListWidget.prototype.detach = function(name) {
    if (this.frame === name || this.frame === this[name]) {
      delete this.frame;
    }
    return CListWidget.__super__.detach.apply(this, arguments);
  };

  CListWidget.prototype.valid = function() {
    return this.child().reduce("and", "valid");
  };

  CListWidget.prototype.param = function() {
    var ch;
    return CRows.to((function() {
      var _i, _len, _ref, _results;
      _ref = this.child().items();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ch = _ref[_i];
        _results.push(ch.val());
      }
      return _results;
    }).call(this));
  };

  CListWidget.prototype.val = function(data) {
    var ch, _i, _len, _ref, _results;
    if (arguments.length) {
      if (!this._template) {
        this.initTemplate();
      }
      this.element.innerHTML = this._template(this.data = this.dataType(data), this.element.id);
      this.child().setValid(data.valid || this.data.valid);
      return this.setHandlersOnElements();
    } else {
      _ref = this.child().items();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ch = _ref[_i];
        if (ch.parent() === this) {
          _results.push(ch.val());
        }
      }
      return _results;
    }
  };

  CListWidget.prototype.upload = function() {
    var args, param;
    param = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.loader()._load('upload', param, this, args);
    return this;
  };

  CListWidget.prototype.add = function(data) {
    var add, d, last;
    if (false !== this.send('onBeforeAdd', data)) {
      last = this.last();
      d = this.data || (this.data = []);
      this.append(this._template(data, this.element.id, d.length));
      data.push.apply(d, data);
      this.setHandlersOnElements(add = last.nextAll())();
      add.setValid(data.valid || d.valid);
      this.send('onAdd', data, add);
    }
    return this;
  };

  return CListWidget;

})(CTemplateWidget);

CMenuWidget = (function(_super) {
  __extends(CMenuWidget, _super);

  function CMenuWidget() {
    return CMenuWidget.__super__.constructor.apply(this, arguments);
  }

  CMenuWidget.prototype.frame_onclick = function(e, frame) {
    return this.activate(frame, e.ctrl());
  };

  CMenuWidget.prototype.activate = function(new_frame, add) {
    var old_frame;
    if (old_frame = this.frame) {
      if (this.send("onDeactivate", new_frame) === false) {
        return this;
      }
      old_frame.removeClass("c-active");
    }
    this.frame = new_frame.addClass("c-active");
    this.send("onActivate", old_frame);
    return this;
  };

  return CMenuWidget;

})(CListWidget);

CScrollWidget = (function(_super) {
  __extends(CScrollWidget, _super);

  function CScrollWidget() {
    return CScrollWidget.__super__.constructor.apply(this, arguments);
  }

  CScrollWidget.prototype.onscroll_window = function() {
    if (this.body().hscroll('end')) {
      this.upload();
    }
    return this;
  };

  return CScrollWidget;

})(CListWidget);

CSelectableWidget = (function(_super) {
  __extends(CSelectableWidget, _super);

  function CSelectableWidget() {
    return CSelectableWidget.__super__.constructor.apply(this, arguments);
  }

  CSelectableWidget.prototype.config = {
    "class": {
      active: 'c-active',
      select: 'c-select',
      unactive: 'c-unactive'
    }
  };

  CSelectableWidget.prototype.frame_onclick = function(e, frame) {};

  return CSelectableWidget;

})(CListWidget);

CAutocompleteWidget = (function(_super) {
  __extends(CAutocompleteWidget, _super);

  function CAutocompleteWidget() {
    return CAutocompleteWidget.__super__.constructor.apply(this, arguments);
  }

  return CAutocompleteWidget;

})(CTemplateWidget);

CSortableHTML5Widget = (function(_super) {
  __extends(CSortableHTML5Widget, _super);

  function CSortableHTML5Widget() {
    return CSortableHTML5Widget.__super__.constructor.apply(this, arguments);
  }

  CSortableHTML5Widget.prototype._tag_frame_add = "ctype=form draggable=true";

  CSortableHTML5Widget.prototype.ondragstart = function(e) {
    var t;
    if ((t = e.target()).parent() === this) {
      this._sortable = t;
      this.timeout(0, (function(_this) {
        return function() {
          return _this._sortable.addClass('sort');
        };
      })(this));
      e.event.dataTransfer.effectAllowed = 'move';
      e.event.dataTransfer.dropEffect = 'move';
      e.event.dataTransfer.setData('text/html', t.html());
    }
    return this;
  };

  CSortableHTML5Widget.prototype.ondragover = function(e) {
    var t;
    if (this === (t = e.target())) {
      e.cancel();
    }
    if (t.parent() === this) {
      e.cancel();
      if (t !== this._sortable) {
        if (t.next() === this._sortable) {
          t.before(this._sortable);
        } else {
          this._sortable.before(t);
        }
      }
    }
    return this;
  };

  CSortableHTML5Widget.prototype.ondrop = function(e) {
    var t;
    if ((t = e.target()) === this || t.parent() === this) {
      e.cancel();
      this.send("onSorted", this._sortable);
    }
    return this;
  };

  CSortableHTML5Widget.prototype.ondragend = function(e) {
    if (this._sortable) {
      this._sortable.removeClass('sort');
      this._sortable = null;
    }
    return this;
  };

  return CSortableHTML5Widget;

})(CListWidget);

CSortableWidget = (function(_super) {
  __extends(CSortableWidget, _super);

  function CSortableWidget() {
    return CSortableWidget.__super__.constructor.apply(this, arguments);
  }

  CSortableWidget.prototype.frame_onmousemove = function(e, frame) {
    if (!this._sortable && e.left) {
      this.dragstart(e, frame);
    }
    return this;
  };

  CSortableWidget.prototype.onmousemove_document = function(e) {
    if (this._sortable) {
      this.dragover(e);
    }
    return this;
  };

  CSortableWidget.prototype.dragstart = function(e, sortable) {
    var h, left, style, tag, top, w;
    this._distance_x = e.x() - (left = sortable.left());
    this._distance_y = e.y() - (top = sortable.top());
    style = sortable.element.style;
    this._sortable_css = {
      width: style.width,
      height: style.height,
      left: style.left,
      top: style.top,
      position: style.position,
      'z-index': style.zIndex,
      cursor: style.cursor
    };
    this._sortable = sortable.addClass('sort').css({
      position: 'absolute',
      width: (w = sortable.width()),
      height: (h = sortable.height()),
      top: top,
      left: left,
      cursor: 'move',
      'z-index': 1000
    });
    this._sortable_prev = this._sortable.prev();
    tag = sortable.tag();
    return sortable.before(this._void = this.wrap("<" + tag + ">&nbsp;</" + tag + ">").width(w).height(h).novid());
  };

  CSortableWidget.prototype.dragover = function(e) {
    var floor, item, self, sort, target, _i, _len, _ref;
    sort = this._sortable.hide();
    target = this.byViewXY(e.viewX(), e.viewY());
    sort.show();
    floor = target.union(target.upperAll());
    self = false;
    if (e.left) {
      sort.left(e.x() - this._distance_x);
      sort.top(e.y() - this._distance_y);
      _ref = floor.items();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (!(item.parent() === this)) {
          continue;
        }
        self = item;
        break;
      }
      if (self) {
        if (self.next() === this._void) {
          self.before(this._void);
        } else {
          this._void.before(self);
        }
      }
    } else {
      this.dragend();
    }
    return this;
  };

  CSortableWidget.prototype.dragend = function() {
    var sleft, sort, stop, timeout, vleft, vtop;
    sort = this._sortable;
    this._sortable = null;
    vleft = this._void.left();
    vtop = this._void.top();
    sleft = sort.left();
    stop = sort.top();
    timeout = Math.abs(Math.sqrt(vleft * vleft + vtop * vtop) - Math.sqrt(sleft * sleft + stop * stop)) * 2;
    return sort.animate({
      left: vleft,
      top: vtop
    }, timeout, (function(_this) {
      return function() {
        _this._void.before(sort.css(_this._sortable_css).removeClass('sort')).remove();
        if (_this._sortable_prev !== sort.prev()) {
          _this.send("onSorted", sort, _this._sortable_prev);
        }
        return _this._sortable_css = _this._void = _this._distance_x = _this._distance_y = _this._sortable_prev = null;
      };
    })(this));
  };

  return CSortableWidget;

})(CListWidget);

CModalWidget = (function(_super) {
  var zIndex;

  __extends(CModalWidget, _super);

  function CModalWidget() {
    return CModalWidget.__super__.constructor.apply(this, arguments);
  }

  zIndex = 1500000;

  CModalWidget.prototype._modals = [];

  CModalWidget.prototype.opacity = 0.5;

  CModalWidget.prototype._toTop = 1;

  CModalWidget.prototype.onclick = function(e) {
    this.close();
    e.stop();
    return false;
  };

  CModalWidget.prototype.fg_onclick = function(e) {
    e.stop();
    return false;
  };

  CModalWidget.prototype.get_prev_modal = function() {
    var len;
    if (len = this._modals.length) {
      return this._modals[len - 1];
    } else {
      return this.body();
    }
  };

  CModalWidget.prototype.open = function() {
    var l, prev, t;
    if (false !== this.send('onBeforeOpen')) {
      zIndex += 2;
      prev = this.get_prev_modal();
      prev.prop('c-overflow', prev.saveCss('overflow'));
      prev.css('overflow', 'hidden');
      if (!this.fog) {
        this.constructor.prototype.fog = this.body().append("<div style='background: black; display: none'></div>").last();
      }
      this.fog.css({
        position: 'absolute',
        width: '100%',
        height: '100%',
        top: t = this.viewTop(),
        left: l = this.viewLeft(),
        'z-index': zIndex - 1,
        opacity: this.opacity,
        display: 'block'
      });
      this.css({
        position: 'absolute',
        left: l,
        top: t,
        overflow: 'auto',
        width: '100%',
        height: '100%',
        'z-index': zIndex
      });
      if (this._toTop) {
        this.vscroll(0);
        this.hscroll(0);
      }
      this.show();
      this._modals.push(this);
      this.send('onOpen');
    }
    return this;
  };

  CModalWidget.prototype.close = function() {
    var prev;
    if (false !== this.send('onBeforeClose')) {
      this.hide();
      zIndex -= 2;
      this._modals.pop();
      prev = this.get_prev_modal();
      prev.css('overflow', prev.prop('c-overflow'));
      if (this._modals.length === 0 || this.hasOwnProperty('fog')) {
        this.fog.hide();
      } else {
        this.fog.css('z-index', zIndex - 1);
      }
      this.send('onClose');
    }
    return this;
  };

  return CModalWidget;

})(CFormWidget);

CCenterModalWidget = (function(_super) {
  __extends(CCenterModalWidget, _super);

  function CCenterModalWidget() {
    return CCenterModalWidget.__super__.constructor.apply(this, arguments);
  }

  CCenterModalWidget.prototype.center = function() {
    var h, height, width, _ref;
    _ref = this.fg.absolute(), width = _ref.width, height = _ref.height;
    if (300 < (h = this.viewHeight() - height)) {
      this.fg.css({
        'margin-top': h / 2
      });
    } else {
      this.fg.css({
        'margin-top': 150,
        'margin-bottom': 150
      });
    }
    if (300 < (h = this.viewWidth() - width)) {
      this.fg.css({
        'margin-left': h / 2
      });
    } else {
      this.fg.css({
        'margin-left': 150,
        'margin-right': 150
      });
    }
    return this;
  };

  CCenterModalWidget.prototype.onBeforeOpen = function() {
    return this.center();
  };

  return CCenterModalWidget;

})(CModalWidget);

CTooltipWidget = (function(_super) {
  __extends(CTooltipWidget, _super);

  CTooltipWidget.prototype.config = {
    pos: 'top',
    scale: 'center',
    scalex: 'after',
    scaley: 'mid',
    height: 10,
    width: 30,
    corner: 'mid',
    focus: 1,
    mouse: 1,
    open: 'fadeIn',
    close: 'fadeOut',
    "class": 'c-tip',
    turn: 1,
    close_button: "<div class='fr ico-close-red cp' onclick='$(this).up().close()'></div>"
  };

  function CTooltipWidget() {
    CTooltipWidget.__super__.constructor.apply(this, arguments);
    if (this.config["class"]) {
      this.addClass(this.config["class"]);
    }
    this.css('overflow', 'visible');
    this.initialize();
  }

  CTooltipWidget.prototype.initialize = function() {};

  CTooltipWidget.prototype.conf = function(msg) {
    var bottom, close, corner, display, height, i, left, open, p, parent, pos, position, right, scale, scalex, scaley, top, turn, vh, vw, width, _i, _ref, _ref1;
    if (msg == null) {
      msg = {};
    }
    if (msg.display === 1) {
      display = 1;
      delete msg.display;
    }
    if (msg.open === 1) {
      open = 1;
      delete msg.open;
    }
    if (msg.close === 1) {
      close = 1;
      delete msg.close;
    }
    CTooltipWidget.__super__.conf.call(this, msg);
    p = this.config;
    p.scale = this.position.normalize(p.pos, p.scale);
    p.corner = this.position.normalize(p.pos, p.corner);
    if (msg.text) {
      this.text(msg.text);
    }
    if (msg.html) {
      this.content(msg.html);
    }
    if (close) {
      this.prepend(p.close_button);
    }
    pos = p.pos, scale = p.scale, height = p.height, width = p.width, scalex = p.scalex, scaley = p.scaley, corner = p.corner, turn = p.turn;
    position = (parent = this.parent()).contains(this) ? 'relative' : 'position';
    this[position](parent, pos, scale, scalex, scaley, height);
    if (turn) {
      vw = this.viewWidth();
      vh = this.viewHeight();
      this.display();
      _ref = this.viewPos(), left = _ref.left, top = _ref.top, right = _ref.right, bottom = _ref.bottom;
      if (left < 0 || top < 0 || right > vw || bottom > vh) {
        for (i = _i = 0; _i <= 2; i = ++_i) {
          pos = this.position.rotate[pos];
          scale = this.position.normalize(pos, scale);
          corner = this.position.normalize(pos, corner);
          this[position](parent, pos, scale, scalex, scaley, height);
          _ref1 = this.viewPos(), left = _ref1.left, top = _ref1.top, right = _ref1.right, bottom = _ref1.bottom;
          if (left >= 0 && top >= 0 && right <= vw && bottom <= vh) {
            break;
          }
        }
      }
      this.hidden();
    }
    this.arrow(this.position.invert[pos], corner, height, width);
    if (display) {
      this.display();
    }
    if (open) {
      this.open();
    }
    return this;
  };

  CTooltipWidget.prototype.open = function() {
    this.animate("end");
    return this.morph(this.config.open);
  };

  CTooltipWidget.prototype.close = function() {
    this.animate("end");
    return this.morph(this.config.close);
  };

  CTooltipWidget.prototype.display = function() {
    return this.show();
  };

  CTooltipWidget.prototype.hidden = function() {
    return this.hide();
  };

  return CTooltipWidget;

})(CWidget);

CTipWidget = (function(_super) {
  __extends(CTipWidget, _super);

  function CTipWidget() {
    return CTipWidget.__super__.constructor.apply(this, arguments);
  }

  CTipWidget.prototype.initialize = function() {
    this.parent().setHandler('mouseenter', 'mouseleave');
    return this.setHandler('mouseenter', 'mouseleave');
  };

  CTipWidget.prototype.onmouseenter = function(e) {
    if (this.config.mouse) {
      return this.open();
    }
  };

  CTipWidget.prototype.onmouseleave = function(e) {
    if (this.config.mouse) {
      return this.close();
    }
  };

  CTipWidget.prototype.onmouseenter_parent = CTipWidget.prototype.onmouseenter;

  CTipWidget.prototype.onmouseleave_parent = CTipWidget.prototype.onmouseleave;

  return CTipWidget;

})(CTooltipWidget);

CTipFocusWidget = (function(_super) {
  __extends(CTipFocusWidget, _super);

  function CTipFocusWidget() {
    return CTipFocusWidget.__super__.constructor.apply(this, arguments);
  }

  CTipFocusWidget.prototype.initialize = function() {
    return this.parent().setHandler('focusin', 'focusout');
  };

  CTipFocusWidget.prototype.onfocus = function(e) {
    if (this.config.focus) {
      return this.open();
    }
  };

  CTipFocusWidget.prototype.onblur = function(e) {
    if (this.config.focus) {
      return this.close();
    }
  };

  CTipFocusWidget.prototype.onfocus_parent = CTipFocusWidget.prototype.onfocusin;

  CTipFocusWidget.prototype.onblur_parent = CTipFocusWidget.prototype.onfocusout;

  return CTipFocusWidget;

})(CTooltipWidget);

CLoaderWidget = (function(_super) {
  __extends(CLoaderWidget, _super);

  function CLoaderWidget() {
    this._onTimer = __bind(this._onTimer, this);
    this._onReadyStateChange = __bind(this._onReadyStateChange, this);
    var parent;
    CLoaderWidget.__super__.constructor.apply(this, arguments);
    if ((parent = this.parent()) && !parent._loader) {
      parent._loader = this;
    }
    this.initialize();
  }

  CLoaderWidget.prototype.initialize = function() {
    return this.novid();
  };

  CLoaderWidget.prototype.val = function() {
    return null;
  };

  CLoaderWidget.prototype._method = 'POST';

  CLoaderWidget.prototype._timeout = 5000;

  CLoaderWidget.prototype._onReadyStateChange = function() {
    var request;
    request = this.request.request;
    if (request.readyState === 4) {
      if (request.status === 200 || request.statusText === '') {
        this.loaded();
      } else {
        this.loaded_error("Ошибка Ajax: " + request.statusText);
      }
    }
    return void 0;
  };

  CLoaderWidget.prototype._onTimer = function() {
    this.request.request.abort();
    return this.loaded_error("Закончилось время ожидания ответа запроса `" + this.request.url + "`");
  };

  CLoaderWidget.prototype._load = function(type, param, customer, args) {
    var async, headers, id, key, method, params, pk, req, request, t, timer, url, _ref, _ref1;
    if (param == null) {
      param = {};
    }
    if ((req = this.request) && !req.end) {
      if ((_ref = req.request) != null) {
        _ref.abort();
      }
      say("Поступил load до того, как закончился предыдущий. old_customer: " + req.customer + " new_customer: " + customer);
    }
    this.request = {
      type: type,
      param: param,
      args: args
    };
    if (customer.send("onSubmit", param) === false || false === this.ohSubmit(param)) {
      return this;
    }
    request = new XMLHttpRequest();
    if (request === false) {
      throw this.raise("Браузер не поддерживает Ajax");
    }
    timer = setTimeout(this._onTimer, this._timeout);
    request.onreadystatechange = this._onReadyStateChange;
    url = param._act || customer.attr("action") || this.attr("action") || ((id = customer.id()) ? (!param.id && (pk = (_ref1 = customer.data) != null ? _ref1.id : void 0) ? param.id = pk : void 0, "/" + id) : this.document().location.pathname);
    delete param._act;
    method = param._method || customer._method || customer.attr("cmethod") || this.attr("cmethod") || this._method;
    delete param._method;
    if ('_async' in param) {
      async = param._async;
      delete param._async;
    } else {
      async = true;
    }
    headers = {
      Vary: 'Ajax',
      Ajax: type
    };
    if (CInit.post === 'json') {
      headers['Content-Type'] = 'application/json';
    }
    for (key in param) {
      if (!(key[0] === '$')) {
        continue;
      }
      headers[key.slice(1).upFirst()] = param[key];
      delete param[key];
    }
    extend(this.request, {
      timer: timer,
      request: request,
      headers: headers,
      history: param._history,
      url: url,
      customer: ((t = customer.attr('target')) ? this.byId(t) : customer)
    });
    delete param._history;
    params = method !== "POST" ? (params ? (url = CUrl.from(url), extend(url.param, param), url = CUrl.to(url)) : void 0, null) : CInit.post === 'json' ? toJSON(param) : CParam.to(param);
    request.open(method, url, async);
    for (key in headers) {
      request.setRequestHeader(key, headers[key]);
    }
    request.send(params);
    return this;
  };

  CLoaderWidget.prototype.loaded = function() {
    var args, customer, data, e, request;
    this.end_request();
    request = this.request.request;
    customer = this.request.customer;
    try {
      this.request.data = data = customer.dataType(request.responseText);
    } catch (_error) {
      e = _error;
      return this.loaded_error("Ошибка в ответе сервера", e);
    }
    this.ohComplete();
    args = this.request.args;
    customer.send.apply(customer, ["onComplete", data, this.request].concat(__slice.call(args)));
    switch (this.request.type) {
      case "reload":
        this.reload_manipulate(data);
        break;
      case "upload":
        customer.add(data);
        break;
      case "submit":
      case "load":
        customer.update(data, this.request);
        break;
      case "erase":
        customer.remove();
    }
    this.ohLoad();
    customer.send.apply(customer, ["onLoad", data, this.request].concat(__slice.call(args)));
    this.request = null;
    return this;
  };

  CLoaderWidget.prototype.loaded_error = function(ajax_error, e) {
    var args, customer, err, error, _ref;
    this.end_request();
    this.warn("loaded_error", ajax_error, e);
    this.request.error = error = (err = (_ref = this.request) != null ? _ref.request.getResponseHeader("Error") : void 0) ? unescape(err) : ajax_error;
    this.request.ajax_error = ajax_error;
    this.request.exception = e;
    args = this.request.args;
    customer = this.request.customer;
    customer.send.apply(customer, ["onComplete", error, this.request].concat(__slice.call(args)));
    customer.send.apply(customer, ["onError", error, this.request].concat(__slice.call(args)));
    if (!this.request.abort_error) {
      this.ohComplete();
      this.ohError();
    }
    return this.request = null;
  };

  CLoaderWidget.prototype.end_request = function() {
    var _ref;
    if ((_ref = this.request) != null) {
      _ref.request.onreadystatechange = null;
    }
    clearTimeout(this.request.timer);
    return this.request.end = true;
  };

  CLoaderWidget.prototype.ohSubmit = function() {
    return this.vid();
  };

  CLoaderWidget.prototype.ohComplete = function() {
    return this.novid();
  };

  CLoaderWidget.prototype.ohLoad = function() {
    return this.request.customer.tooltip(null);
  };

  CLoaderWidget.prototype.ohError = function() {
    var error;
    error = this.request.request.status === 500 ? this.request.request.responseText : escapeHTML(this.request.error);
    return this.request.customer.tooltip({
      ctype: 'tooltip',
      close: 1,
      html: "<div class='fl mb mr ico-ajax-error'></div><h3>Ошибка</h3>" + error,
      open: 1,
      timeout: 5000,
      "class": 'c-error'
    });
  };

  CLoaderWidget.prototype.reload_manipulate = function(data) {
    var act, args, frames, i, id, layout, layout_id, old, page, stash, title, url, _i, _ref;
    if (typeof data === 'string') {
      data = fromJSON(data);
    }
    if (stash = data['@stash']) {
      CTemplate._STASH = stash;
    }
    if (layout = data['@layout']) {
      for (i = _i = 1, _ref = layout.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
        layout_id = data[layout[i - 1]].layout_id;
        page = data[act = layout[i]];
        this.byId(layout_id).html(CTemplate.compile(page.template)(page.data || {}, act));
      }
      title = CTemplate._STASH.title;
    }
    if (frames = data["@frames"]) {
      for (act in frames) {
        id = frames[act];
        page = data[act];
        this.byId(page.id).html(CTemplate.compile(page.template)(page.data || {}, act));
      }
    }
    CTemplate._STASH = {};
    $(window).clean();
    $(document).clean();
    CRoot.initWidgets();
    url = CUrl.from(data['@url']);
    old = CUrl.from(this.window().location.href);
    extend(frames = {}, CParam.from(old.param._frames_, /,/), CParam.from(url.param._frames_, /,/));
    if (frames = CParam.to(frames, ",")) {
      url.param._frames_ = frames;
    }
    args = [CUrl.to(url), title || this.document().title];
    if (this.request.history) {
      args.unshift(0);
    }
    this.navigate.apply(this, args);
    say.apply(null, ['reload_manipulate'].concat(__slice.call(args), [window.history$], [window.history_pos$]));
    return this;
  };

  return CLoaderWidget;

})(CWidget);

CStatusWidget = (function(_super) {
  __extends(CStatusWidget, _super);

  function CStatusWidget() {
    CStatusWidget.__super__.constructor.apply(this, arguments);
    this.attachElements("main", "preloader", "sucess", "error", "error_msg");
  }

  CStatusWidget.prototype.initialize = function() {};

  CStatusWidget.prototype.ohSubmit = function() {
    this.main.hide();
    this.sucess.hide();
    this.error.hide();
    return this.preloader.show();
  };

  CStatusWidget.prototype.ohComplete = function() {
    return this.preloader.hide();
  };

  CStatusWidget.prototype.ohLoad = function() {
    return this.sucess.show();
  };

  CStatusWidget.prototype.ohError = function() {
    this.error.element.title = this.request.error;
    this.error_msg.text(this.request.error);
    return this.error.show();
  };

  return CStatusWidget;

})(CLoaderWidget);

CRouterWidget = (function(_super) {
  var pop$, prev_url$;

  __extends(CRouterWidget, _super);

  CRouterWidget.prototype.config = {
    loader: false
  };

  function CRouterWidget() {
    CRouterWidget.__super__.constructor.apply(this, arguments);
    if (!this.constructor.handlers) {
      this.defineHandlers();
    }
    this.setListens();
  }

  CRouterWidget.prototype.onclick_document = function(e) {
    var a, loader, param, url;
    if ((a = e.target()).tag() === "A") {
      url = CUrl.from(a.attr("href"));
      if (!url.host || url.host === a.document().location.host) {
        e.cancel();
        if (loader = this.config.loader) {
          a._loader = loader;
        }
        param = {};
        if (url.pathname === this.document().location.pathname) {
          param._noact_ = noact;
        }
        if (url.hash) {
          param._layout_id_ = url.hash;
          url.hash = "";
        }
        param._act = CUrl.to(url);
        a.reload(param);
      }
    }
    return this;
  };

  CRouterWidget.prototype.val = function() {
    return void 0;
  };

  prev_url$ = null;

  pop$ = function(e) {
    var href;
    this.history_change();
    href = this.window().location.href;
    href = href.replace(/\#.*$/, '');
    if (prev_url$ !== href) {
      this.reload({
        _act: href,
        _history: 1
      });
    }
    return prev_url$ = href;
  };

  CRouterWidget.prototype.onhashchange_window = pop$;

  CRouterWidget.prototype.onpopstate_window = pop$;

  return CRouterWidget;

})(CWidget);

CView = {
  modal: [CCenterModalWidget, '<div id=$-fg class=\'$class\' style=\'$style\'>$&</div>'],
  loading: [CLoaderWidget, '<div id=$-error style=\'display:none\'></div>\n<img id=$-preloader src=\'/img/fanding_lines.gif\'>'],
  status: [CStatusWidget, '<img id=$-main src="img/preloader.gif">\n<img id=$-preloader src="img/loader_loading.gif" style="display:none">\n<img id=$-sucess src="img/loader_sucess.gif" style="display:none">\n<div id=$-error style="display:none; background-color:MistyRose">\n<img src="img/loader_error.gif"> #error_msg\n</div>']
};

CRoot.initialize();

//# sourceMappingURL=lib.map
