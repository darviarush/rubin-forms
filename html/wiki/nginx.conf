
#user  nobody;
worker_processes  1;	# 24

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  64;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
	#error_log /var/log/nginx/error.log crit
	
	# http://habrahabr.ru/post/198982/ - ускоряем nginx

    sendfile        on;
    tcp_nopush		on;
	tcp_nodelay		on;

    keepalive_timeout	65;
	keepalive_requests	1000;

    gzip  on;
	gzip_disable "msie6";
	#reset_timedout_connection on;
	#client_body_timeout 10;
	#send_timeout 2;

	client_max_body_size 100M;
	
	upstream backend {
        # Директива задаёт имя и параметры сервера. Обратите внимание, мы будем
        # использовать имя "backend" в директиве proxy_pass
        server 127.0.0.1:8080;
    }
	
	upstream http_unicorn {
		server 127.0.0.1:9000;
		keepalive 16;
	}
	
	server {
		listen 80;
		server_name unicorn;
		
		proxy_http_version 1.1;
		proxy_ignore_client_abort on;	# Определяет, закрывать ли соединение с проксированным сервером в случае, если клиент закрыл соединение, не дождавшись ответа.
		
		root "/cygdrive/c/rea/rubin/unicorn/html";
		
		location @rubin {
			internal;
			root "/cygdrive/c/rea/rubin/rubin/html";
			try_files $uri @unicorn;
		}

		location @unicorn {
			proxy_pass			http://http_unicorn;
			proxy_set_header	Connection "keep-alive";
		}
		
		location ~ \.\w+$ {
			try_files $uri @rubin;
		}
		
		location @upload {
			client_body_in_file_only clean;
			proxy_pass_request_body off;
			proxy_set_header REQUEST_BODY_FILE $request_body_file;	
			
			client_body_timeout 60s;
			client_max_body_size 200m;
			
			proxy_pass			http://http_unicorn;
			proxy_set_header	Connection "keep-alive";
		}
		
		location / {
			error_page 418 = @upload;
			error_page 502 /error/works.html;
			
			recursive_error_pages on;
			
			if ( $content_type ~ multipart/form-data ) {
				return 418;
			}
		
			proxy_pass			http://http_unicorn;
			proxy_set_header	Connection "keep-alive";
        }
		
		#location /upload/img/ {
		#	auth_request /auth/?uri=$request_uri;		# ограничиваем доступ по подзапросу
		#}
		
		error_page 502 /error/works.html;
		
        error_page   500 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
	}
			
	server {
        listen       80;
        server_name  testjs;
		
		location / {
			root "/cygdrive/c/rea/html5/testJavaScript";
			index  index.html index.htm;
			# Выдаем всегда свежий Last-Modified.
			#expires -1; # Внимание!!! Эта строка expires необходима!
			#add_header Last-Modified $sent_http_Expires;
		}
		
		location ~ \.pl$ {
            root           "/cygdrive/c/rea/html5/";
            fastcgi_pass   127.0.0.1:9000;
            include        fastcgi_params;
        }
		
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

	}
	
	server {
        listen       80;
        server_name  x;
		
		location / {
			root "/cygdrive/c/rea/rubin/x";
			index  index.html index.htm;
		}
		
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

	}
	
	map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
	
	server {
        listen       80;
        server_name  wsidx;
		
		location / {
			proxy_pass   http://127.0.0.1:9009;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
			proxy_read_timeout 950s;
			gzip off;
		}
		
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

	}
	
	server {
        listen       80;
        server_name  ws;
		
		location / {
			root "/cygdrive/c/rea/_websocket";
		}
		
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

	}

	# http://ruhighload.com/index.php/2009/04/24/настройка-nginx/
	server {
        listen       80;
        server_name  cons3 cons3ex;
		
		location / {
			proxy_pass http://backend/;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $remote_addr;

			proxy_connect_timeout 120;
			proxy_send_timeout    120;
			proxy_read_timeout    180;
		}
				
		location /socket.io/ {
			proxy_pass   http://127.0.0.1:9009;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
			proxy_read_timeout 950s;
			proxy_buffering off;
			gzip off;
			proxy_pass_header Date;
			proxy_pass_header X-XSS-Protection;
			expires     epoch;
		}
		
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

	}

	
    server {
        listen       80;
        server_name  localhost emls billing bonus wordpress joomla squirrelmail;

        location / {
			proxy_pass http://backend/;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $remote_addr;

			proxy_connect_timeout 120;
			proxy_send_timeout    120;
			proxy_read_timeout    180;
		}
		
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }

    server {
        listen       80;
        server_name  disp;

		rewrite ^/api/(\w+)/?(\w+)?/?$ /api/index.php?RESTurl=$1&RESTmethod=$2 last;
		
        location / {
		
			proxy_pass http://backend/;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $remote_addr;

			proxy_connect_timeout 120;
			proxy_send_timeout    120;
			proxy_read_timeout    180;
		}
		
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }
	
	
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
