package R::Model::Type::Safehtml;
# объект представляющий текст html

use base R::Model::Type::String;

use common::sense;
use R::App;

my %tags = $app->perl->set(
"a",		#Используется для создания ссылок.
"abbr",		#Определяет текст как аббревиатуру с помощью атрибута title.
#"address",		#Задает контактные данные автора/владельца документа или статьи.
#"area",		#Определяет область внутри изображения-карты (изображения с активной областью). Всегда вложен внутрь тега <map>.
"article",		#Тег для задания независимого логически завершенного блока контента. Потенциальные источники: сообщение форума, блога, новости, комментарии.
"aside",		#Определяет вторичный или связанный контент в стороне от основного контента страницы.
#"audio",		#Загружает звуковой контент на веб-страницу.
"b",		#Задает полужирное начертание шрифта.
#"base",		#Задает базовый адрес (URL), относительно которого вычисляются все относительные адреса. Это поможет избежать проблем при переносе страницы в другое место, так как все ссылки будут работать, как и прежде.
"bdi",		#Изолирует части текста, которые могут быть отформатированы в направлении, отличном от другого текста за их пределами.
"bdo",		#Задает направление вывода текста преимущественно для языков, в которых чтение текста происходит справа налево.
"blockquote",		#Определяет выделенный текст как цитату, применяется для описания больших цитат.
#"body",		#Внутри этого тега располагается документ. Текст, находящийся внутри этих тегов, будет отображаться браузером.
"br",		#Перенос текста на новую строку.
#"button",		#Создает интерактивную кнопку. Внутрь тега можно поместить содержимое — текст или изображение.
#"canvas",		#Используется для отрисовки графики, «на лету», с помощью скриптов (обычно это JavaScript). Представляет собой контейнер для графики, для рисования необходим скрипт.
"caption",		#Определяет заголовок (подпись) таблицы. Добавляется непосредственно после тега <table>.
"cite",		#Отмечает небольшую цитату или сноску, взятую из другого источника.
"code",		#Указывает на программный код.
"col",		#Предназначен для форматирования групп столбцов, не содержащих информацию одного типа.
"colgroup",		#Создает структурную группу столбцов, выделяющую множество логически однородных ячеек.
#"datalist",		#Задает выпадающий список для элемента <input>.
"dd",		#Используется для описания термина из тега <dt>.
"del",		#Помечает текст как удаленный.
#"details",		#Задает дополнительные сведения, которые пользователь по желанию может просмотреть или скрыть. Позволяет размещать любой контент внутри тега.
"dfn",		#Выделяет текст как определение.
#"dialog",		#Служит для создания диалоговых окон на странице.
"div",		#Выделяет большие блоки текста для форматирования с помощью CSS-стилей.
"dl",		#Тег-контейнер, внутри которого находятся определение и описание термина.
"dt",		#Используется для задания определения.
"em",		#Выделяет важные фрагменты текста.
#"embed",		#Определяет внешний интерактивный контент или плагин.
#"fieldset",		#Группирует связанные элементы в форме, рисуя рамку вокруг них.
"figcaption",		#Задает заголовок для элемента <figure>.
"figure",		#Используется для группирования медиа-контента, например, изображения и подписи к нему.
"font",			# задаёт атрибуты текста
#"footer",		#Определяет завершающую область документа или раздела.
#"form",		#Добавляет на страницу форму, позволяющую организовать сбор информации от посетителей сайта. Не имеет смысла без атрибута action.
"h1",		#	Создает заголовки шести уровней.
"h2",
"h3",
"h4",
"h5",
"h6",
"head",		#Используется для служебных целей, содержит множество данных, указывающих браузеру, как следует обрабатывать веб-страницы. Введенная в нем информация не отображается в окне браузера. Внутри тегов <head> используются следующие теги: <title>, <meta>, <script>, <link>, <style>.
#"header",		#Определяет заголовок страницы или раздела.
"hr",		#Создает горизонтальную линию на веб-странице.
#"html",		#Определяет html-документ, все содержимое страницы записывается внутри его контейнера.
"i",		#Отображает выделенный текст курсивом.
#"iframe",		#Создает встроенный фрейм, загружая в текущий html-документ другой документ.
"img",		#Встраивает изображения в HTML-документ с помощью атрибута src, значением которого является адрес встраиваемого изображения.
#"input",		#Создает поля для формы.
"ins",		#Отмечает текст как вставку, применяется для выделения изменений, вносимых в документ.
"kbd",		#Помечает текст, вводимый пользователем с клавиатуры.
#"keygen",		#Генерирует пару ключей — закрытый и открытый. При отправке формы, закрытый ключ хранится локально, и открытый ключ отправляется на сервер. Работает внутри тега <form>.
"label",		#Добавляет текстовую метку для элемента <input>, связывая саму надпись и поле ввода при помощи идентификатора id.
"legend",		#Формирует заголовок группы элементов формы, заданных при помощи элемента <fieldset>.
"li",		#Задает элемент маркированного и нумерованного списка.
#"link",		#Определяет отношения между текущей страницей и другими документами, а также подключает файл с таблицами стилей к документу. Закрывающий тег не требуется.
#"main",		#Задает основное содержимое документа. Содержимое внутри элемента должно быть уникальным. Оно не должно содержать контент, который повторяется во всех частях документах, таких как боковые панели, навигационные ссылки, информацию об авторских правах, логотипы сайта, и поисковые формы.
#"map",		#Используется для определения изображения-карты, изображения с активной областью. Является контейнером для элементов <area>.
"mark",		#Используется для выделения текста.
"menu",		#Определяет список меню/команд. Используется для контекстных меню, панели инструментов и для включения элементов управления формы и команд.
#"menuitem",		#Определяет команду/пункт меню, которые пользователь может вызвать из всплывающего меню.
#"meta",		#Используется для хранения дополнительной информации о странице. Эту информацию используют браузеры для обработки страницы, а поисковые системы — для ее индексации. В блоке <head> может быть несколько тегов <meta>, потому что в зависимости от используемых атрибутов они несут разную информацию.
"meter",		#Определяет измерения в заранее заданном диапазоне.
#"nav",		#Задает навигационные ссылки по сайту.
#"noscript",		#Определяет секцию, не поддерживающую сценарий (скрипт).
#"object",		#Определяет контейнер, в который встраивается элемент мультимедиа (например, аудио, видео, Java-апплеты, ActiveX, PDF и Flash). Также можно другую веб-страницу в HTML-документ. Дополнительно внутрь контейнера <object> можно поместить тег <param> для передачи дополнительных параметров плагинов.
"ol",		#Создает упорядоченный нумерованный список.
#"optgroup",		#Является контейнером для группы тегов <option>, представляя варианты для выбора в раскрывающемся списке.
#"option",		#Определяет вариант в раскрывающемся списке.
#"output",		#Представляет собой результат вычисления (обычно рассчитанный с помощью скрипта).
"p",		#Организует абзацы, разделяя текст на логические части.
#"param",		#Определяет параметр для объекта.
"pre",		#Позволяет вводить текст без форматирования, с сохранением пробелов и переносов текста.
#"progress",		#Определяет ход выполнения задачи любого рода.
"q",		#Определяет краткую цитату.
"rp",		#Используется для вывода текста в браузерах, которые не поддерживают тег <ruby>.
"rt",		#Добавляет краткую характеристику сверху или снизу от символов (для типографики Восточной Азии), заключенных в элементе <ruby>, выводится уменьшенным шрифтом.
"ruby",		#Используются для аннотаций в типографике Восточной Азии, и показывают объяснение Восточно-Азиатских символов.
"s",		#Отображает текст перечеркнутым.
"samp",		#Используется для вывода текста, представляющего результат выполнения программного кода или скрипта, отображается моноширинным шрифтом.
#"script",		#Используется для определения сценария на стороне клиента (обычно JavaScript). Содержит либо текст скрипта, либо указывает на внешний файл сценария с помощью атрибута src.
"section",		#Определяет логическую область (раздел) страницы.
#"select",		#Используется для создания списков для формы.
"small",		#Отображает выделенный текст шрифтом меньшего размера.
#"source",		#Используется для указания медиа-ресурсов для мультимедийных элементов, таких как <video> и <audio>.
"span",		#Выделяет часть текста и позволяет форматировать отрывки текста внутри другого элемента.
"strong",		#Расставляет акцент на тексте, выделяя его полужирным.
#"style",		#Внутри этого тега задаются стили, используемые на странице. Этих тегов на странице может быть несколько.
"sub",		#Задает подстрочное написание символов.
#"summary",	#Определяет видимый заголовок для тега <details>. Отображается в виде закрашенного треугольника, кликнув по которому можно просмотреть подробности заголовка.
"sup",		#Задает надстрочное написание символов.
"table",	#Тег для создания таблицы.
"tbody",	#Определяет тело таблицы.
"td",		#Создает ячейку таблицы.
#"textarea",	#Создает большие поля для ввода текста.
"tfoot",	#Определяет нижний колонтитул таблицы.
"th",		#Создает заголовок ячейки таблицы.
"thead",	#Определяет заголовок таблицы.
"time",		#Определяет дату/время.
"title",	#Задает название страницы, которое будет отображаться в строке с названием приложения окна браузера. Текст, содержащийся внутри, отображается в качестве заголовка страницы.
"tr",		#Создает строку таблицы.
#"track",	#Используется для указания субтитров для медиа-элементов (<audio> и <video>)
"u",		#Создает подчеркнутый текст.
"ul",		#Создает маркированный список.
"var",		#Выделяет переменные из программ.
#"video",	#Добавляет на страницу видео-файлы. Поддерживает 3 видео формата: MP4, WebM, Ogg.
#"wbr",		#Указывает браузеру возможное место разрыва длинной строки.
);

# разрешённые атрибуты
my %attrs = $app->perl->set(
#"hidden",		# Глобальный атрибут	Предотвращает генерирование данного элемента, в то время как сохраняет дочерние элементы, например, элементы script, active.
"high",		# <meter>	Указывает нижнюю границу верхнего диапазона.
"href",		# <a>, <area>, <base>, <link>	 URL связанного ресурса.
"hreflang",		# <a>, <area>, <link>	Указывает язык связанного ресурса.
#"http-equiv",	# <meta>	 
#"icon",		# <command>	Указывает картинку, которая будет представлять команду.
#"id",		# Глобальный атрибут	Часто используется с CSS для стилизации заданного элемента. Значение атрибута должно быть уникальным.
#"ismap",		# <img>	Показывает, что изображение часть серверной карты изображений.
#"itemprop",		# Глобальный атрибут	 
#"keytype",		# <keygen>	Указывает тип сгенерированного ключа.
#"kind",		# <track>	Указывает вид дорожки текста.
#"label",		# <track>	Указывает читабельный заголовок дорожки текста.
"lang",		# Глобальный атрибут	Определяет язык для используемого элемента.
#"language",		# <script>	Определяет язык скрипта, используемый в элементе.
#"list",		# <input>	Задаёт список предустановленных опций для предложения пользователю.
#"loop",		# <audio>, <bgsound>, <marquee>, <video>	Указывает, следует ли медиа элементам начинать проигрывание сначала, после их завершения.
"low",		# <meter>	Указывает верхнюю границу нижнего диапазона.
#"manifest",		# <html>	Задает URL кешированного манифеста документа.
"max",		# <input>, <meter>, <progress>	Указывает максимальное допустимое значение.
#"maxlength",		# <input>, <textarea>	Определяет максимальное количество символов, допустимых в элементе.
"media",		# <a>, <area>, <link>, <source>, <style>	Задаёт подсказку медиа, для которой, связанный ресурс был спроектирован.
#"method",		# <form>	Определяет, какой HTTP метод использовать, когда отправлются данные формы. Может быть GET (по умолчанию) или POST.
"min",		# <input>, <meter>	Показывает минимальное допустимое значение.
#"multiple",		# <input>, <select>	Показывает могут ли быть выбраны множественные значения в input типа email или file.
"name",		# <button>, <form>, <fieldset>, <iframe>, <input>, <keygen>, <object>, <output>, <select>, <textarea>, <map>, <meta>, <param>	Имя элемента. К примеру, используется сервером для определения полей отправленной формы.
#"novalidate",		# <form>	Этот атрибут указывает, что форма не должна быть проверятся, когда передается на сервер.
#"open",		# <details>	Указывает, отображать ли детали при загрузки страницы.
"optimum",		# <meter>	Указывает оптимальное числовое значение.
#"pattern",		# <input>	Определяет регулярное выражение, которое будет проверять входные данные элемента.
#"ping",		# <a>, <area>	 
#"placeholder",		# <input>, <textarea>	Предоставляет подсказку пользователю, касательно того, что можно ввести в поле.
#"poster",		# <video>	URL указывающий блок постера для показа, пока пользователь играет или ищет.
#"preload",		# <audio>, <video>	Указывает загружать ли ресурс целиком, его часть или не загружать вовсе.
"pubdate",		# <time>	Указывает, что эта дата и время являются ли датой ближайшего элемента предка <article>.
#"radiogroup",		# <command>	 
#"readonly",		# <input>, <textarea>	Указывает, можно ли редактировать элемент.
#"rel",		# <a>, <area>, <link>	Задаёт отношение целевого объекта к объекту ссылки.
#"required",		# <input>, <select>, <textarea>	Указывает, необходимо ли заполнять этот элемент или нет.
"reversed",		# <ol>	Указывает, отображать ли список по убыванию, вместо того, чтобы показывать его по возрастанию.
#"rows",		# <textarea>	Определяет количество строк в textarea.
"rowspan",		# <td>, <th>	Определяет количество строк ячейки таблицы, которые следует охватывать.
#"sandbox",		# <iframe>	 
#"spellcheck",		# Глобальный атрибут	Указывает, разрешена ли проверка правописания для этого элемента.
"scope",		# <th>	 
#"scoped",		# <style>	 
#"seamless",		# <iframe>	 
#"selected",		# <option>	Определяет значение, которое будет выделено при загрузки страницы.
"shape",		# <a>, <area>	 
#"size",		# <input>, <select>	Определяет ширину элемента (в пикселях). Если у элемента значение атрибута type — text или password, тогда это количество символов.
#"sizes",		# <link>	 
"span",		# <col>, <colgroup>	 
"src",		# <audio>, <embed>, <iframe>, <img>, <input>, <script>, <source>, <track>, <video>	URL встраиваемого содержимого.
#"srcdoc",		# <iframe>	 
#"srclang",		# <track>	 
"srcset",		# <img>	 
"start",		# <ol>	Определяет первый номер, если это не 1.
#"step",		# <input>	 
#"style",		# Глобальный атрибут	Определяет CSS стили, которые перепишут установленные ранее стили.
"summary",		# <table>	 
#"tabindex",		# Глобальный атрибут	Переписывает порядок Tab по умолчанию браузера и следует вместо него заданному.
#"target",		# <a>, <area>, <base>, <form>	 
"title",		# Глобальный атрибут	Текст, который будет отображаться в всплывающей подсказке, когда на него наведут указатель.
#"type",		# <button>, <input>, <command>, <embed>, <object>, <script>, <source>, <style>, <menu>	Определяет тип элемента.
"usemap",		# <img>,  <input>, <object>	 
"value",		# <button>, <option>, <input>, <li>, <meter>, <progress>, <param>	Определяет значение элемента по умолчанию, которое будет отображаться после загрузки страницы.
"width",		# <canvas>, <embed>, <iframe>, <img>, <input>, <object>, <video>	Примечание: в некоторых случаях, таких как <div>, это устаревший атрибут, в этом случае используйте свойство CSS width вместо него. В других случаях, таких как <canvas>, ширина должна быть задана этим атрибутом.
#"wrap",		# <textarea>	Указывает, следует ли переносить текст.
"border",		# <img>, <object>, <table>	Ширина границы.
#"buffered",		# <audio>, <video>	Содержит отрезок времени уже буферизованного медиа.
#"challenge",		# <keygen>	Строка вызова, которая передаётся вместе с публичным ключом.
#"charset",		# <meta>, <script>	Определяет кодировку страницы или скрипта.
#"checked",		# <command>, <input>	Указывает, следует ли отметить элемент при загрузки страницы.
"cite",		# <blockquote>, <del>, <ins>, <q>	Содержит URI, который указывает на источник цитаты или изменения.
#"class",		# Глобальный атрибут	Часто используется вместе с CSS, чтобы стилизовать элементы с общими свойствами.
#"code",		# <applet>	Указывает URL файла класса аплета для загрузки и выполнения.
#"codebase",		# <applet>	Этот атрибут предоставляет абсолютный или относительный URL директории,  файлы аплета .class, на которые ссылаются в хранимом атрибуте кода.
"color",		# <basefont>, <font>, <hr>	Этот атрибут устанавливает цвет текста, используя либо название цвета, либо шестнадцатиричный формат #RRGGBB.
#"cols",		# <textarea>	Определяет количество столбцов в textarea.
"colspan",		# <td>, <th>	Определяет диапазон количества столбцов ячейки.
#"content",		# <meta>	Значение, ассоциированное с http-equiv или name зависит от контекста.
#"contenteditable",		# Глобальный атрибут	Указывает, редактируется ли содержимое элемента.
#"contextmenu",		# Глобальный атрибут	Определяет ID элемента <menu> который послужит, как контекстное меню элемента.
"controls",		# <audio>, <video>	Указывает, следует ли отображать пользователю кнопки воспроизведения.
#"coords",		# <area>	Набор значений, задающий координаты области для активного участка.
#"data",			# <object>	Задаёт URL ресурса.
#"data-*",		# Глобальный атрибут	Позволяет прикрепить произвольные атрибуты для HTML элемента.
"datetime",		# <del>, <ins>, <time>	Указывает дату и время, ассоциированное с элементом.
#"default",		# <track>	Указывает, что дорожка должна быть доступна, если пользовательские настройки не говорят об обратном.
#"defer",		# <script>	Указывает, что скрипт должен быть запущен, после того как страница будет проанализирована.
"dir",		# Глобальный атрибут	Определяет направление текста. Допустимые значения ltr (Слева направо) или rtl (Справа налево).
#"dirname",		# <input>, <textarea>	 
#"disabled",		# <button>, <command>, <fieldset>, <input>, <keygen>, <optgroup>, <option>, <select>, <textarea>	Указывает, может ли пользователь взаимодействовать с элементом.
"download",		# <a>, <area>	Указывает, что ссылка используется для загрузки.
#"draggable",		# Глобальный атрибут	Определяет, можно ли перетаскивать элемент.
#"dropzone",		# Глобальный атрибут	Указывает, что элемент принимает содержимое элемента, которое перетаскивают на него.
#"enctype",		# <form>	Определяет тип содержимого для данных формы, когда method — POST.
#"for",		# <label>, <output>	Описывает элементы, которые принадлежат им.
#"form",		# <button>, <fieldset>, <input>, <keygen>, <label>, <meter>, <object>, <output>, <progress>, <select>, <textarea>	Указывает форму, которая является владельцем элемента.
#"formaction",		# <input>, <button>	Указывает действие элемента, перезаписвающее действие, указанное в форме <form>.
"headers",		# <td>, <th>	ID элементов <th>, которые применяются к этому элементу.
"height",		# <canvas>, <embed>, <iframe>, <img>, <input>, <object>, <video>	Примечание: в некоторых экземплярах, таких как <div>, это устаревший атрибут, в этом случае используйте свойство CSS height. В других экземплярах, таких как <canvas>, высота должна быть задана этим атрибутом.
#"accept",		# <form>, <input>	Список типов, которые принимает сервер, обычно тип файла.
#"accept-charset",	# <form>	Список поддерживаемых наборов символов.
#"accesskey",		# Глобальный атрибут	Определяет клавишную комбинацию для активизации или добавления фокуса к элементу.
#"action",		# <form>	URI адрес программы, которая обработает данные, переданные через форму.
"align",		# <applet>, <caption>, <col>, <colgroup>,  <hr>, <iframe>, <img>, <table>, <tbody>,  <td>,  <tfoot> , <th>, <thead>, <tr>	Задаёт горизонтальное выравнивание элемента.
"alt",		# <applet>, <area>, <img>, <input>	Альтернативный текст, в случае, если изображение не может быть отображено.
#"async",	# <script>	Указывает, что скрипт должен быть выполнен асинхронно.
#"autocomplete",		# <form>, <input>	Показывает, могут ли управляющие элементы в форме по умолчанию имет собственные значения для автодополнения в форме.
#"autofocus",		# <button>, <input>, <keygen>, <select>, <textarea>	На этом элементе следует автоматически сфокусироваться после загрузки страницы.
#"autoplay",		# <audio>, <video>	Аудио и видео нужно воспроизвести как можно скорее.
#"autosave",		# <input>	Предыдущее значения следует сохранить в выпадающем списке при загрузке страницы.
"bgcolor",		# <body>, <col>, <colgroup>, <marquee>, <table>, <tbody>, <tfoot>, <td>, <th>, <tr>	Цвет фона элемента.
);

my $re_attr = qr/( (?P<attr> [\w\-]+ ) (?:=(?:(?P<val>[\w\-]+)|"(?P<val>[^"]*)"|'(?P<val>[^']*)')) (?P<space> \s*) )/x;

# заменяет атрибут
sub _replace_attr {
	my $attr = lc $+{attr};
	exists $attrs{$attr}? do {
		my $val = $+{val};
		my $space = $+{space};
		
		# if($attr eq "width") {
			# $val = int $val;
			# if $val > 
		# }
		
		
		"$attr=\"$val\"$space"
	}:
	""
}

# заменяет
sub _replace {
	exists $+{tag}? do {
		my $tag = $+{name};
		my $attrs = $+{attrs};
		my $slash = $+{close_slash};
		
		return "&lt;$tag" . ($attrs? " $attrs": "") . "$slash&gt;" if !exists $tags{$tag};
		
		$attrs =~ s!$re_attr! &_replace_attr !ge;
		
		$attrs .= " target=_blank" if $tag eq "a";
		
		"<$tag" . ($attrs? " $attrs": "") . "$slash>"
	}:
	exists $+{close_tag}? do {
		$tags{$+{name}}? $+{close_tag}: "&lt;/$+{name}&gt;"
	}:
	exists $+{invalid}? ($+{invalid} eq "<"? "&lt;": "&gt;"):
	exists $+{comment}? "":
	die "что-то неясное попало в шаблон";
}

# вырезает подозрительные теги
sub onCheck {
	my ($check, $html) = @_;
	
	# вырезаем подозрительные теги
	$html =~ s{
		(?P<tag> < (?P<name> \w+) \s* (?P<attrs> $re_attr* ) (?P<close_slash> /)? > ) |
		(?P<close_tag> </ (?P<name> \w+) \s*> ) |
		(?P<comment> <!-- .*? --> ) |
		(?P<invalid> [<>] )
	}{ &_replace }gxisme;
	
	$check->val( $html );
}

# # конструктор - вызывается, когда значение из базы преобразуется к типу
# sub fromCol {
	# my ($field, $html) = @_;
	
	# # создаём объект
	# bless [$html
	# ], $field->{class};
# }

# тип столбца
sub typeCol {
	my $field = shift;
	$field->input("html");
	$field->SUPER::typeCol(@_)
}

# рендерит в шаблоне - проверено: подозрительных тегов нет
sub render { $_[0] }

1;